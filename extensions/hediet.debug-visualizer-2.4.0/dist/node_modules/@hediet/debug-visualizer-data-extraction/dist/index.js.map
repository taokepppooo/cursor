{"version":3,"sources":["../webpack/bootstrap",".././src/js/helpers/index.ts",".././src/util.ts",".././src/js/api/index.ts",".././src/js/api/injection.ts",".././src/js/api/DataExtractorApiImpl.ts",".././src/js/api/default-extractors/index.ts",".././src/DataExtractionResult.ts",".././src/js/helpers/createGraph.ts",".././src/index.ts",".././src/js/index.ts",".././src/js/api/default-extractors/registerDefaultDataExtractors.ts",".././src/js/api/default-extractors/TypeScriptDataExtractors.ts",".././src/js/api/default-extractors/AsIsDataExtractor.ts",".././src/js/api/default-extractors/GetDebugVisualizationDataExtractor.ts",".././src/js/api/default-extractors/ToStringExtractor.ts",".././src/js/api/default-extractors/PlotlyDataExtractor.ts",".././src/js/api/default-extractors/ObjectGraphExtractor.ts",".././src/js/helpers/createGraphFromPointers.ts",".././src/js/helpers/tryEval.ts",".././src/js/helpers/markedGrid.ts",".././src/js/helpers/cache.ts",".././src/js/helpers/asData.ts",".././src/js/helpers/find.ts",".././src/js/api/default-extractors/GridExtractor.ts",".././src/js/api/default-extractors/TableExtractor.ts",".././src/js/api/default-extractors/StringDiffExtractor.ts",".././src/js/api/default-extractors/StringRangeExtractor.ts",".././src/js/api/default-extractors/MarkedGridExtractor.ts",".././src/js/global-helpers.ts",".././src/getGlobal.ts","../external \"fs\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","data","DataExtractorApiImpl","readFileSync","__filename","encoding","selfContainedGetInitializedDataExtractorApi","toString","apiKey","api","window","global","Error","installHelpers","getGlobal","helpers","globalHelpers","globalObj","ApiHasNotBeenInitializedCode","extractors","Map","extractorSources","JSON","stringify","extractor","this","set","id","e","registerExtractor","valueFn","evalFn","preferredDataExtractorId","variablesInScope","extractions","Array","extractionCollector","extraction","push","context","lastContext","fn","values","getExtractions","undefined","sort","a","b","priority","usedExtraction","toJson","kind","preferred","find","mapExtractor","extractData","extractionResult","usedExtractor","availableExtractors","map","preferExisting","registerDefaultExtractors","delete","val","obj","every","roots","infoSelector","options","graph","nodes","edges","idCounter","ids","getId","item","_id","queue","dist","processed","Set","length","shift","has","add","nodeInfo","fromId","other","toId","fromId_","to","from","include","shouldPush","maxSize","size","getDataExtractorApi","TypeScriptAstDataExtractor","AsIsDataExtractor","GetVisualizationDataExtractor","ToStringDataExtractor","PlotlyDataExtractor","ObjectGraphExtractor","GridExtractor","TableDataExtractor","StringDiffExtractor","StringRangeExtractor","MarkedGridFromArrayExtractor","collector","tsApi","typescript","require","helper","Helper","marked","rootSourceFile","rootNode","isArray","isNode","getSourceFile","entries","finalRootSourceFile","addExtraction","expect","text","tree","ast","root","toTreeNode","fileName","node","isToken","parent","propertyName","startsWith","member","index","indexOf","result","forEachChild","memberName","segmentName","emphasizedValueFn","SyntaxKind","children","getChildren","childNode","idx","parentPropertyName","getPropertyNameInParent","SyntaxList","filter","isIdentifier","escapedText","isLiteralExpression","items","emphasis","emphasizedVal","segment","span","end","pos","start","isMarked","isSourceFile","isVisualizationData","getVisualizationData","apply","some","x","plotly","y","isObject","label","className","constructor","toStrVal","substr","shape","color","createGraph","v","createGraphFromPointers","marker","arr","grid","rows","columns","content","tag","markers","row","column","cached","expression","resultFn","expr","predicate","top","table","type","otherText","decorations1","decorations2","offsetToLineColumn","offset","line","slice","range","asData","decorations","tryEval","markedGrid","globalThis"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 8);\n","export * from \"./createGraph\";\nexport * from \"./createGraphFromPointers\";\nexport * from \"./tryEval\";\nexport * from \"./markedGrid\";\nexport * from \"./cache\";\nexport * from \"./asData\";\nexport * from \"./find\";\n","export function expect<T>(data: T): T {\n\treturn data;\n}\n","export * from \"./DataExtractorApi\";\nexport * from \"./injection\";\nexport { DataExtractorApiImpl } from \"./DataExtractorApiImpl\";\nexport * from \"./LoadDataExtractorsFn\";\n","import * as fs from \"fs\";\nimport { DataExtractorApi } from \"./DataExtractorApi\";\nimport { DataExtractorApiImpl } from \"./DataExtractorApiImpl\";\nimport * as helpers from \"../helpers\";\nimport * as globalHelpers from \"../global-helpers\";\nimport { getGlobal } from \"../../getGlobal\";\n\n/**\n * Returns standalone JS code representing an expression that initializes the data extraction API.\n * This expression returns nothing.\n * This function is called in the VS Code extension, the expression is evaluated in the debugee.\n */\nexport function getExpressionToInitializeDataExtractorApi(): string {\n\tconst _fs = require(\"fs\") as typeof fs;\n\tconst moduleSrc = _fs.readFileSync(__filename, { encoding: \"utf8\" });\n\treturn `((function () {\n\t\tlet module = {};\n\t\t${moduleSrc}\n\t\treturn module.exports.getDataExtractorApi();\n\t})())`;\n}\n\n/**\n * Returns standalone JS code representing an expression that returns the data extraction API.\n * This expression returns an object of type `DataExtractorApi`.\n * This function is called in the VS Code extension, the expression is evaluated in the debugee.\n */\nexport function getExpressionForDataExtractorApi(): string {\n\treturn `((${selfContainedGetInitializedDataExtractorApi.toString()})())`;\n}\n\nconst apiKey = \"@hediet/data-extractor-api/v3\";\n\nexport function getDataExtractorApi(): DataExtractorApi {\n\tinstallHelpers();\n\tconst globalObj = getGlobal();\n\tif (!globalObj[apiKey]) {\n\t\tglobalObj[apiKey] = new DataExtractorApiImpl();\n\t}\n\treturn globalObj[apiKey];\n}\n\n/**\n * This code is used to detect if the API has not been initialized yet.\n * @internal\n */\n export const ApiHasNotBeenInitializedCode = \"EgH0cybXij1jYUozyakO\" as const;\n\n /**\n  * @internal\n  */\n function selfContainedGetInitializedDataExtractorApi(): DataExtractorApi {\n\t const globalObj =\n\t\t typeof window === \"object\" ? (window as any) : (global as any);\n\t const key: typeof apiKey = \"@hediet/data-extractor-api/v3\";\n\t let api: DataExtractorApi | undefined = globalObj[key];\n\t if (!api) {\n\t\t const code: typeof ApiHasNotBeenInitializedCode =\n\t\t\t \"EgH0cybXij1jYUozyakO\";\n\t\t throw new Error(\n\t\t\t `Data Extractor API has not been initialized. Code: ${code}`\n\t\t );\n\t }\n\t return api;\n }\n\nexport function installHelpers(): void {\n\tconst globalObj = getGlobal();\n\t// `hediet` as prefix to avoid name collision (I own `hediet.de`).\n\tglobalObj[\"hedietDbgVis\"] = { ...helpers, ...globalHelpers };\n}\n","import {\r\n\tDataExtractorApi,\r\n\tDataResult,\r\n\tJSONString,\r\n\tDataExtractor,\r\n\tDataExtraction,\r\n\tExtractionCollector,\r\n\tDataExtractorContext,\r\n} from \"./DataExtractorApi\";\r\nimport { DataExtractorInfo } from \"../../DataExtractionResult\";\r\nimport { registerDefaultExtractors } from \"./default-extractors\";\r\nimport { LoadDataExtractorsFn } from \"./LoadDataExtractorsFn\";\r\nimport * as helpers from \"../helpers\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class DataExtractorApiImpl implements DataExtractorApi {\r\n\tpublic static lastContext: DataExtractorContext | undefined = undefined;\r\n\r\n\tprivate readonly extractors = new Map<string, DataExtractor>();\r\n\tprivate readonly extractorSources = new Map<string, LoadDataExtractorsFn>();\r\n\r\n\tprivate toJson<TData>(data: TData): JSONString<TData> {\r\n\t\treturn JSON.stringify(data) as any;\r\n\t}\r\n\r\n\tpublic registerExtractor(extractor: DataExtractor): void {\r\n\t\tthis.extractors.set(extractor.id, extractor);\r\n\t}\r\n\r\n\tpublic registerExtractors(extractors: DataExtractor[]): void {\r\n\t\tfor (const e of extractors) {\r\n\t\t\tthis.registerExtractor(e);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getData(\r\n\t\tvalueFn: () => unknown,\r\n\t\tevalFn: <T>(expression: string) => T,\r\n\t\tpreferredDataExtractorId: string | undefined,\r\n\t\tvariablesInScope: Record<string, () => unknown>\r\n\t): JSONString<DataResult> {\r\n\t\tconst extractions = new Array<DataExtraction>();\r\n\t\tconst extractionCollector: ExtractionCollector = {\r\n\t\t\taddExtraction(extraction) {\r\n\t\t\t\textractions.push(extraction);\r\n\t\t\t},\r\n\t\t};\r\n\r\n\t\tconst context: DataExtractorContext = {\r\n\t\t\tevalFn,\r\n\t\t\tvariablesInScope,\r\n\t\t};\r\n\r\n\t\tDataExtractorApiImpl.lastContext = context;\r\n\t\tconst value = valueFn();\r\n\r\n\t\tconst extractors = new Array<DataExtractor>();\r\n\r\n\t\tfor (const fn of this.extractorSources.values()) {\r\n\t\t\tfn((extractor) => {\r\n\t\t\t\textractors.push(extractor);\r\n\t\t\t}, helpers);\r\n\t\t}\r\n\r\n\t\tfor (const e of [...this.extractors.values(), ...extractors]) {\r\n\t\t\te.getExtractions(value, extractionCollector, context);\r\n\t\t}\r\n\r\n\t\tDataExtractorApiImpl.lastContext = undefined;\r\n\r\n\t\textractions.sort((a, b) => b.priority - a.priority);\r\n\t\tlet usedExtraction = extractions[0];\r\n\t\tif (!usedExtraction) {\r\n\t\t\treturn this.toJson({ kind: \"NoExtractors\" } as DataResult);\r\n\t\t}\r\n\r\n\t\tif (preferredDataExtractorId) {\r\n\t\t\tconst preferred = extractions.find(\r\n\t\t\t\t(e) => e.id === preferredDataExtractorId\r\n\t\t\t);\r\n\t\t\tif (preferred) {\r\n\t\t\t\tusedExtraction = preferred;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction mapExtractor(e: DataExtraction): DataExtractorInfo {\r\n\t\t\treturn {\r\n\t\t\t\tid: e.id as any,\r\n\t\t\t\tname: e.name,\r\n\t\t\t\tpriority: e.priority,\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tconst data = usedExtraction.extractData();\r\n\t\treturn this.toJson({\r\n\t\t\tkind: \"Data\",\r\n\t\t\textractionResult: {\r\n\t\t\t\tdata,\r\n\t\t\t\tusedExtractor: mapExtractor(usedExtraction),\r\n\t\t\t\tavailableExtractors: extractions.map(mapExtractor),\r\n\t\t\t},\r\n\t\t} as DataResult);\r\n\t}\r\n\r\n\tpublic registerDefaultExtractors(preferExisting: boolean = false): void {\r\n\t\t// TODO consider preferExisting\r\n\t\tregisterDefaultExtractors(this);\r\n\t}\r\n\r\n\tpublic setDataExtractorFn(\r\n\t\tid: string,\r\n\t\tfn: LoadDataExtractorsFn | undefined\r\n\t): void {\r\n\t\tif (fn) {\r\n\t\t\tthis.extractorSources.set(id, fn);\r\n\t\t} else {\r\n\t\t\tthis.extractorSources.delete(id);\r\n\t\t}\r\n\t}\r\n}\r\n","export { registerDefaultExtractors } from \"./registerDefaultDataExtractors\";\n","export interface DataExtractionResult {\n\tdata: VisualizationData;\n\tusedExtractor: DataExtractorInfo;\n\tavailableExtractors: DataExtractorInfo[];\n}\n\n/**\n * Instances must be valid json values.\n */\nexport interface VisualizationData {\n\tkind: Record<string, true>;\n}\n\nexport interface DataExtractorInfo {\n\tid: DataExtractorId;\n\tname: string;\n\tpriority: number;\n}\n\nexport type DataExtractorId = {\n\t__brand: \"DataExtractorId\";\n} & string;\n\nexport function isVisualizationData(val: unknown): val is VisualizationData {\n\tif (typeof val !== \"object\" || !val || !(\"kind\" in val)) {\n\t\treturn false;\n\t}\n\n\tconst obj = val as any;\n\tif (typeof obj.kind !== \"object\" || !obj.kind) {\n\t\treturn false;\n\t}\n\n\treturn Object.values(obj.kind).every(val => val === true);\n}\n","import {\n\tGraphEdge,\n\tGraphNode,\n\tGraphVisualizationData,\n} from \"../../CommonDataTypes\";\n\nexport type CreateGraphEdge<T> = ({ to: T } | { from: T } | { include: T }) &\n\tOmit<GraphEdge, \"from\" | \"to\">;\n\n/**\n * Given a list of roots, it creates a graph by following their edges recursively.\n * Tracks cycles.\n */\nexport function createGraph<T>(\n\troots: T[],\n\tinfoSelector: (\n\t\titem: T\n\t) => {\n\t\tid?: string | number;\n\t\tedges: CreateGraphEdge<T>[];\n\t} & Omit<GraphNode, \"id\">,\n\toptions: { maxSize?: number } = {}\n): GraphVisualizationData {\n\tconst r: GraphVisualizationData = {\n\t\tkind: {\n\t\t\tgraph: true,\n\t\t},\n\t\tnodes: [],\n\t\tedges: [],\n\t};\n\tlet idCounter = 1;\n\tconst ids = new Map<T, string>();\n\tfunction getId(item: T): string {\n\t\tconst _id = infoSelector(item).id;\n\t\tif (_id !== undefined) {\n\t\t\treturn \"\" + _id;\n\t\t}\n\n\t\tlet id = ids.get(item);\n\t\tif (!id) {\n\t\t\tid = `hediet.de/id-${idCounter++}`;\n\t\t\tids.set(item, id);\n\t\t}\n\t\treturn id;\n\t}\n\n\tconst queue = new Array<{ item: T; dist: number }>(\n\t\t...roots.map(r => ({ item: r, dist: 0 }))\n\t);\n\tconst processed = new Set<T>();\n\n\twhile (queue.length > 0) {\n\t\tconst { item, dist } = queue.shift()!;\n\t\tif (processed.has(item)) {\n\t\t\tcontinue;\n\t\t}\n\t\tprocessed.add(item);\n\t\tconst nodeInfo = infoSelector(item);\n\t\tconst fromId = getId(item);\n\t\tr.nodes.push({ ...nodeInfo, id: fromId, [\"edges\" as any]: undefined });\n\t\tfor (const e of nodeInfo.edges) {\n\t\t\tlet other: T;\n\t\t\tlet toId: string | undefined;\n\t\t\tlet fromId_: string | undefined;\n\t\t\tif (\"to\" in e) {\n\t\t\t\tother = e.to;\n\t\t\t\ttoId = getId(e.to);\n\t\t\t\tfromId_ = fromId;\n\t\t\t} else if (\"from\" in e) {\n\t\t\t\tother = e.from;\n\t\t\t\ttoId = getId(e.from);\n\t\t\t\tfromId_ = fromId;\n\t\t\t} else if (\"include\" in e) {\n\t\t\t\tother = e.include;\n\t\t\t} else {\n\t\t\t\tthrow new Error(\"Every edge must either have 'to' or 'from'\");\n\t\t\t}\n\n\t\t\tif (fromId_ !== undefined && toId !== undefined) {\n\t\t\t\tr.edges.push({\n\t\t\t\t\t...e,\n\t\t\t\t\tfrom: fromId_,\n\t\t\t\t\tto: toId,\n\t\t\t\t});\n\t\t\t}\n\t\t\tlet shouldPush = !processed.has(other);\n\t\t\tif (\n\t\t\t\toptions.maxSize &&\n\t\t\t\tprocessed.size + queue.length > options.maxSize\n\t\t\t) {\n\t\t\t\tshouldPush = false;\n\t\t\t}\n\t\t\tif (shouldPush) {\n\t\t\t\tqueue.push({ item: other, dist: dist + 1 });\n\t\t\t}\n\t\t}\n\t}\n\treturn r;\n}\n","export * from \"./js\";\nexport * from \"./CommonDataTypes\";\nexport * from \"./DataExtractionResult\";\n","export * from \"./api\";\nexport * from \"./helpers\";\nexport { registerDefaultExtractors } from \"./api/default-extractors\";\n","import { DataExtractorApi } from \"../DataExtractorApi\";\nimport { TypeScriptAstDataExtractor } from \"./TypeScriptDataExtractors\";\nimport { AsIsDataExtractor } from \"./AsIsDataExtractor\";\nimport { GetVisualizationDataExtractor } from \"./GetDebugVisualizationDataExtractor\";\nimport { ToStringDataExtractor } from \"./ToStringExtractor\";\nimport { PlotlyDataExtractor } from \"./PlotlyDataExtractor\";\nimport { ObjectGraphExtractor } from \"./ObjectGraphExtractor\";\nimport { getDataExtractorApi } from \"../injection\";\nimport { GridExtractor } from \"./GridExtractor\";\nimport { TableDataExtractor } from \"./TableExtractor\";\nimport { StringDiffExtractor } from \"./StringDiffExtractor\";\nimport { StringRangeExtractor } from \"./StringRangeExtractor\";\nimport { MarkedGridFromArrayExtractor } from \"./MarkedGridExtractor\";\n\n/**\n * The default data extractors should be registered by VS Code automatically.\n * Registering them manually ensures that they are up to date.\n */\nexport function registerDefaultExtractors(\n\tapi: DataExtractorApi = getDataExtractorApi()\n) {\n\tfor (const item of [\n\t\tnew TypeScriptAstDataExtractor(),\n\t\tnew AsIsDataExtractor(),\n\t\tnew GetVisualizationDataExtractor(),\n\t\tnew ToStringDataExtractor(),\n\t\tnew PlotlyDataExtractor(),\n\t\tnew ObjectGraphExtractor(),\n\t\tnew GridExtractor(),\n\t\tnew TableDataExtractor(),\n\t\tnew StringDiffExtractor(),\n\t\tnew StringRangeExtractor(),\n\t\tnew MarkedGridFromArrayExtractor(),\n\t]) {\n\t\tapi.registerExtractor(item);\n\t}\n}\n","import * as ts from \"typescript\"; // Only compile-time import!\nimport { AstTreeNode } from \"../../..\";\nimport { AstTreeVisualizationData } from \"../../../CommonDataTypes\";\nimport { expect } from \"../../../util\";\nimport {\n\tDataExtractor,\n\tExtractionCollector,\n\tDataExtractorContext,\n} from \"../DataExtractorApi\";\n\nexport class TypeScriptAstDataExtractor implements DataExtractor {\n\treadonly id = \"typescript-ast\";\n\n\tgetExtractions(\n\t\tdata: unknown,\n\t\tcollector: ExtractionCollector,\n\t\t{ evalFn }: DataExtractorContext\n\t): void {\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\n\t\tfunction getApi(): typeof ts {\n\t\t\tif (typeof data === \"object\" && \"typescript\" in (data as object)) {\n\t\t\t\treturn (data as any).typescript;\n\t\t\t} else {\n\t\t\t\t// This might refer to global.require which uses CWD for resolution!\n\t\t\t\tconst require = evalFn<(request: string) => unknown>(\"require\");\n\t\t\t\treturn require(\"typescript\") as typeof ts;\n\t\t\t}\n\t\t}\n\n\t\tlet tsApi: typeof ts;\n\t\ttry {\n\t\t\ttsApi = getApi();\n\t\t\tif (!tsApi) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst helper = new Helper(tsApi);\n\n\t\tlet rootSourceFile: ts.SourceFile | undefined = undefined;\n\t\tlet rootNode: ts.Node | undefined = undefined;\n\t\tlet marked: Set<ts.Node>;\n\t\tlet fn: (n: ts.Node) => string | undefined = (n: ts.Node) => undefined;\n\t\tif (\n\t\t\tArray.isArray(data) &&\n\t\t\tdata.every(helper.isNode) &&\n\t\t\tdata.length > 0\n\t\t) {\n\t\t\trootSourceFile = helper.getSourceFile(data[0] as ts.Node);\n\t\t\tmarked = new Set(data);\n\t\t} else if (helper.isNode(data)) {\n\t\t\trootSourceFile = helper.getSourceFile(data);\n\t\t\tmarked = new Set([data]);\n\t\t} else if (typeof data === \"object\" && data) {\n\t\t\tmarked = new Set();\n\t\t\tconst map = new Map<ts.Node, string>();\n\t\t\tfn = (n: ts.Node) => map.get(n);\n\t\t\tfor (const [key, item] of Object.entries(data)) {\n\t\t\t\tif (key === \"fn\") {\n\t\t\t\t\tfn = item;\n\t\t\t\t} else if (key === \"typescript\") {\n\t\t\t\t} else {\n\t\t\t\t\tif (key === \"rootNode\") {\n\t\t\t\t\t\trootNode = item;\n\t\t\t\t\t}\n\t\t\t\t\tlet nodes: Array<ts.Node>;\n\t\t\t\t\tif (helper.isNode(item)) {\n\t\t\t\t\t\tnodes = [item];\n\t\t\t\t\t} else if (\n\t\t\t\t\t\tArray.isArray(item) &&\n\t\t\t\t\t\titem.every(helper.isNode)\n\t\t\t\t\t) {\n\t\t\t\t\t\tnodes = item;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (nodes.length > 0 && !rootSourceFile) {\n\t\t\t\t\t\trootSourceFile = helper.getSourceFile(nodes[0]);\n\t\t\t\t\t}\n\t\t\t\t\tfor (const n of nodes) {\n\t\t\t\t\t\tmarked.add(n);\n\t\t\t\t\t\tmap.set(n, key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!rootSourceFile) {\n\t\t\treturn;\n\t\t}\n\t\tconst finalRootSourceFile = rootSourceFile;\n\n\t\tcollector.addExtraction({\n\t\t\tid: \"ts-ast\",\n\t\t\tname: \"TypeScript AST\",\n\t\t\tpriority: 1000,\n\t\t\textractData() {\n\t\t\t\treturn expect<AstTreeVisualizationData>({\n\t\t\t\t\tkind: { text: true, tree: true, ast: true },\n\t\t\t\t\troot: helper.toTreeNode(\n\t\t\t\t\t\trootNode || finalRootSourceFile,\n\t\t\t\t\t\t\"root\",\n\t\t\t\t\t\t\"\",\n\t\t\t\t\t\tmarked,\n\t\t\t\t\t\tfn\n\t\t\t\t\t),\n\t\t\t\t\ttext: finalRootSourceFile.text,\n\t\t\t\t\tfileName: \"index.ts\",\n\t\t\t\t});\n\t\t\t},\n\t\t});\n\t}\n}\n\nclass Helper {\n\tconstructor(private readonly tsApi: typeof ts) {}\n\n\tgetPropertyNameInParent(value: any, parent: any): string | undefined {\n\t\tfor (const propertyName in parent) {\n\t\t\tif (propertyName.startsWith(\"_\")) continue;\n\n\t\t\tconst member = parent[propertyName];\n\t\t\tif (member === value) {\n\t\t\t\treturn propertyName;\n\t\t\t}\n\n\t\t\tif (Array.isArray(member)) {\n\t\t\t\tconst index = member.indexOf(value);\n\t\t\t\tif (index !== -1) {\n\t\t\t\t\treturn `${propertyName}[${index}]`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tgetChildren(node: ts.Node): ts.Node[] {\n\t\tconst result = new Array<ts.Node>();\n\t\tthis.tsApi.forEachChild(node, n => {\n\t\t\tresult.push(n);\n\t\t});\n\t\treturn result;\n\t}\n\n\ttoTreeNode(\n\t\tnode: ts.Node,\n\t\tmemberName: string,\n\t\tsegmentName: string,\n\t\tmarked: Set<ts.Node>,\n\t\temphasizedValueFn: (node: ts.Node) => string | undefined\n\t): AstTreeNode {\n\t\tconst name = this.tsApi.SyntaxKind[node.kind];\n\t\tconst children = this.getChildren(node)\n\t\t\t.map((childNode, idx) => {\n\t\t\t\tlet parentPropertyName =\n\t\t\t\t\tthis.getPropertyNameInParent(childNode, node) || \"\";\n\n\t\t\t\tif (childNode.kind == this.tsApi.SyntaxKind.SyntaxList) {\n\t\t\t\t\tconst children = this.getChildren(childNode);\n\t\t\t\t\tfor (const c of children) {\n\t\t\t\t\t\tconst name =\n\t\t\t\t\t\t\tthis.getPropertyNameInParent(c, node) || \"\";\n\t\t\t\t\t\tif (name) {\n\t\t\t\t\t\t\tparentPropertyName = name;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tlet segmentName = \".\" + parentPropertyName;\n\t\t\t\tif (node.kind == this.tsApi.SyntaxKind.SyntaxList) {\n\t\t\t\t\tparentPropertyName = \"\" + idx;\n\t\t\t\t\tsegmentName = `[${idx}]`;\n\t\t\t\t}\n\n\t\t\t\treturn this.toTreeNode(\n\t\t\t\t\tchildNode,\n\t\t\t\t\tparentPropertyName,\n\t\t\t\t\tsegmentName,\n\t\t\t\t\tmarked,\n\t\t\t\t\temphasizedValueFn\n\t\t\t\t);\n\t\t\t})\n\t\t\t.filter(c => c !== null);\n\n\t\tlet value: string | undefined = undefined;\n\n\t\tif (this.tsApi.isIdentifier(node)) {\n\t\t\tvalue = node.text || (node.escapedText as string);\n\t\t} else if (this.tsApi.isLiteralExpression(node)) {\n\t\t\tvalue = node.text;\n\t\t}\n\n\t\tconst items: AstTreeNode[\"items\"] = [\n\t\t\t{ text: `${memberName}: `, emphasis: \"style1\" },\n\t\t\t{ text: name },\n\t\t];\n\n\t\tconst emphasizedVal = emphasizedValueFn(node);\n\t\tif (value) {\n\t\t\titems.push({ text: value, emphasis: \"style2\" });\n\t\t}\n\t\tif (emphasizedVal) {\n\t\t\titems.push({ text: emphasizedVal, emphasis: \"style3\" });\n\t\t}\n\n\t\treturn {\n\t\t\titems,\n\t\t\tchildren: children,\n\t\t\tsegment: segmentName,\n\t\t\tspan: {\n\t\t\t\tlength: node.end - node.pos,\n\t\t\t\tstart: node.pos,\n\t\t\t},\n\t\t\tisMarked: marked.has(node),\n\t\t};\n\t}\n\n\tisNode = (node: unknown): node is ts.Node => {\n\t\treturn (\n\t\t\ttypeof node === \"object\" &&\n\t\t\tnode !== null &&\n\t\t\t(this.tsApi.isToken(node as any) ||\n\t\t\t\t(this.tsApi as any).isNode(node))\n\t\t);\n\t};\n\n\tgetSourceFile(node: ts.Node | any): ts.SourceFile {\n\t\tif (!node) {\n\t\t\tthrow new Error(\"Detached node\");\n\t\t}\n\t\tif (this.tsApi.isSourceFile(node)) {\n\t\t\treturn node;\n\t\t}\n\t\tif (!(\"getSourceFile\" in node)) {\n\t\t\treturn this.getSourceFile(node.parent);\n\t\t}\n\t\treturn node.getSourceFile();\n\t}\n}\n","import { isVisualizationData } from \"../../../DataExtractionResult\";\nimport {\n\tDataExtractor,\n\tExtractionCollector,\n\tDataExtractorContext,\n} from \"../..\";\n\nexport class AsIsDataExtractor implements DataExtractor {\n\treadonly id = \"as-is\";\n\tgetExtractions(\n\t\tdata: unknown,\n\t\textractionCollector: ExtractionCollector,\n\t\tcontext: DataExtractorContext\n\t): void {\n\t\tif (!isVisualizationData(data)) {\n\t\t\treturn;\n\t\t}\n\n\t\textractionCollector.addExtraction({\n\t\t\tid: this.id,\n\t\t\tname: \"As Is\",\n\t\t\tpriority: 500,\n\t\t\textractData() {\n\t\t\t\treturn data;\n\t\t\t},\n\t\t});\n\t}\n}\n","import { VisualizationData } from \"../../../DataExtractionResult\";\nimport {\n\tDataExtractor,\n\tExtractionCollector,\n\tDataExtractorContext,\n} from \"../DataExtractorApi\";\n\nexport class GetVisualizationDataExtractor implements DataExtractor {\n\treadonly id = \"get-visualization-data\";\n\tgetExtractions(\n\t\tdata: unknown,\n\t\tcollector: ExtractionCollector,\n\t\tcontext: DataExtractorContext\n\t): void {\n\t\tif (typeof data !== \"object\" || !data) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst getVisualizationData = (data as any)\n\t\t\t.getVisualizationData as Function;\n\t\tif (typeof getVisualizationData !== \"function\") {\n\t\t\treturn;\n\t\t}\n\n\t\tcollector.addExtraction({\n\t\t\tid: this.id,\n\t\t\tname: \"Use Method 'getVisualizationData'\",\n\t\t\tpriority: 600,\n\t\t\textractData() {\n\t\t\t\treturn getVisualizationData.apply(data);\n\t\t\t},\n\t\t});\n\t}\n}\n","import { MonacoTextVisualizationData } from \"../../../CommonDataTypes\";\nimport { expect } from \"../../../util\";\nimport {\n\tDataExtractor,\n\tExtractionCollector,\n\tDataExtractorContext,\n} from \"../DataExtractorApi\";\n\nexport class ToStringDataExtractor implements DataExtractor {\n\treadonly id = \"to-string\";\n\n\tgetExtractions(\n\t\tdata: unknown,\n\t\tcollector: ExtractionCollector,\n\t\tcontext: DataExtractorContext\n\t): void {\n\t\tcollector.addExtraction({\n\t\t\tid: \"to-string\",\n\t\t\tname: \"To String\",\n\t\t\tpriority: 100,\n\t\t\textractData() {\n\t\t\t\treturn expect<MonacoTextVisualizationData>({\n\t\t\t\t\tkind: {\n\t\t\t\t\t\ttext: true,\n\t\t\t\t\t},\n\t\t\t\t\ttext: \"\" + data,\n\t\t\t\t});\n\t\t\t},\n\t\t});\n\t}\n}\n","import { PlotlyVisualizationData } from \"../../../CommonDataTypes\";\nimport { expect } from \"../../../util\";\nimport {\n\tDataExtractor,\n\tExtractionCollector,\n\tDataExtractorContext,\n} from \"../DataExtractorApi\";\n\nexport class PlotlyDataExtractor implements DataExtractor {\n\treadonly id = \"plot\";\n\n\tgetExtractions(\n\t\tdata: unknown,\n\t\tcollector: ExtractionCollector,\n\t\tcontext: DataExtractorContext\n\t): void {\n\t\tif (!Array.isArray(data)) {\n\t\t\treturn;\n\t\t}\n\t\tif (data.some(x => typeof x !== \"number\")) {\n\t\t\treturn;\n\t\t}\n\n\t\tcollector.addExtraction({\n\t\t\tid: \"plot-y\",\n\t\t\tname: \"Plot as y-Values\",\n\t\t\tpriority: 1001,\n\t\t\textractData: () =>\n\t\t\t\texpect<PlotlyVisualizationData>({\n\t\t\t\t\tkind: {\n\t\t\t\t\t\tplotly: true,\n\t\t\t\t\t},\n\t\t\t\t\tdata: [{ y: data }],\n\t\t\t\t}),\n\t\t});\n\t}\n}\n","import { VisualizationData } from \"../../../DataExtractionResult\";\nimport {\n\tDataExtractor,\n\tExtractionCollector,\n\tDataExtractorContext,\n} from \"../DataExtractorApi\";\nimport {\n\tcreateGraph,\n\tCreateGraphEdge,\n\tcreateGraphFromPointers,\n} from \"../../helpers\";\nimport { GraphNode } from \"../../..\";\n\nexport class ObjectGraphExtractor implements DataExtractor {\n\treadonly id = \"object-graph\";\n\n\tgetExtractions(\n\t\tdata: unknown,\n\t\tcollector: ExtractionCollector,\n\t\tcontext: DataExtractorContext\n\t): void {\n\t\tfunction isObject(val: unknown): val is object {\n\t\t\tif (typeof val !== \"object\") {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (!val) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\tif (!isObject(data)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst infoSelector: (item: object) => {\n\t\t\tid?: string | number;\n\t\t\tedges: CreateGraphEdge<object>[];\n\t\t} & Omit<GraphNode, \"id\"> = (item) => {\n\t\t\tlet label = \"\";\n\t\t\tconst edges = new Array<CreateGraphEdge<any>>();\n\t\t\tif (item instanceof Set) {\n\t\t\t\tlabel = \"Set\";\n\t\t\t\tfor (const value of item.values()) {\n\t\t\t\t\tif (isObject(value)) {\n\t\t\t\t\t\tedges.push({ label: \"item\", to: value });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (item instanceof Map) {\n\t\t\t\tlabel = \"Map\";\n\t\t\t\tfor (const [key, value] of item.entries()) {\n\t\t\t\t\tif (isObject(value)) {\n\t\t\t\t\t\tedges.push({ label: key, to: value });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor (const [key, val] of Object.entries(item)) {\n\t\t\t\t\tif (isObject(val)) {\n\t\t\t\t\t\tedges.push({ label: key, to: val });\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst className = item.constructor\n\t\t\t\t\t? item.constructor.name\n\t\t\t\t\t: \"?\";\n\t\t\t\tlabel = className;\n\t\t\t\tif (!Array.isArray(item)) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tlet toStrVal = item.toString();\n\t\t\t\t\t\tif (toStrVal !== \"[object Object]\") {\n\t\t\t\t\t\t\tif (toStrVal.length > 15) {\n\t\t\t\t\t\t\t\ttoStrVal += ` \"${toStrVal.substr(0, 15)}...\"`;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tlabel += `${className}: ${toStrVal}`;\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (e) {}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tshape: \"box\",\n\t\t\t\tedges,\n\t\t\t\tcolor: item === data ? \"lightblue\" : undefined,\n\t\t\t\tlabel,\n\t\t\t};\n\t\t};\n\n\t\tcollector.addExtraction({\n\t\t\tid: \"object-graph\",\n\t\t\tname: \"Object Graph\",\n\t\t\tpriority: 98,\n\t\t\textractData() {\n\t\t\t\treturn createGraph([data], infoSelector, { maxSize: 50 });\n\t\t\t},\n\t\t});\n\n\t\tif (\n\t\t\tdata.constructor === Object &&\n\t\t\tObject.values(data).every(\n\t\t\t\t(v) => v === undefined || v === null || typeof v === \"object\"\n\t\t\t)\n\t\t) {\n\t\t\tcollector.addExtraction({\n\t\t\t\tid: \"object-graph-pointers\",\n\t\t\t\tname: \"Object Graph With Pointers\",\n\t\t\t\tpriority: 99,\n\t\t\t\textractData() {\n\t\t\t\t\treturn createGraphFromPointers(data as any, infoSelector, {\n\t\t\t\t\t\tmaxSize: 50,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t}\n}\n","import { GraphNode, GraphVisualizationData } from \"../../CommonDataTypes\";\nimport { CreateGraphEdge, createGraph } from \"./createGraph\";\n\n/**\n * Given a labeled list of roots, it creates a graph by following their edges recursively.\n * Tracks cycles.\n */\nexport function createGraphFromPointers<T>(\n\troots: Record<string, T | undefined | null>,\n\tinfoSelector: (item: T) => {\n\t\tid?: string | number;\n\t\tedges: CreateGraphEdge<T>[];\n\t} & Omit<GraphNode, \"id\">,\n\toptions: { maxSize?: number } = {}\n): GraphVisualizationData {\n\tconst marker = {};\n\n\tinterface Pointer {\n\t\tmarker: {};\n\t\tname: string;\n\t\tvalue: T | null | undefined;\n\t}\n\n\tconst items = Object.entries(roots).map<Pointer>(([name, value]) => ({\n\t\tmarker,\n\t\tname,\n\t\tvalue,\n\t}));\n\n\treturn createGraph<T | Pointer>(\n\t\titems,\n\t\t(item) => {\n\t\t\tif (\"marker\" in item && item[\"marker\"] === marker) {\n\t\t\t\treturn {\n\t\t\t\t\tid: \"label____\" + item.name,\n\t\t\t\t\tcolor: \"orange\",\n\t\t\t\t\tlabel: item.name,\n\t\t\t\t\tedges: [\n\t\t\t\t\t\t{ to: item.value!, color: \"orange\", label: \"\" },\n\t\t\t\t\t].filter((t) => !!t.to),\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\treturn infoSelector(item as T);\n\t\t\t}\n\t\t},\n\t\toptions\n\t);\n}\n","import { DataExtractorApiImpl } from \"../api/DataExtractorApiImpl\";\n\n/**\n * Takes an object and eval's its values.\n * Each successfully evaluated value is added to the result object,\n * its original key is used as key in the result object.\n *\n * # Example\n * ```\n * const x = 1;\n * tryEval({ val1: \"x\", val2: \"x y\" })\n * // -> { val1: 1 }\n * ```\n */\nexport function tryEval(obj: Record<string, string>): Record<string, unknown>;\n/**\n * Takes an array of strings and eval's its items.\n * Each successfully evaluated value is added to the result object,\n * its original value is used as key.\n *\n * # Example\n * ```\n * const x = 1;\n * tryEval([\"x\", \"y\", \"a a\", \"x + 2\"])\n * // -> { x: 1, \"x + 2\": 3 }\n * ```\n */\nexport function tryEval(arr: string[]): Record<string, unknown>;\nexport function tryEval(\n\tobj: Record<string, string> | string[] | string\n): Record<string, unknown> | unknown {\n\tconst result: Record<string, unknown> = {};\n\tconst context = DataExtractorApiImpl.lastContext!;\n\tif (Array.isArray(obj)) {\n\t\tfor (const val of obj) {\n\t\t\ttry {\n\t\t\t\tresult[val] = context.evalFn(val);\n\t\t\t} catch (e) {}\n\t\t}\n\t} else {\n\t\tfor (const [key, val] of Object.entries(obj)) {\n\t\t\ttry {\n\t\t\t\tresult[key] = context.evalFn(val);\n\t\t\t} catch (e) {}\n\t\t}\n\t}\n\treturn result;\n}\n","import { GridVisualizationData } from \"../../CommonDataTypes\";\n\nexport function markedGrid(\n\tarr: unknown[],\n\tmarked: Record<string, number | undefined>\n): GridVisualizationData {\n\tif (!Array.isArray(arr)) {\n\t\tarr = [...(arr as any)];\n\t}\n\n\treturn {\n\t\tkind: { grid: true },\n\t\trows: [\n\t\t\t{\n\t\t\t\tcolumns: arr.map((d) => ({\n\t\t\t\t\tcontent: \"\" + d,\n\t\t\t\t\ttag: \"\" + d,\n\t\t\t\t})),\n\t\t\t},\n\t\t],\n\t\tmarkers: marked\n\t\t\t? Object.entries(marked)\n\t\t\t\t\t.map(([key, val]) => ({\n\t\t\t\t\t\tid: \"\" + key,\n\t\t\t\t\t\trow: 0,\n\t\t\t\t\t\tcolumn: val!,\n\t\t\t\t\t}))\n\t\t\t\t\t.filter((c) => c.column !== undefined)\n\t\t\t: undefined,\n\t};\n}\n","import { DataExtractorApiImpl } from \"../api\";\n\nconst cached = new Map<string, any>();\n\n/**\n * Evaluates an expression\n */\nexport function cache<T>(\n\texpression: string | (() => T),\n\tid: string | number | undefined = undefined\n): T {\n\tlet resultFn: () => any;\n\tlet key: string;\n\tif (typeof expression === \"string\") {\n\t\tconst context = DataExtractorApiImpl.lastContext!;\n\t\tresultFn = () => context.evalFn(expression);\n\t\tkey = JSON.stringify({ expr: expression, id });\n\t} else {\n\t\tresultFn = () => expression();\n\t\tkey = JSON.stringify({ expr: expression.toString(), id });\n\t}\n\n\tif (cached.has(key)) {\n\t\treturn cached.get(key);\n\t}\n\n\tconst result = resultFn();\n\tcached.set(key, result);\n\n\treturn result;\n}\n","import { KnownVisualizationData } from \"../../CommonDataTypes\";\nimport { VisualizationData } from \"../../DataExtractionResult\";\n\nexport function asData(data: KnownVisualizationData): VisualizationData {\n\treturn data;\n}\n","import { DataExtractorApiImpl } from \"../api\";\r\n\r\nexport function find(predicate: (obj: unknown) => boolean): unknown {\r\n\tconst processed = new Set();\r\n\tif (!DataExtractorApiImpl.lastContext) {\r\n\t\tthrow new Error(\"No data extractor context!\");\r\n\t}\r\n\r\n\tconst values = Object.values(\r\n\t\tDataExtractorApiImpl.lastContext.variablesInScope\r\n\t);\r\n\tconst queue = [\r\n\t\t...values.map((v) => {\r\n\t\t\ttry {\r\n\t\t\t\treturn v();\r\n\t\t\t} catch (e) {\r\n\t\t\t\treturn undefined;\r\n\t\t\t}\r\n\t\t}),\r\n\t];\r\n\r\n\tlet i = 10000;\r\n\twhile (i > 0) {\r\n\t\ti--;\r\n\r\n\t\tconst top = queue.shift();\r\n\t\tprocessed.add(top);\r\n\r\n\t\tif (predicate(top)) {\r\n\t\t\treturn top;\r\n\t\t}\r\n\r\n\t\tif (typeof top === \"object\" && top) {\r\n\t\t\tfor (const val of Object.values(top)) {\r\n\t\t\t\tif (!processed.has(val)) {\r\n\t\t\t\t\tprocessed.add(val);\r\n\t\t\t\t\tqueue.push(val);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn undefined;\r\n}\r\n","import {\n\tDataExtractor,\n\tExtractionCollector,\n\tDataExtractorContext,\n} from \"../..\";\nimport { GridVisualizationData } from \"../../../CommonDataTypes\";\nimport { expect } from \"../../../util\";\n\nexport class GridExtractor implements DataExtractor {\n\treadonly id = \"grid\";\n\tgetExtractions(\n\t\tdata: unknown,\n\t\textractionCollector: ExtractionCollector,\n\t\tcontext: DataExtractorContext\n\t): void {\n\t\tif (!Array.isArray(data)) {\n\t\t\treturn;\n\t\t}\n\n\t\textractionCollector.addExtraction({\n\t\t\tid: this.id,\n\t\t\tname: \"Array As Grid\",\n\t\t\tpriority: 500,\n\t\t\textractData: () =>\n\t\t\t\texpect<GridVisualizationData>({\n\t\t\t\t\tkind: { grid: true },\n\t\t\t\t\trows: [{ columns: data.map(d => ({ tag: \"\" + d })) }],\n\t\t\t\t}),\n\t\t});\n\t}\n}\n","import { isAssertionExpression } from \"typescript\";\nimport { DataExtractor, ExtractionCollector, DataExtractorContext } from \"..\";\nimport { TableVisualizationData } from \"../../../CommonDataTypes\";\nimport { expect } from \"../../../util\";\n\nfunction assert<T>(value: unknown): asserts value {}\n\nexport class TableDataExtractor implements DataExtractor {\n\treadonly id = \"table\";\n\n\tgetExtractions(\n\t\tdata: unknown,\n\t\tcollector: ExtractionCollector,\n\t\tcontext: DataExtractorContext\n\t): void {\n\t\tif (!Array.isArray(data)) {\n\t\t\treturn;\n\t\t}\n\t\tif (\n\t\t\t!data.every((d) => typeof d === \"object\" && d && !Array.isArray(d))\n\t\t) {\n\t\t\treturn;\n\t\t}\n\t\tassert<object[]>(data);\n\n\t\tcollector.addExtraction({\n\t\t\tid: \"table\",\n\t\t\tname: \"Table\",\n\t\t\tpriority: 1000,\n\t\t\textractData() {\n\t\t\t\treturn expect<TableVisualizationData>({\n\t\t\t\t\tkind: {\n\t\t\t\t\t\ttable: true,\n\t\t\t\t\t},\n\t\t\t\t\trows: data,\n\t\t\t\t});\n\t\t\t},\n\t\t});\n\n\t\tcollector.addExtraction({\n\t\t\tid: \"table-with-type-name\",\n\t\t\tname: \"Table (With Type Name)\",\n\t\t\tpriority: 950,\n\t\t\textractData() {\n\t\t\t\treturn expect<TableVisualizationData>({\n\t\t\t\t\tkind: {\n\t\t\t\t\t\ttable: true,\n\t\t\t\t\t},\n\t\t\t\t\trows: data.map((d) => ({ type: d.constructor.name, ...d })),\n\t\t\t\t});\n\t\t\t},\n\t\t});\n\t}\n}\n","import {\r\n\tDataExtractor,\r\n\tDataExtractorContext,\r\n\tExtractionCollector,\r\n} from \"../..\";\r\n\r\nexport class StringDiffExtractor implements DataExtractor {\r\n\tpublic readonly id = \"string-diff\";\r\n\r\n\tpublic getExtractions(\r\n\t\tdata: unknown,\r\n\t\tcollector: ExtractionCollector,\r\n\t\tcontext: DataExtractorContext\r\n\t) {\r\n\t\tif (\r\n\t\t\tArray.isArray(data) &&\r\n\t\t\tdata.length === 2 &&\r\n\t\t\ttypeof data[0] === \"string\" &&\r\n\t\t\ttypeof data[1] === \"string\"\r\n\t\t) {\r\n\t\t\tcollector.addExtraction({\r\n\t\t\t\tid: \"string-diff\",\r\n\t\t\t\tname: \"String Diff\",\r\n\t\t\t\tpriority: 1300,\r\n\t\t\t\textractData: () => ({\r\n\t\t\t\t\tkind: { text: true },\r\n\t\t\t\t\ttext: data[0],\r\n\t\t\t\t\totherText: data[1],\r\n\t\t\t\t}),\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n}\r\n","import { DataExtractor, ExtractionCollector, DataExtractorContext } from \"..\";\r\nimport { LineColumnRange } from \"../../../CommonDataTypes\";\r\nimport { asData } from \"../../helpers\";\r\n\r\nexport class StringRangeExtractor implements DataExtractor {\r\n\treadonly id = \"stringRange\";\r\n\tgetExtractions(\r\n\t\tdata: unknown,\r\n\t\tcollector: ExtractionCollector,\r\n\t\tcontext: DataExtractorContext\r\n\t): void {\r\n\t\tif (!Array.isArray(data)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (typeof data[0] !== \"string\") {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst text = data[0];\r\n\r\n\t\tconst decorations1: { range: LineColumnRange; label?: string }[] = [];\r\n\t\tconst decorations2: { range: LineColumnRange; label?: string }[] = [];\r\n\r\n\t\tfunction offsetToLineColumn(offset: number) {\r\n\t\t\tlet line = 0;\r\n\t\t\tlet column = 0;\r\n\t\t\tfor (let idx = 0; idx < text.length; idx++) {\r\n\t\t\t\tif (idx === offset) {\r\n\t\t\t\t\treturn { line, column };\r\n\t\t\t\t}\r\n\t\t\t\tif (text[idx] === \"\\n\") {\r\n\t\t\t\t\tline++;\r\n\t\t\t\t\tcolumn = 0;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tcolumn++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn { line, column }; // TODO\r\n\t\t}\r\n\r\n\t\tif (\r\n\t\t\tdata.length === 2 &&\r\n\t\t\ttypeof data[1] === \"object\" &&\r\n\t\t\t!Array.isArray(data[1])\r\n\t\t) {\r\n\t\t\tdata = [data[0], ...Object.values(data[1])] as [\r\n\t\t\t\tnumber | [number, number]\r\n\t\t\t][];\r\n\t\t}\r\n\r\n\t\tfor (let item of (data as (number | [number, number])[]).slice(1)) {\r\n\t\t\tif (typeof item === \"string\") {\r\n\t\t\t\titem = context.evalFn(item);\r\n\t\t\t\tif (item === undefined) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (typeof item === \"number\") {\r\n\t\t\t\tconst pos = offsetToLineColumn(item);\r\n\t\t\t\tdecorations1.push({ range: { start: pos, end: pos } });\r\n\t\t\t\tdecorations2.push({\r\n\t\t\t\t\trange: {\r\n\t\t\t\t\t\tstart: pos,\r\n\t\t\t\t\t\tend: { line: pos.line, column: pos.column + 1 },\r\n\t\t\t\t\t},\r\n\t\t\t\t});\r\n\t\t\t} else if (\r\n\t\t\t\tArray.isArray(item) &&\r\n\t\t\t\titem.length === 2 &&\r\n\t\t\t\ttypeof item[0] === \"number\" &&\r\n\t\t\t\ttypeof item[1] === \"number\"\r\n\t\t\t) {\r\n\t\t\t\tdecorations1.push({\r\n\t\t\t\t\trange: {\r\n\t\t\t\t\t\tstart: offsetToLineColumn(item[0]),\r\n\t\t\t\t\t\tend: offsetToLineColumn(item[1]),\r\n\t\t\t\t\t},\r\n\t\t\t\t});\r\n\t\t\t\tdecorations2.push(decorations1[decorations1.length - 1]);\r\n\t\t\t} else {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tcollector.addExtraction({\r\n\t\t\tpriority: 1200,\r\n\t\t\tid: \"stringRange\",\r\n\t\t\tname: \"String Range\",\r\n\t\t\textractData() {\r\n\t\t\t\treturn asData({\r\n\t\t\t\t\tkind: { text: true },\r\n\t\t\t\t\ttext,\r\n\t\t\t\t\tdecorations: decorations1,\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t});\r\n\r\n\t\tcollector.addExtraction({\r\n\t\t\tpriority: 1000,\r\n\t\t\tid: \"stringRangeFullCharacters\",\r\n\t\t\tname: \"String Range (Full Character)\",\r\n\t\t\textractData() {\r\n\t\t\t\treturn asData({\r\n\t\t\t\t\tkind: { text: true },\r\n\t\t\t\t\ttext,\r\n\t\t\t\t\tdecorations: decorations2,\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t});\r\n\t}\r\n}\r\n","import { DataExtractor, ExtractionCollector, DataExtractorContext } from \"..\";\r\nimport { LineColumnRange } from \"../../../CommonDataTypes\";\r\nimport { asData, markedGrid, tryEval } from \"../../helpers\";\r\n\r\nexport class MarkedGridFromArrayExtractor implements DataExtractor {\r\n\treadonly id = \"markedGridFromArray\";\r\n\tgetExtractions(\r\n\t\tdata: unknown,\r\n\t\tcollector: ExtractionCollector,\r\n\t\tcontext: DataExtractorContext\r\n\t): void {\r\n\t\tif (!Array.isArray(data)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (!Array.isArray(data[0])) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet markers: any;\r\n\t\tif (data.length === 2 && typeof data[1] === \"object\") {\r\n\t\t\tmarkers = data[1];\r\n\t\t} else {\r\n\t\t\tfor (let i = 1; i < data.length; i++) {\r\n\t\t\t\tif (typeof data[i] !== \"string\") {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tmarkers = tryEval(data.slice(1));\r\n\t\t}\r\n\r\n\t\tcollector.addExtraction({\r\n\t\t\tid: \"markedGridFromArray\",\r\n\t\t\tname: \"Marked Grid from Array\",\r\n\t\t\tpriority: 1000,\r\n\t\t\textractData() {\r\n\t\t\t\treturn markedGrid(data[0], markers as any);\r\n\t\t\t},\r\n\t\t});\r\n\t}\r\n}\r\n","export { getDataExtractorApi as getApi } from \"./api/injection\";\n","export function getGlobal(): any {\n\tif (typeof globalThis === \"object\") {\n\t\treturn globalThis;\n\t} else if (typeof global === \"object\") {\n\t\treturn global;\n\t} else if (typeof window === \"object\") {\n\t\treturn window;\n\t}\n\n\tthrow new Error(\"No global available\");\n}\n","module.exports = require(\"fs\");"],"sourceRoot":""}