import { DataExtractorApi, DataResult, JSONString, DataExtractor, DataExtractorContext } from "./DataExtractorApi";
import { LoadDataExtractorsFn } from "./LoadDataExtractorsFn";
/**
 * @internal
 */
export declare class DataExtractorApiImpl implements DataExtractorApi {
    static lastContext: DataExtractorContext | undefined;
    private readonly extractors;
    private readonly extractorSources;
    private toJson;
    registerExtractor(extractor: DataExtractor): void;
    registerExtractors(extractors: DataExtractor[]): void;
    getData(valueFn: () => unknown, evalFn: <T>(expression: string) => T, preferredDataExtractorId: string | undefined, variablesInScope: Record<string, () => unknown>): JSONString<DataResult>;
    registerDefaultExtractors(preferExisting?: boolean): void;
    setDataExtractorFn(id: string, fn: LoadDataExtractorsFn | undefined): void;
}
//# sourceMappingURL=DataExtractorApiImpl.d.ts.map