"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NxImportsPlugin = void 0;
const path_1 = require("path");
const isNxImportPlugin = Symbol('__isNxImportPlugin__');
class NxImportsPlugin {
    constructor(typescript) {
        this.typescript = typescript;
        this.config = {};
        this.projects = new Map();
    }
    setConfig(config) {
        this.logger?.log('setting configuration ' + JSON.stringify(config));
        this.config = config;
        this.projects.forEach((project) => {
            this.updateProject(project);
        });
    }
    addProject(project) {
        this.logger?.log('addProject ' + project.getProjectName());
        if (this.projects.has(project.getProjectName())) {
            this.logger?.log('project already tracked ' + project.getProjectName());
            return;
        }
        this.projects.set(project.getProjectName(), project);
        this.updateProject(project);
    }
    updateProject(project) {
        this.logger?.log('updating project: ' + project.getProjectName());
        const externals = this.getRootFiles(project);
        externals.forEach((external) => {
            project.addMissingFileRoot(this.typescript.server.toNormalizedPath(external));
        });
    }
    getRootFiles(project) {
        this.logger?.log('get root files: ' + JSON.stringify(this.config));
        const externalFiles = this.config.externalFiles || [];
        if (externalFiles.length === 0) {
            return [];
        }
        const projectDirectory = (0, path_1.dirname)(project.getProjectName());
        this.logger?.log(`project directory: ${projectDirectory}`);
        const filteredExternalFiles = externalFiles
            .filter(({ directory }) => {
            return !projectDirectory.startsWith(directory);
        })
            .map(({ mainFile }) => mainFile);
        this.logger?.log(`root files: ${JSON.stringify(filteredExternalFiles)}`);
        return filteredExternalFiles;
    }
    decorate(languageService) {
        this.logger?.log('decorate');
        if (languageService[isNxImportPlugin]) {
            // Already decorated
            return;
        }
        const intercept = Object.create(null);
        const oldGetCompletionsAtPosition = languageService.getCompletionsAtPosition.bind(languageService);
        intercept.getCompletionsAtPosition = (fileName, position, options) => {
            this.logger?.log(`getCompletionsAtPosition ${fileName}:${position}`);
            return this.getCompletionsAtPosition(oldGetCompletionsAtPosition, fileName, position, options);
        };
        return new Proxy(languageService, {
            get: (target, property) => {
                if (property === isNxImportPlugin) {
                    return true;
                }
                return intercept[property] || target[property];
            },
        });
    }
    getCompletionsAtPosition(delegate, fileName, position, options) {
        return delegate(fileName, position, options);
    }
}
exports.NxImportsPlugin = NxImportsPlugin;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibngtaW1wb3J0cy1wbHVnaW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy90eXBlc2NyaXB0LW54LWltcG9ydHMtcGx1Z2luL3NyYy9saWIvbngtaW1wb3J0cy1wbHVnaW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsK0JBQStCO0FBVS9CLE1BQU0sZ0JBQWdCLEdBQUcsTUFBTSxDQUFDLHNCQUFzQixDQUFDLENBQUM7QUFFeEQsTUFBYSxlQUFlO0lBSzFCLFlBQTZCLFVBQTRCO1FBQTVCLGVBQVUsR0FBVixVQUFVLENBQWtCO1FBSHpELFdBQU0sR0FBa0IsRUFBRSxDQUFDO1FBQzNCLGFBQVEsR0FBRyxJQUFJLEdBQUcsRUFBb0MsQ0FBQztJQUVLLENBQUM7SUFFN0QsU0FBUyxDQUFDLE1BQXFCO1FBQzdCLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLHdCQUF3QixHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUNwRSxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUVyQixJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQ2hDLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDOUIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsVUFBVSxDQUFDLE9BQWlDO1FBQzFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLGFBQWEsR0FBRyxPQUFPLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUMzRCxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxjQUFjLEVBQUUsQ0FBQyxFQUFFLENBQUM7WUFDaEQsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsMEJBQTBCLEdBQUcsT0FBTyxDQUFDLGNBQWMsRUFBRSxDQUFDLENB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