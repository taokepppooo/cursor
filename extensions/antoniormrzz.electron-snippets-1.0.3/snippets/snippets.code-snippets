{
  "New window": {
    "scope": "javascript,typescript",
    "prefix": "elec-window",
    "body": [
      "const ${1:mainWindow} = new BrowserWindow({",
      "\theight: ${2:600},",
      "\twidth: ${3:800},",
      "\twebPreferences: {",
      "\t\tnodeIntegration: ${4:true},",
      "\t\tenableRemoteModule: ${5:true}",
      "\t},",
      "\ticon: path.join(__dirname, 'assets', 'img', 'icon.png'),",
      "\ttitle: '${6:My App}',",
      "});",
      "mainWindow.setTitle('${7:My App}');",
      "mainWindow.loadFile(path.join(__dirname, '../path/to/html'));"
    ],
    "description": "Create a new electron window"
  },
  "Main process notification": {
    "scope": "javascript,typescript",
    "prefix": "elec-main-notif",
    "body": [
      "const notification = {",
      "\ttitle: '${1:Basic Notification}',",
      "\tbody: '${2:Notification from the Main process}'",
      "};",
      "new Notification(notification).show();"
    ],
    "description": "Display a notification from the main process"
  },
  "Global keyboard shortcut": {
    "scope": "javascript,typescript",
    "prefix": "elec-global-shortcut",
    "body": [
      "app.whenReady().then(() => {",
      "\tglobalShortcut.register('${1:Alt+CommandOrControl+I}', () => {",
      "\t\t // do something",
      "\t})",
      "}).then(createWindow);"
    ],
    "description": "Configure a global keyboard shortcut"
  },
  "Taskbar Progress": {
    "scope": "javascript,typescript",
    "prefix": "elec-progress",
    "body": [
      "// Setting the parameter to negative values (e.g. -1) will remove the progress bar,",
      "// whereas setting it to values greater than 1 (e.g. 2) will switch the progress bar",
      "// to indeterminate mode (Windows-only -- it will clamp to 100% otherwise)",
      "${1:mainWindow}.setProgressBar(${2:0.5});"
    ],
    "description": "Set a progress for taskbar icon"
  },
  "Open dialog": {
    "scope": "javascript,typescript",
    "prefix": "elec-dialog",
    "body": [
      "dialog.showOpenDialogSync(${1:mainWindow}, {",
      "\tproperties: ['openFile', 'openDirectory']",
      "});"
    ],
    "description": "Dialog to open a file or directory"
  },
  "Copy to clipboard": {
    "scope": "javascript,typescript",
    "prefix": "elec-copy",
    "body": ["clipboard.writeText(${1:'Example String'});"],
    "description": "Copy a text to clipboard"
  },
  "Paste from clipboard": {
    "scope": "javascript,typescript",
    "prefix": "elec-paste",
    "body": ["clipboard.readText();"],
    "description": "Paste from clipboard"
  },
  "Create tray menu": {
    "scope": "javascript,typescript",
    "prefix": "elec-tray",
    "body": [
      "let tray = null;",
      "",
      "function initTray(mainWindow) {",
      "\tapp.whenReady().then(() => {",
      "\t\ttray = new Tray(path.join(__dirname, 'assets', 'img', 'icon.png'));",
      "\t\tconst contextMenu = Menu.buildFromTemplate([",
      "\t\t\t{",
      "\t\t\t\tlabel: 'App Name',",
      "\t\t\t\tclick: function () {",
      "\t\t\t\t\tmainWindow.show();",
      "\t\t\t\t}",
      "\t\t\t},",
      "\t\t\t{",
      "\t\t\t\tlabel: 'Quit',",
      "\t\t\t\ttype: 'normal',",
      "\t\t\t\tclick: function () {",
      "\t\t\t\t\tapp.isQuiting = true;",
      "\t\t\t\t\tapp.quit();",
      "\t\t\t\t}",
      "\t\t\t}",
      "\t\t]);",
      "\t\ttray.setToolTip('App Name');",
      "\t\ttray.setContextMenu(contextMenu);",
      "\t});",
      "",
      "\tmainWindow.on('close', function (event) {",
      "\t\tif (!app.isQuiting) {",
      "\t\t\tevent.preventDefault();",
      "\t\t\tmainWindow.hide();",
      "\t\t}",
      "\t\treturn false;",
      "\t});",
      "}"
    ],
    "description": "Create a tray menu and configure the app to minimize to tray"
  },
  "Create menu from template (huge)": {
    "scope": "javascript,typescript",
    "prefix": "elec-menu",
    "body": [
      "const isMac = process.platform === 'darwin'",
      "",
      "const template = [",
      "\t// { role: 'appMenu' }",
      "\t...(isMac ? [{",
      "\t\tlabel: app.name,",
      "\t\tsubmenu: [",
      "\t\t\t{ role: 'about' },",
      "\t\t\t{ type: 'separator' },",
      "\t\t\t{ role: 'services' },",
      "\t\t\t{ type: 'separator' },",
      "\t\t\t{ role: 'hide' },",
      "\t\t\t{ role: 'hideothers' },",
      "\t\t\t{ role: 'unhide' },",
      "\t\t\t{ type: 'separator' },",
      "\t\t\t{ role: 'quit' }",
      "\t\t]",
      "\t}] : []),",
      "\t// { role: 'fileMenu' }",
      "\t{",
      "\t\tlabel: 'File',",
      "\t\tsubmenu: [",
      "\t\t\tisMac ? { role: 'close' } : { role: 'quit' }",
      "\t\t]",
      "\t},",
      "\t// { role: 'editMenu' }",
      "\t{",
      "\t\tlabel: 'Edit',",
      "\t\tsubmenu: [",
      "\t\t\t{ role: 'undo' },",
      "\t\t\t{ role: 'redo' },",
      "\t\t\t{ type: 'separator' },",
      "\t\t\t{ role: 'cut' },",
      "\t\t\t{ role: 'copy' },",
      "\t\t\t{ role: 'paste' },",
      "\t\t\t...(isMac ? [",
      "\t\t\t\t{ role: 'pasteAndMatchStyle' },",
      "\t\t\t\t{ role: 'delete' },",
      "\t\t\t\t{ role: 'selectAll' },",
      "\t\t\t\t{ type: 'separator' },",
      "\t\t\t\t{",
      "\t\t\t\t\tlabel: 'Speech',",
      "\t\t\t\t\tsubmenu: [",
      "\t\t\t\t\t\t{ role: 'startspeaking' },",
      "\t\t\t\t\t\t{ role: 'stopspeaking' }",
      "\t\t\t\t\t]",
      "\t\t\t\t}",
      "\t\t\t] : [",
      "\t\t\t\t{ role: 'delete' },",
      "\t\t\t\t{ type: 'separator' },",
      "\t\t\t\t{ role: 'selectAll' }",
      "\t\t\t])",
      "\t\t]",
      "\t},",
      "\t// { role: 'viewMenu' }",
      "\t{",
      "\t\tlabel: 'View',",
      "\t\tsubmenu: [",
      "\t\t\t{ role: 'reload' },",
      "\t\t\t{ role: 'forcereload' },",
      "\t\t\t{ role: 'toggledevtools' },",
      "\t\t\t{ type: 'separator' },",
      "\t\t\t{ role: 'resetzoom' },",
      "\t\t\t{ role: 'zoomin' },",
      "\t\t\t{ role: 'zoomout' },",
      "\t\t\t{ type: 'separator' },",
      "\t\t\t{ role: 'togglefullscreen' }",
      "\t\t]",
      "\t},",
      "\t// { role: 'windowMenu' }",
      "\t{",
      "\t\tlabel: 'Window',",
      "\t\tsubmenu: [",
      "\t\t\t{ role: 'minimize' },",
      "\t\t\t{ role: 'zoom' },",
      "\t\t\t...(isMac ? [",
      "\t\t\t\t{ type: 'separator' },",
      "\t\t\t\t{ role: 'front' },",
      "\t\t\t\t{ type: 'separator' },",
      "\t\t\t\t{ role: 'window' }",
      "\t\t\t] : [",
      "\t\t\t\t{ role: 'close' }",
      "\t\t\t])",
      "\t\t]",
      "\t},",
      "\t{",
      "\t\trole: 'help',",
      "\t\tsubmenu: [",
      "\t\t\t{",
      "\t\t\t\tlabel: 'Learn More',",
      "\t\t\t\tclick: async () => {",
      "\t\t\t\t\tconst { shell } = require('electron')",
      "\t\t\t\t\tawait shell.openExternal('https://electronjs.org')",
      "\t\t\t\t}",
      "\t\t\t}",
      "\t\t]",
      "\t}",
      "]",
      "",
      "const menu = Menu.buildFromTemplate(template)",
      "Menu.setApplicationMenu(menu)",
      ""
    ],
    "description": "Create menu from template (huge)"
  },
  "Create renderer right-click context menu": {
    "scope": "javascript,typescript",
    "prefix": "elec-renderer-context",
    "body": [
      "const { remote } = require('electron');",
      "const { Menu, MenuItem } = remote;",
      "",
      "const menu = new Menu();",
      "menu.append(new MenuItem({ label: 'MenuItem1', click() { console.log('item 1 clicked') } }));",
      "menu.append(new MenuItem({ type: 'separator' }));",
      "menu.append(new MenuItem({ label: 'MenuItem2', type: 'checkbox', checked: true }));",
      "",
      "window.addEventListener('contextmenu', (e) => {",
      "\te.preventDefault();",
      "\tmenu.popup({ window: remote.getCurrentWindow() });",
      "}, false);"
    ],
    "description": "Create a right-click context menu from renderer example"
  },
  "Listen to message with ipcmain and reply": {
    "scope": "javascript,typescript",
    "prefix": "elec-main-listen",
    "body": [
      "ipcMain.on('${1:category:name}', (event, arg) => {",
      "\t\tevent.reply('${2:category:name-result}',arg);",
      "\t}",
      ");"
    ],
    "description": "Listen to message on main with ipcMain and reply"
  },
  "Send message from main to window": {
    "scope": "javascript,typescript",
    "prefix": "elec-main-send",
    "body": ["mainWindow.webContents.send('${1:category:name}', {});"],
    "description": "Send message from main to window example"
  },
  "Listen to messages from renderer": {
    "scope": "javascript,typescript",
    "prefix": "elec-renderer-listen",
    "body": ["ipcRenderer.on('${1:category:name}', (event, arg) => {", "\t", "});"],
    "description": "Listen to messages from renderer with ipcRenderer"
  },
  "Send message from renderer to main": {
    "scope": "javascript,typescript",
    "prefix": "elec-renderer-send",
    "body": ["ipcRenderer.send('${1:category:name}', {});"],
    "description": "Send message from renderer to main with ipcRenderer"
  },
  "Open devtools": {
    "scope": "javascript,typescript",
    "prefix": "elec-devtools",
    "body": ["${1:mainWindow}.webContents.openDevTools();"],
    "description": "Open chrome devtools on the window"
  },
  "New Electron App": {
    "scope": "javascript,typescript",
    "prefix": "elec-new-app",
    "body": [
      "const { app, BrowserWindow } = require('electron');",
      "",
      "function createWindow() {",
      "\tconst win = new BrowserWindow({",
      "\t\theight: ${2:600},",
      "\t\twidth: ${3:800},",
      "\t\twebPreferences: {",
      "\t\t\tnodeIntegration: ${4:true},",
      "\t\t\tenableRemoteModule: ${5:true}",
      "\t\t},",
      "\t\ticon: path.join(__dirname, 'assets', 'img', 'icon.png'),",
      "\t\ttitle: '${6:My App}',",
      "\t});",
      "",
      "\twin.setTitle('${7:My App}');",
      "\twin.loadFile('index.html');",
      "\twin.webContents.openDevTools();",
      "}",
      "",
      "app.whenReady().then(createWindow);",
      "",
      "app.on('window-all-closed', () => {",
      "\tif (process.platform !== 'darwin') {",
      "\t\tapp.quit();",
      "\t}",
      "});",
      "",
      "app.on('activate', () => {",
      "\tif (BrowserWindow.getAllWindows().length === 0) {",
      "\t\tcreateWindow();",
      "\t}",
      "});"
    ],
    "description": "Boilerplate for a new electron app"
  }
}
