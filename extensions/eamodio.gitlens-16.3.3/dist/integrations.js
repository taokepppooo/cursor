exports.id=758,exports.ids=[758],exports.modules={1286:(e,t,r)=>{r.r(t),r.d(t,{AzureDevOpsAuthenticationProvider:()=>AzureDevOpsAuthenticationProvider});var i=r(1646),s=r(3631);let AzureDevOpsAuthenticationProvider=class AzureDevOpsAuthenticationProvider extends s.DP{get authProviderId(){return i.Q7.AzureDevOps}}},4969:(e,t,r)=>{r.r(t),r.d(t,{BitbucketAuthenticationProvider:()=>BitbucketAuthenticationProvider});var i=r(1398),s=r(1646),o=r(7603),a=r(3631);let BitbucketAuthenticationProvider=class BitbucketAuthenticationProvider extends a.RH{get authProviderId(){return s.Q7.Bitbucket}async createSession(e){let t,r=e.username;if(!r){let t={iconPath:new i.ThemeIcon("link-external"),tooltip:"Open the Bitbucket Settings Page"},s=i.window.createInputBox();s.ignoreFocusOut=!0;let o=[];try{r=await new Promise(r=>{o.push(s.onDidHide(()=>r(void 0)),s.onDidChangeValue(()=>s.validationMessage=void 0),s.onDidAccept(()=>{let e=s.value.trim();if(!e){s.validationMessage="A Bitbucket username is required";return}r(e)}),s.onDidTriggerButton(r=>{r===t&&i.env.openExternal(i.Uri.parse(`https://${e.domain}/account/settings/`))})),s.title=`Bitbucket Authentication  \u2022 ${e.domain}`,s.placeholder="Username",s.prompt=`Enter your [Bitbucket Username](https://${e.domain}/account/settings/ "Get your Bitbucket App Password")`,s.show()})}finally{s.dispose(),o.forEach(e=>void e.dispose())}}if(!r)return;let s=i.window.createInputBox();s.ignoreFocusOut=!0;let a=[];try{let r={iconPath:new i.ThemeIcon("link-external"),tooltip:"Open the Bitbucket App Passwords Page"};t=await new Promise(t=>{a.push(s.onDidHide(()=>t(void 0)),s.onDidChangeValue(()=>s.validationMessage=void 0),s.onDidAccept(()=>{let e=s.value.trim();if(!e){s.validationMessage="An app password is required";return}t(e)}),s.onDidTriggerButton(t=>{t===r&&i.env.openExternal(i.Uri.parse(`https://${e.domain}/account/settings/app-passwords/`))})),s.password=!0,s.title=`Bitbucket Authentication  \u2022 ${e.domain}`,s.placeholder=`Requires ${e.scopes.join(", ")} scopes`,s.prompt=`Paste your [Bitbucket App Password](https://${e.domain}/account/settings/app-passwords/ "Get your Bitbucket App Password")`,s.buttons=[r],s.show()})}finally{s.dispose(),a.forEach(e=>void e.dispose())}if(t)return{id:this.configuredIntegrationService.getSessionId(e),accessToken:(0,o.K3)(`${r}:${t}`),scopes:e.scopes,account:{id:"",label:""},cloud:!1,domain:e.domain}}}},7160:(e,t,r)=>{r.r(t),r.d(t,{CloudIntegrationService:()=>CloudIntegrationService});var i=r(4064),s=r(6450),o=r(3936);let CloudIntegrationService=class CloudIntegrationService{constructor(e,t){this.container=e,this.connection=t}async getConnections(){let e=(0,s.dQ)(),t=await this.connection.fetchGkApi("v1/provider-tokens",{method:"GET"},{organizationId:!1});if(!t.ok){let r=(await t.json())?.error,s="string"==typeof r?r:r?.message??t.statusText;null!=r&&i.Vy.error(void 0,e,`Failed to get connected providers from cloud: ${s}`),this.container.telemetry.enabled&&this.container.telemetry.sendEvent("cloudIntegrations/getConnections/failed",{code:t.status});return}return(await t.json())?.data}async getConnectionSession(e,t){let r=(0,s.dQ)(),a=!!t,n=o.xq[e];if(null==n){i.Vy.error(void 0,r,`Unsupported cloud integration type: ${e}`);return}let l=t?{method:"POST",body:JSON.stringify({access_token:t})}:{method:"GET"},u=await this.connection.fetchGkApi(`v1/provider-tokens/${n}${a?"/refresh":""}`,l,{organizationId:!1});if(!u.ok){let s=(await u.json())?.error,o="string"==typeof s?s:s?.message??u.statusText;null!=s&&i.Vy.error(void 0,r,`Failed to ${a?"refresh":"get"} ${e} token from cloud: ${o}`),this.container.telemetry.enabled&&this.container.telemetry.sendEvent(t?"cloudIntegrations/refreshConnection/failed":"cloudIntegrations/getConnection/failed",{code:u.status,"integration.id":e});return}return(await u.json())?.data}async disconnect(e){let t=(0,s.dQ)(),r=o.xq[e];if(null==r)return i.Vy.error(void 0,t,`Unsupported cloud integration type: ${e}`),!1;let a=await this.connection.fetchGkApi(`v1/provider-tokens/${r}`,{method:"DELETE"},{organizationId:!1});if(!a.ok){let r=(await a.json())?.error,s="string"==typeof r?r:r?.message??a.statusText;return null!=r&&i.Vy.error(void 0,t,`Failed to disconnect ${e} token from cloud: ${s}`),this.container.telemetry.enabled&&this.container.telemetry.sendEvent("cloudIntegrations/disconnect/failed",{code:a.status,"integration.id":e}),!1}return!0}}},1913:(e,t,r)=>{r.r(t),r.d(t,{GitHubAuthenticationProvider:()=>GitHubAuthenticationProvider,GitHubEnterpriseAuthenticationProvider:()=>GitHubEnterpriseAuthenticationProvider,GitHubEnterpriseCloudAuthenticationProvider:()=>GitHubEnterpriseCloudAuthenticationProvider});var i=r(1398),s=r(7223),o=r(1646),a=r(3631);let GitHubAuthenticationProvider=class GitHubAuthenticationProvider extends a.DP{constructor(e,t,r){super(e,t,r),this.disposables.push(i.authentication.onDidChangeSessions(e=>{e.provider.id===this.authProviderId&&this.fireDidChange()}))}get authProviderId(){return o.Q7.GitHub}async getBuiltInExistingSession(e,t){return(0,s.Ff)(this.container.integrations.ignoreSSLErrors({id:this.authProviderId,domain:e?.domain}),async()=>{let r=await i.authentication.getSession(this.authProviderId,e.scopes,{forceNewSession:!!t||void 0,silent:!t||void 0});if(null!=r)return{...r,cloud:!1,domain:e.domain}})}async getSession(e,t){let r=await this.getBuiltInExistingSession(e);return(null!=r&&t?.forceNewSession&&(r=await this.getBuiltInExistingSession(e,!0)),null!=r)?r:super.getSession(e,t)}};let GitHubEnterpriseCloudAuthenticationProvider=class GitHubEnterpriseCloudAuthenticationProvider extends a.DP{get authProviderId(){return o.PY.CloudGitHubEnterprise}};let GitHubEnterpriseAuthenticationProvider=class GitHubEnterpriseAuthenticationProvider extends a.RH{get authProviderId(){return o.PY.GitHubEnterprise}async createSession(e){let t;let r=i.window.createInputBox();r.ignoreFocusOut=!0;let s=[];try{let o={iconPath:new i.ThemeIcon("link-external"),tooltip:"Open the GitHub Access Tokens Page"};t=await new Promise(t=>{s.push(r.onDidHide(()=>t(void 0)),r.onDidChangeValue(()=>r.validationMessage=void 0),r.onDidAccept(()=>{let e=r.value.trim();if(!e){r.validationMessage="A personal access token is required";return}t(e)}),r.onDidTriggerButton(t=>{t===o&&i.env.openExternal(i.Uri.parse(`https://${e.domain}/settings/tokens`))})),r.password=!0,r.title=`GitHub Authentication  \u2022 ${e.domain}`,r.placeholder=`Requires a classic token with ${e.scopes.join(", ")} scopes`,r.prompt=`Paste your [GitHub Personal Access Token](https://${e.domain}/settings/tokens "Get your GitHub Access Token")`,r.buttons=[o],r.show()})}finally{r.dispose(),s.forEach(e=>void e.dispose())}if(t)return{id:this.configuredIntegrationService.getSessionId(e),accessToken:t,scopes:e?.scopes??[],account:{id:"",label:""},cloud:!1,domain:e.domain}}}},1857:(e,t,r)=>{r.r(t),r.d(t,{GitLabCloudAuthenticationProvider:()=>GitLabCloudAuthenticationProvider,GitLabLocalAuthenticationProvider:()=>GitLabLocalAuthenticationProvider,GitLabSelfHostedCloudAuthenticationProvider:()=>GitLabSelfHostedCloudAuthenticationProvider});var i=r(1398),s=r(1646),o=r(3631);let GitLabLocalAuthenticationProvider=class GitLabLocalAuthenticationProvider extends o.RH{constructor(e,t,r,i){super(e,t,r),this.authProviderId=i}async createSession(e){let t;let r=i.window.createInputBox();r.ignoreFocusOut=!0;let s=[];try{let o={iconPath:new i.ThemeIcon("link-external"),tooltip:"Open the GitLab Access Tokens Page"};t=await new Promise(t=>{s.push(r.onDidHide(()=>t(void 0)),r.onDidChangeValue(()=>r.validationMessage=void 0),r.onDidAccept(()=>{let e=r.value.trim();if(!e){r.validationMessage="A personal access token is required";return}t(e)}),r.onDidTriggerButton(t=>{t===o&&i.env.openExternal(i.Uri.parse(`https://${e.domain}/-/profile/personal_access_tokens`))})),r.password=!0,r.title=`GitLab Authentication  \u2022 ${e.domain}`,r.placeholder=`Requires ${e.scopes.join(", ")} scopes`,r.prompt=`Paste your [GitLab Personal Access Token](https://${e.domain}/-/user_settings/personal_access_tokens?name=GitLens+Access+token&scopes=${e.scopes.join(",")} "Get your GitLab Access Token")`,r.buttons=[o],r.show()})}finally{r.dispose(),s.forEach(e=>void e.dispose())}if(t)return{id:this.configuredIntegrationService.getSessionId(e),accessToken:t,scopes:e?.scopes??[],account:{id:"",label:""},cloud:!1,domain:e.domain}}};let GitLabSelfHostedCloudAuthenticationProvider=class GitLabSelfHostedCloudAuthenticationProvider extends o.DP{get authProviderId(){return s.PY.CloudGitLabSelfHosted}};let GitLabCloudAuthenticationProvider=class GitLabCloudAuthenticationProvider extends o.DP{get authProviderId(){return s.Q7.GitLab}}},5198:(e,t,r)=>{r.r(t),r.d(t,{JiraAuthenticationProvider:()=>JiraAuthenticationProvider});var i=r(1646),s=r(3631);let JiraAuthenticationProvider=class JiraAuthenticationProvider extends s.DP{get authProviderId(){return i.tp.Jira}}},6892:(e,t,r)=>{r.r(t),r.d(t,{AzureDevOpsApi:()=>AzureDevOpsApi});var i=r(1398),s=r(7223),o=r(2856),a=r(4039),n=r(6468),l=r(4143),u=r(4007),c=r(4064),d=r(6450),h=r(1165),g=r(3339),p=r(3444);let m=/\.visualstudio\.com$/;function f(e){return"Completed"===e||"Resolved"===e||"Removed"===e}function v(e){switch(e){case"Resolved":case"Completed":case"Removed":return"closed";default:return"opened"}}function y(e){switch(e){case"abandoned":return"closed";case"completed":return"merged";default:return"opened"}}function w(e){return e.pathname.split("/")[1]}function b(e){return m.test(e.hostname)?e.hostname.split(".")[0]:w(e)}function P(e){let t=new URL(e.url),r=new URL(t.origin).toString(),i=`${e.repository.project.name}/_git/${e.repository.name}`;if(m.test(t.hostname))return`${r}/${i}/pullrequest/${e.pullRequestId}`;let s=w(t);return`${r}/${s}/${i}/pullrequest/${e.pullRequestId}`}function R(e){switch(e){case 10:case 5:return p.c7.Approved;case 0:default:return p.c7.ReviewRequested;case -5:case -10:return p.c7.ChangesRequested}}function $(e){return{isCodeOwner:void 0,reviewer:{avatarUrl:e.imageUrl,id:e.id,name:e.displayName,url:e.url},state:R(e.vote??0)}}function C(e){return e.startsWith("refs/heads/")?e.replace("refs/heads/",""):e}function A(e,t){return{avatarUrl:e.imageUrl,id:e.id,name:e.displayName,url:e.url}}var q=Object.defineProperty,S=Object.getOwnPropertyDescriptor,F=(e,t,r,i)=>{for(var s,o=i>1?void 0:i?S(t,r):t,a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i?s(t,r,o):s(o))||o);return i&&o&&q(t,r,o),o};let AzureDevOpsApi=class AzureDevOpsApi{_disposable;_workItemStates=new WorkItemStates;constructor(e){this._disposable=l.H.onDidChangeAny(e=>{(l.H.changedCore(e,["http.proxy","http.proxyStrictSSL"])||l.H.changed(e,["outputLevel","proxy"]))&&this.resetCaches()})}dispose(){this._disposable.dispose()}_proxyAgent=null;get proxyAgent(){if(!o.HZ)return null===this._proxyAgent&&(this._proxyAgent=(0,s.cQ)()),this._proxyAgent}resetCaches(){this._proxyAgent=null,this._workItemStates.clear()}async getPullRequestForBranch(e,t,r,i,s,o){let a=(0,d.dQ)(),[n,l,u]=i.split("/");try{let i=await this.request(e,t,o?.baseUrl,`${r}/${n}/_apis/git/repositories/${u}/pullRequests`,{method:"GET"},a),l=i?.value.find(e=>e.sourceRefName.endsWith(s));if(null==l)return;return function(e,t,r,i){let s=new URL(e.url);return new p.B9(t,A(e.createdBy,"pullRequest"),e.pullRequestId.toString(),e.pullRequestId.toString(),e.title,P(e),{owner:b(s),repo:e.repository.name,id:e.repository.id,accessLevel:g.LI.Write},y(e.status),new Date(e.creationDate),new Date(e.closedDate||e.creationDate),e.closedDate?new Date(e.closedDate):void 0,e.closedDate&&"completed"===e.status?new Date(e.closedDate):void 0,function(e){switch(e){case"conflicts":return p.Q6.Conflicting;case"failure":return p.Q6.FailingChecks;case"rejectedByPolicy":return p.Q6.BlockedByPolicy;case"succeeded":return p.Q6.Mergeable;default:return p.Q6.Unknown}}(e.mergeStatus??"notSet"),void 0,{base:{branch:e.targetRefName?C(e.targetRefName):"",sha:e.lastMergeTargetCommit?.commitId??"",repo:e.repository.name,owner:b(s),exists:null!=e.targetRefName,url:e.repository.webUrl},head:{branch:e.sourceRefName?C(e.sourceRefName):"",sha:e.lastMergeSourceCommit?.commitId??"",repo:e.forkSource?.repository!=null?e.forkSource.repository.name:e.repository.name,owner:b(s),exists:null!=e.sourceRefName,url:e.forkSource?.repository!=null?e.forkSource.repository.webUrl:e.repository.webUrl},isCrossRepository:null!=e.forkSource},e.isDraft,void 0,void 0,void 0,void 0,function(e){let t=e.map(e=>R(e));return t.includes(p.c7.ChangesRequested)?p.dq.ChangesRequested:t.includes(p.c7.ReviewRequested)?p.dq.ReviewRequired:t.includes(p.c7.Approved)?p.dq.Approved:void 0}(e.reviewers?.filter(e=>e.isRequired).map(e=>e.vote??0)??[]),e.reviewers.filter(e=>null==e.vote||0===e.vote).map(e=>$(e)),e.reviewers.filter(e=>null!=e.vote&&0!==e.vote).map(e=>$(e)),e.reviewers.map(e=>({avatarUrl:e.imageUrl,id:e.id,name:e.displayName,url:e.url})),void 0,{id:e.repository?.project?.id,name:i,resourceId:"",resourceName:r})}(l,e,r,n)}catch(e){c.Vy.error(e,a);return}}async getIssueOrPullRequest(e,t,r,i,s,o){let a=(0,d.dQ)(),[n,l,u]=i.split("/");try{let i=await this.request(e,t,o?.baseUrl,`${r}/${n}/_apis/wit/workItems/${s}`,{method:"GET"},a);if(null!=i){let s=i.fields["System.WorkItemType"],a=i.fields["System.State"],l=await this.getWorkItemStateCategory(s,a,e,t,r,n,o);return{id:i.id.toString(),type:"issue",nodeId:i.id.toString(),provider:e,createdDate:new Date(i.fields["System.CreatedDate"]),updatedDate:new Date(i.fields["System.ChangedDate"]),state:v(l),closed:f(l),title:i.fields["System.Title"],url:i._links.html.href}}}catch(e){if(e.original?.status!==404){c.Vy.error(e,a);return}}try{let i=await this.request(e,t,o?.baseUrl,`${r}/${n}/_apis/git/repositories/${u}/pullRequests/${s}`,{method:"GET"},a);if(null!=i){var h;return{id:i.pullRequestId.toString(),type:"pullrequest",nodeId:i.pullRequestId.toString(),provider:e,createdDate:new Date(i.creationDate),updatedDate:new Date(i.creationDate),state:y(i.status),closed:(h=i.status,"opened"!==y(h)),title:i.title,url:P(i)}}return}catch(e){c.Vy.error(e,a);return}}async getIssue(e,t,r,i,s){let o=(0,d.dQ)();try{let a=await this.request(e,t,s?.baseUrl,`${r.resourceName}/${r.name}/_apis/wit/workItems/${i}`,{method:"GET"},o);if(null!=a){let i=a.fields["System.WorkItemType"],o=a.fields["System.State"],n=await this.getWorkItemStateCategory(i,o,e,t,r.resourceName,r.name,s);return new g.m2(e,a.id.toString(),a.id.toString(),a.fields["System.Title"],a._links.html.href,new Date(a.fields["System.CreatedDate"]),new Date(a.fields["System.ChangedDate"]),f(n),v(n),A(a.fields["System.CreatedBy"],"issue"),null!=a.fields["System.AssignedTo"]?[A(a.fields["System.AssignedTo"],"issue")]:[],void 0,a.fields["Microsoft.VSTS.Common.ClosedDate"]?new Date(a.fields["Microsoft.VSTS.Common.ClosedDate"]):void 0,void 0,a.fields["System.CommentCount"],void 0,a.fields["System.Description"],r)}}catch(e){e.original?.status!==404&&c.Vy.error(e,o)}}async getWorkItemStateCategory(e,t,r,i,s,o,a){let n=`${s}/${o}`,l=this._workItemStates.getStateCategory(n,e,t);if(null!=l)return l;let u=await this.retrieveWorkItemTypeStates(e,r,i,s,o,a);return this._workItemStates.saveTypeStates(n,e,u),this._workItemStates.getStateCategory(n,e,t)}async retrieveWorkItemTypeStates(e,t,r,i,s,o){let a=(0,d.dQ)();try{let n=await this.request(t,r,o?.baseUrl,`${i}/${s}/_apis/wit/workItemTypes/${e}/states`,{method:"GET"},a);return n?.value??[]}catch(e){return c.Vy.error(e,a),[]}}async request(e,t,r,o,n,l,u){let d;let g=`${r}/${o}`;try{let r=(0,h.u)(`[AZURE] ${n?.method??"GET"} ${g}`,{log:!1}),i=this.proxyAgent;try{let r;if(null!=u){if(u.isCancellationRequested)throw new a.AL;r=new AbortController,u.onCancellationRequested(()=>r.abort())}if((d=await (0,s.Ff)(e.getIgnoreSSLErrors(),()=>(0,s.hd)(g,{headers:{Authorization:`Bearer ${t}`,"Content-Type":"application/json"},agent:i,signal:r?.signal,...n}))).ok)return await d.json();throw new a.QI("AzureDevOps",d)}finally{r?.stop()}}catch(r){throw r instanceof a.QI||"AbortError"===r.name?this.handleRequestError(e,t,r,l):c.Vy.isDebugging&&i.window.showErrorMessage(`AzureDevOps request failed: ${r.message}`),r}}handleRequestError(e,t,r,s){if("AbortError"===r.name||!(r instanceof a.QI))throw new a.AL(r);switch(r.status){case 404:case 410:case 422:throw new a.LN(r);case 401:throw new a.v3("azureDevOps",a.R.Unauthorized,r);case 500:c.Vy.error(r,s),null!=r.response&&(e?.trackRequestException(),(0,n.wW)(`${e?.name??"AzureDevOps"} failed to respond and might be experiencing issues.${null==e||"azure"===e.id?" Please visit the [AzureDevOps status page](https://status.dev.azure.com) for more information.":""}`));return;case 502:c.Vy.error(r,s);break;default:if(r.status>=400&&r.status<500)throw new a.tk(r)}c.Vy.error(r,s),c.Vy.isDebugging&&i.window.showErrorMessage(`AzureDevOps request failed: ${r.response?.errors?.[0]?.message??r.message}`)}};F([(0,u.Yz)({args:{0:e=>e.name,1:"<token>"}})],AzureDevOpsApi.prototype,"getPullRequestForBranch",1),F([(0,u.Yz)({args:{0:e=>e.name,1:"<token>"}})],AzureDevOpsApi.prototype,"getIssueOrPullRequest",1),F([(0,u.Yz)({args:{0:e=>e.name,1:"<token>"}})],AzureDevOpsApi.prototype,"getIssue",1);let WorkItemStates=class WorkItemStates{_categories=new Map;_types=new Map;getStateCategory(e,t,r){return this._categories.get(this.getStateKey(e,t,r))}clear(){this._categories.clear(),this._types.clear()}saveTypeStates(e,t,r){for(let i of(this.clearTypeStates(e,t),this._types.set(this.getTypeKey(e,t),r),r))this._categories.set(this.getStateKey(e,t,i.name),i.category)}hasTypeStates(e,t){return this._types.has(this.getTypeKey(e,t))}clearTypeStates(e,t){let r=this._types.get(this.getTypeKey(e,t));if(null!=r)for(let i of r)this._categories.delete(this.getStateKey(e,t,i.name))}getStateKey(e,t,r){return JSON.stringify([e,t,r])}getTypeKey(e,t){return JSON.stringify([e,t])}}},1411:(e,t,r)=>{r.r(t),r.d(t,{BitbucketIntegration:()=>BitbucketIntegration});var i=r(1646),s=r(9709);let o=r(3758).Mt[i.Q7.Bitbucket],a=Object.freeze({id:o.id,scopes:o.scopes});let BitbucketIntegration=class BitbucketIntegration extends s.T5{authProvider=a;id=i.Q7.Bitbucket;key=this.id;name="Bitbucket";get domain(){return o.domain}get apiBaseUrl(){return"https://api.bitbucket.org/2.0"}async mergeProviderPullRequest(e,t,r){return Promise.resolve(!1)}async getProviderAccountForCommit(e,t,r,i){return Promise.resolve(void 0)}async getProviderAccountForEmail(e,t,r,i){return Promise.resolve(void 0)}async getProviderDefaultBranch(e,t){return Promise.resolve(void 0)}async getProviderIssueOrPullRequest(e,t,r){return Promise.resolve(void 0)}async getProviderIssue(e,t,r){return Promise.resolve(void 0)}async getProviderPullRequestForBranch(e,t,r,i){return Promise.resolve(void 0)}async getProviderPullRequestForCommit(e,t,r){return Promise.resolve(void 0)}async getProviderRepositoryMetadata(e,t,r){return Promise.resolve(void 0)}async searchProviderMyPullRequests(e,t){return Promise.resolve(void 0)}async searchProviderMyIssues(e,t){return Promise.resolve(void 0)}}},871:(e,t,r)=>{r.r(t),r.d(t,{GitHubEnterpriseIntegration:()=>GitHubEnterpriseIntegration,GitHubIntegration:()=>GitHubIntegration});var i=r(1646),s=r(4007),o=r(9064),a=r(9709),n=r(3158),l=r(3758),u=Object.defineProperty,c=Object.getOwnPropertyDescriptor;let d=l.Mt[i.Q7.GitHub],h=Object.freeze({id:d.id,scopes:d.scopes}),g=l.Mt[i.PY.GitHubEnterprise],p=Object.freeze({id:g.id,scopes:g.scopes}),m=l.Mt[i.PY.CloudGitHubEnterprise],f=Object.freeze({id:m.id,scopes:m.scopes});let GitHubIntegrationBase=class GitHubIntegrationBase extends a.T5{async getProviderAccountForCommit({accessToken:e},t,r,i){return(await this.container.github)?.getAccountForCommit(this,e,t.owner,t.name,r,{...i,baseUrl:this.apiBaseUrl})}async getProviderAccountForEmail({accessToken:e},t,r,i){return(await this.container.github)?.getAccountForEmail(this,e,t.owner,t.name,r,{...i,baseUrl:this.apiBaseUrl})}async getProviderDefaultBranch({accessToken:e},t){return(await this.container.github)?.getDefaultBranch(this,e,t.owner,t.name,{baseUrl:this.apiBaseUrl})}async getProviderIssueOrPullRequest({accessToken:e},t,r){return(await this.container.github)?.getIssueOrPullRequest(this,e,t.owner,t.name,Number(r),{baseUrl:this.apiBaseUrl})}async getProviderIssue({accessToken:e},t,r){return(await this.container.github)?.getIssue(this,e,t.owner,t.name,Number(r),{baseUrl:this.apiBaseUrl,includeBody:!0})}async getProviderPullRequest({accessToken:e},t,r){return(await this.container.github)?.getPullRequest(this,e,t.owner,t.name,parseInt(r,10),{baseUrl:this.apiBaseUrl})}async getProviderPullRequestForBranch({accessToken:e},t,i,s){let{include:o,...a}=s??{},n=(await Promise.resolve().then(r.bind(r,3744))).toGitHubPullRequestState;return(await this.container.github)?.getPullRequestForBranch(this,e,t.owner,t.name,i,{...a,include:o?.map(e=>n(e)),baseUrl:this.apiBaseUrl})}async getProviderPullRequestForCommit({accessToken:e},t,r){return(await this.container.github)?.getPullRequestForCommit(this,e,t.owner,t.name,r,{baseUrl:this.apiBaseUrl})}async getProviderRepositoryMetadata({accessToken:e},t,r){return(await this.container.github)?.getRepositoryMetadata(this,e,t.owner,t.name,{baseUrl:this.apiBaseUrl},r)}async searchProviderMyPullRequests({accessToken:e},t,r,i){return(await this.container.github)?.searchMyPullRequests(this,e,{repos:t?.map(e=>`${e.owner}/${e.name}`),baseUrl:this.apiBaseUrl,silent:i},r)}async searchProviderMyIssues({accessToken:e},t,r){return(await this.container.github)?.searchMyIssues(this,e,{repos:t?.map(e=>`${e.owner}/${e.name}`),baseUrl:this.apiBaseUrl,includeBody:!0},r)}async searchProviderPullRequests({accessToken:e},t,r,i){return(await this.container.github)?.searchPullRequests(this,e,{search:t,repos:r?.map(e=>`${e.owner}/${e.name}`),baseUrl:this.apiBaseUrl},i)}async mergeProviderPullRequest({accessToken:e},t,r){let i=t.nodeId,s=t.refs?.head?.sha;return null!=i&&null!=s&&((await this.container.github)?.mergePullRequest(this,e,i,s,{mergeMethod:r?.mergeMethod,baseUrl:this.apiBaseUrl})??!1)}async getProviderCurrentAccount({accessToken:e},t){return(await this.container.github)?.getCurrentAccount(this,e,{...t,baseUrl:this.apiBaseUrl})}};let GitHubIntegration=class GitHubIntegration extends GitHubIntegrationBase{authProvider=h;id=i.Q7.GitHub;key=this.id;name="GitHub";get domain(){return d.domain}get apiBaseUrl(){return"https://api.github.com"}access(){return Promise.resolve(!0)}async refresh(){let e=await this.authenticationService.get(this.authProvider.id),t=await e.getSession(this.authProviderDescriptor);null==t&&this.maybeConnected?this.disconnect({silent:!0}):(t?.accessToken!==this._session?.accessToken&&(this._session=void 0),super.refresh())}getProviderPullRequestIdentityFromMaybeUrl(e){return(0,n.h)(e)}};let GitHubEnterpriseIntegration=class GitHubEnterpriseIntegration extends GitHubIntegrationBase{constructor(e,t,r,s,o){super(e,t,r),this._domain=s,this.id=o,this.key=`${this.id}:${this.domain}`,this.authProvider=this.id===i.PY.GitHubEnterprise?p:f}authProvider;key;name="GitHub Enterprise";get domain(){return this._domain}get apiBaseUrl(){return`https://${this._domain}/api/v3`}async connect(e){return!!await (0,o.KH)(this.container,`Rich integration with ${this.name} is a Pro feature.`,{source:"integrations",detail:{action:"connect",integration:this.id}})&&super.connect(e)}};((e,t,r,i)=>{for(var s,o=c(t,r),a=e.length-1;a>=0;a--)(s=e[a])&&(o=s(t,r,o)||o);return i&&o&&u(t,r,o)})([(0,s.Rm)()],GitHubEnterpriseIntegration.prototype,"connect",1)},9577:(e,t,r)=>{function i(){return"object"==typeof navigator&&"userAgent"in navigator?navigator.userAgent:"object"==typeof process&&void 0!==process.version?`Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`:"<environment undetectable>"}r.r(t),r.d(t,{GitHubApi:()=>GitHubApi});var s=`octokit-endpoint.js/0.0.0-development ${i()}`;function o(e){for(let t in e)void 0===e[t]&&delete e[t];return e}function a(e,t,r){var i;if("string"==typeof t){let[e,i]=t.split(" ");r=Object.assign(i?{method:e,url:i}:{url:e},r)}else r=Object.assign({},t);r.headers=(i=r.headers)?Object.keys(i).reduce((e,t)=>(e[t.toLowerCase()]=i[t],e),{}):{},o(r),o(r.headers);let s=function e(t,r){let i=Object.assign({},t);return Object.keys(r).forEach(s=>{(function(e){if("object"!=typeof e||null===e||"[object Object]"!==Object.prototype.toString.call(e))return!1;let t=Object.getPrototypeOf(e);if(null===t)return!0;let r=Object.prototype.hasOwnProperty.call(t,"constructor")&&t.constructor;return"function"==typeof r&&r instanceof r&&Function.prototype.call(r)===Function.prototype.call(e)})(r[s])&&s in t?i[s]=e(t[s],r[s]):Object.assign(i,{[s]:r[s]})}),i}(e||{},r);return"/graphql"===r.url&&(e&&e.mediaType.previews?.length&&(s.mediaType.previews=e.mediaType.previews.filter(e=>!s.mediaType.previews.includes(e)).concat(s.mediaType.previews)),s.mediaType.previews=(s.mediaType.previews||[]).map(e=>e.replace(/-preview/,""))),s}var n=/\{[^}]+\}/g;function l(e){return e.replace(/^\W+|\W+$/g,"").split(/,/)}function u(e,t){let r={__proto__:null};for(let i of Object.keys(e))-1===t.indexOf(i)&&(r[i]=e[i]);return r}function c(e){return e.split(/(%[0-9A-Fa-f]{2})/g).map(function(e){return/%[0-9A-Fa-f]/.test(e)||(e=encodeURI(e).replace(/%5B/g,"[").replace(/%5D/g,"]")),e}).join("")}function d(e){return encodeURIComponent(e).replace(/[!'()*]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function h(e,t,r){return(t="+"===e||"#"===e?c(t):d(t),r)?d(r)+"="+t:t}function g(e){return null!=e}function p(e){return";"===e||"&"===e||"?"===e}function m(e,t){var r=["+","#",".","/",";","?","&"];return"/"===(e=e.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g,function(e,i,s){if(!i)return c(s);{let e="",s=[];if(-1!==r.indexOf(i.charAt(0))&&(e=i.charAt(0),i=i.substr(1)),i.split(/,/g).forEach(function(r){var i=/([^:\*]*)(?::(\d+)|(\*))?/.exec(r);s.push(function(e,t,r,i){var s=e[r],o=[];if(g(s)&&""!==s){if("string"==typeof s||"number"==typeof s||"boolean"==typeof s)s=s.toString(),i&&"*"!==i&&(s=s.substring(0,parseInt(i,10))),o.push(h(t,s,p(t)?r:""));else if("*"===i)Array.isArray(s)?s.filter(g).forEach(function(e){o.push(h(t,e,p(t)?r:""))}):Object.keys(s).forEach(function(e){g(s[e])&&o.push(h(t,s[e],e))});else{let e=[];Array.isArray(s)?s.filter(g).forEach(function(r){e.push(h(t,r))}):Object.keys(s).forEach(function(r){g(s[r])&&(e.push(d(r)),e.push(h(t,s[r].toString())))}),p(t)?o.push(d(r)+"="+e.join(",")):0!==e.length&&o.push(e.join(","))}}else";"===t?g(s)&&o.push(d(r)):""===s&&("&"===t||"?"===t)?o.push(d(r)+"="):""===s&&o.push("");return o}(t,e,i[1],i[2]||i[3]))}),!e||"+"===e)return s.join(",");var o=",";return"?"===e?o="&":"#"!==e&&(o=e),(0!==s.length?e:"")+s.join(o)}}))?e:e.replace(/\/$/,"")}function f(e){let t,r=e.method.toUpperCase(),i=(e.url||"/").replace(/:([a-z]\w+)/g,"{$1}"),s=Object.assign({},e.headers),o=u(e,["method","baseUrl","url","headers","request","mediaType"]),a=function(e){let t=e.match(n);return t?t.map(l).reduce((e,t)=>e.concat(t),[]):[]}(i);i=({expand:m.bind(null,i)}).expand(o),/^http/.test(i)||(i=e.baseUrl+i);let c=u(o,Object.keys(e).filter(e=>a.includes(e)).concat("baseUrl"));if(!/application\/octet-stream/i.test(s.accept)&&(e.mediaType.format&&(s.accept=s.accept.split(/,/).map(t=>t.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,`application/vnd$1$2.${e.mediaType.format}`)).join(",")),i.endsWith("/graphql")&&e.mediaType.previews?.length)){let t=s.accept.match(/[\w-]+(?=-preview)/g)||[];s.accept=t.concat(e.mediaType.previews).map(t=>{let r=e.mediaType.format?`.${e.mediaType.format}`:"+json";return`application/vnd.github.${t}-preview${r}`}).join(",")}return["GET","HEAD"].includes(r)?i=function(e,t){let r=/\?/.test(e)?"&":"?",i=Object.keys(t);return 0===i.length?e:e+r+i.map(e=>"q"===e?"q="+t.q.split("+").map(encodeURIComponent).join("+"):`${e}=${encodeURIComponent(t[e])}`).join("&")}(i,c):"data"in c?t=c.data:Object.keys(c).length&&(t=c),s["content-type"]||void 0===t||(s["content-type"]="application/json; charset=utf-8"),["PATCH","PUT"].includes(r)&&void 0===t&&(t=""),Object.assign({method:r,url:i,headers:s},void 0!==t?{body:t}:null,e.request?{request:e.request}:null)}function v(e,t,r){return f(a(e,t,r))}var y=function e(t,r){let i=a(t,r);return Object.assign(v.bind(null,i),{DEFAULTS:i,defaults:e.bind(null,i),merge:a.bind(null,i),parse:f})}(null,{method:"GET",baseUrl:"https://api.github.com",headers:{accept:"application/vnd.github.v3+json","user-agent":s},mediaType:{format:""}}),w=r(7115);let RequestError=class RequestError extends Error{name;status;request;response;constructor(e,t,r){super(e),this.name="HttpError",this.status=Number.parseInt(t),Number.isNaN(this.status)&&(this.status=0),"response"in r&&(this.response=r.response);let i=Object.assign({},r.request);r.request.headers.authorization&&(i.headers=Object.assign({},r.request.headers,{authorization:r.request.headers.authorization.replace(/ .*$/," [REDACTED]")})),i.url=i.url.replace(/\bclient_secret=\w+/g,"client_secret=[REDACTED]").replace(/\baccess_token=\w+/g,"access_token=[REDACTED]"),this.request=i}};async function b(e){let t;let r=e.request?.fetch||globalThis.fetch;if(!r)throw Error("fetch is not set. Please pass a fetch implementation as new Octokit({ request: { fetch }}). Learn more at https://github.com/octokit/octokit.js/#fetch-missing");let i=e.request?.log||console,s=e.request?.parseSuccessResponseBody!==!1,o=function(e){if("object"!=typeof e||null===e||"[object Object]"!==Object.prototype.toString.call(e))return!1;let t=Object.getPrototypeOf(e);if(null===t)return!0;let r=Object.prototype.hasOwnProperty.call(t,"constructor")&&t.constructor;return"function"==typeof r&&r instanceof r&&Function.prototype.call(r)===Function.prototype.call(e)}(e.body)||Array.isArray(e.body)?JSON.stringify(e.body):e.body,a=Object.fromEntries(Object.entries(e.headers).map(([e,t])=>[e,String(t)]));try{t=await r(e.url,{method:e.method,body:o,redirect:e.request?.redirect,headers:a,signal:e.request?.signal,...e.body&&{duplex:"half"}})}catch(i){let t="Unknown Error";if(i instanceof Error){if("AbortError"===i.name)throw i.status=500,i;t=i.message,"TypeError"===i.name&&"cause"in i&&(i.cause instanceof Error?t=i.cause.message:"string"==typeof i.cause&&(t=i.cause))}let r=new RequestError(t,500,{request:e});throw r.cause=i,r}let n=t.status,l=t.url,u={};for(let[e,r]of t.headers)u[e]=r;let c={url:l,status:n,headers:u,data:""};if("deprecation"in u){let t=u.link&&u.link.match(/<([^>]+)>; rel="deprecation"/),r=t&&t.pop();i.warn(`[@octokit/request] "${e.method} ${e.url}" is deprecated. It is scheduled to be removed on ${u.sunset}${r?`. See ${r}`:""}`)}if(204===n||205===n)return c;if("HEAD"===e.method){if(n<400)return c;throw new RequestError(t.statusText,n,{response:c,request:e})}if(304===n)throw c.data=await P(t),new RequestError("Not modified",n,{response:c,request:e});if(n>=400)throw c.data=await P(t),new RequestError(function(e){if("string"==typeof e)return e;if(e instanceof ArrayBuffer)return"Unknown error";if("message"in e){let t="documentation_url"in e?` - ${e.documentation_url}`:"";return Array.isArray(e.errors)?`${e.message}: ${e.errors.map(e=>JSON.stringify(e)).join(", ")}${t}`:`${e.message}${t}`}return`Unknown error: ${JSON.stringify(e)}`}(c.data),n,{response:c,request:e});return c.data=s?await P(t):t.body,c}async function P(e){let t=e.headers.get("content-type");if(!t)return e.text().catch(()=>"");let r=(0,w.xL)(t);if("application/json"===r.type||"application/scim+json"===r.type){let t="";try{return t=await e.text(),JSON.parse(t)}catch{return t}}else if(r.type.startsWith("text/")||r.parameters.charset?.toLowerCase()==="utf-8")return e.text().catch(()=>"");else return e.arrayBuffer().catch(()=>new ArrayBuffer(0))}var R=function e(t,r){let i=t.defaults(r);return Object.assign(function(t,r){let s=i.merge(t,r);if(!s.request||!s.request.hook)return b(i.parse(s));let o=(e,t)=>b(i.parse(i.merge(e,t)));return Object.assign(o,{endpoint:i,defaults:e.bind(null,i)}),s.request.hook(o,s)},{endpoint:i,defaults:e.bind(null,i)})}(y,{headers:{"user-agent":`octokit-request.js/0.0.0-development ${i()}`}}),$=class extends Error{constructor(e,t,r){super(`Request failed due to following response errors:
`+r.errors.map(e=>` - ${e.message}`).join("\n")),this.request=e,this.headers=t,this.response=r,this.errors=r.errors,this.data=r.data,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}name="GraphqlResponseError";errors;data},C=["method","baseUrl","url","headers","request","query","mediaType"],A=["query","method","url"],q=/\/api\/v3\/?$/,S=function e(t,r){let i=t.defaults(r);return Object.assign((e,t)=>(function(e,t,r){if(r){if("string"==typeof t&&"query"in r)return Promise.reject(Error('[@octokit/graphql] "query" cannot be used as variable name'));for(let e in r)if(A.includes(e))return Promise.reject(Error(`[@octokit/graphql] "${e}" cannot be used as variable name`))}let i="string"==typeof t?Object.assign({query:t},r):t,s=Object.keys(i).reduce((e,t)=>(C.includes(t)?e[t]=i[t]:(e.variables||(e.variables={}),e.variables[t]=i[t]),e),{}),o=i.baseUrl||e.endpoint.DEFAULTS.baseUrl;return q.test(o)&&(s.url=o.replace(q,"/api/graphql")),e(s).then(e=>{if(e.data.errors){let t={};for(let r of Object.keys(e.headers))t[r]=e.headers[r];throw new $(s,t,e.data)}return e.data.data})})(i,e,t),{defaults:e.bind(null,i),endpoint:i.endpoint})}(R,{headers:{"user-agent":`octokit-graphql.js/0.0.0-development ${i()}`},method:"POST",url:"/graphql"}),F=r(1398),U=r(7223),D=r(2856),I=r(4039),G=r(3444),k=r(3234),E=r(8049),T=r(6468),_=r(4143),j=r(4007),O=r(5270),x=r(4064),H=r(6450),B=r(1165),L=r(7603),M=r(7074),z=r(3744),N=Object.defineProperty,Q=Object.getOwnPropertyDescriptor,V=(e,t,r,i)=>{for(var s,o=i>1?void 0:i?Q(t,r):t,a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i?s(t,r,o):s(o))||o);return i&&o&&N(t,r,o),o};let Y=Object.freeze({values:[]}),W=Object.freeze({ranges:[]}),J=`
closed
closedAt
createdAt
id
number
state
title
updatedAt
url
`,K=`
${J}
author {
	login
	avatarUrl(size: $avatarSize)
	url
}
baseRefName
baseRefOid
headRefName
headRefOid
headRepository {
	name
	owner {
		login
	}
	url
}
isCrossRepository
isDraft
mergedAt
permalink
repository {
	isFork
	name
	owner {
		login
	}
	url
	viewerPermission
}
`,X=`
${K}
additions
assignees(first: 10) {
	nodes {
		login
		avatarUrl(size: $avatarSize)
		url
	}
}
checksUrl
deletions
mergeable
mergedBy {
	login
}
reviewDecision
latestReviews(first: 10) {
	nodes {
		author {
			login
			avatarUrl(size: $avatarSize)
			url
		}
		state
	}
}
reviewRequests(first: 10) {
	nodes {
		asCodeOwner
		id
		requestedReviewer {
			... on User {
				login
				avatarUrl(size: $avatarSize)
				url
			}
		}
	}
}
commits(last: 1) {
	nodes {
		commit {
			statusCheckRollup {
				state
			}
		}
	}
}
totalCommentsCount
viewerCanUpdate
`,Z=`
${J}
assignees(first: 100) {
	nodes {
		login
		url
		avatarUrl(size: $avatarSize)
	}
}
author {
	login
	avatarUrl
	url
}
comments {
	totalCount
}
labels(first: 20) {
	nodes {
		color
		name
	}
}
reactions(content: THUMBS_UP) {
	totalCount
}
repository {
	name
	owner {
		login
	}
	viewerPermission
	url
}
`;let GitHubApi=class GitHubApi{_onDidReauthenticate=new F.EventEmitter;get onDidReauthenticate(){return this._onDidReauthenticate.event}_disposable;constructor(e){this._disposable=_.H.onDidChangeAny(e=>{(_.H.changedCore(e,["http.proxy","http.proxyStrictSSL"])||_.H.changed(e,["outputLevel","proxy"]))&&this.resetCaches()})}dispose(){this._disposable.dispose()}resetCaches(){this._proxyAgent=null,this._defaults.clear(),this._enterpriseVersions.clear()}_proxyAgent=null;get proxyAgent(){if(!D.HZ)return null===this._proxyAgent&&(this._proxyAgent=(0,U.cQ)()),this._proxyAgent}async getCurrentAccount(e,t,r){let i=(0,H.dQ)();try{let s=`query getCurrentAccount($avatarSize: Int) {
	viewer {
		name
		email
		login
		avatarUrl(size: $avatarSize)
	}
}`,o=await this.graphql(e,t,s,{...r},i);if(o?.viewer?.login==null)return;return{provider:e,id:o.viewer.login,name:o.viewer.name??void 0,email:o.viewer.email??void 0,avatarUrl:!o.viewer.avatarUrl||ee(r)?o.viewer.avatarUrl??void 0:o.viewer.email&&r?.baseUrl!=null?await this.createEnterpriseAvatarUrl(e,t,r.baseUrl,o.viewer.email,r.avatarSize):void 0,username:o.viewer.login??void 0}}catch(t){if(t instanceof I.LN)return;throw this.handleException(t,e,i)}}async getAccountForCommit(e,t,r,i,s,o){let a=(0,H.dQ)();try{let n=`query getAccountForCommit(
	$owner: String!
	$repo: String!
	$ref: GitObjectID!
	$avatarSize: Int
) {
	repository(name: $repo, owner: $owner) {
		object(oid: $ref) {
			... on Commit {
				author {
					name
					email
					avatarUrl(size: $avatarSize)
					user {
						login
					}
				}
			}
		}
	}
}`,l=await this.graphql(e,t,n,{...o,owner:r,repo:i,ref:s},a),u=l?.repository?.object?.author;if(null==u)return;return{provider:e,...u?.user?.login!=null?{id:u.user.login,username:u.user.login}:{id:void 0,username:void 0},name:u.name??void 0,email:u.email??void 0,avatarUrl:!u.avatarUrl||ee(o)?u.avatarUrl??void 0:u.email&&o?.baseUrl!=null?await this.createEnterpriseAvatarUrl(e,t,o.baseUrl,u.email,o.avatarSize):void 0}}catch(t){if(t instanceof I.LN)return;throw this.handleException(t,e,a)}}async getAccountForEmail(e,t,r,i,s,o){let a=(0,H.dQ)();try{let n=`query getAccountForEmail(
	$emailQuery: String!
	$avatarSize: Int
) {
	search(type: USER, query: $emailQuery, first: 1) {
		nodes {
			... on User {
				name
				email
				avatarUrl(size: $avatarSize)
				login
			}
		}
	}
}`,l=await this.graphql(e,t,n,{...o,owner:r,repo:i,emailQuery:`in:email ${s}`},a),u=l?.search?.nodes?.[0];if(u?.login==null)return;return{provider:e,id:u.login,name:u.name??void 0,email:u.email??void 0,avatarUrl:!u.avatarUrl||ee(o)?u.avatarUrl??void 0:u.email&&o?.baseUrl!=null?await this.createEnterpriseAvatarUrl(e,t,o.baseUrl,u.email,o.avatarSize):void 0,username:u.login??void 0}}catch(t){if(t instanceof I.LN)return;throw this.handleException(t,e,a)}}async getDefaultBranch(e,t,r,i,s){let o=(0,H.dQ)();try{let a=`query getDefaultBranch(
	$owner: String!
	$repo: String!
) {
	repository(name: $repo, owner: $owner) {
		defaultBranchRef {
			name
		}
	}
}`,n=await this.graphql(e,t,a,{...s,owner:r,repo:i},o),l=n?.repository?.defaultBranchRef?.name??void 0;if(null==l)return;return{provider:e,name:l}}catch(t){if(t instanceof I.LN)return;throw this.handleException(t,e,o)}}async getIssueOrPullRequest(e,t,r,i,s,o){let a=(0,H.dQ)();try{let n=`query getIssueOrPullRequest(
	$owner: String!
	$repo: String!
	$number: Int!
) {
	repository(name: $repo, owner: $owner) {
		issueOrPullRequest(number: $number) {
			__typename
			... on Issue {
				${J}
			}
			... on PullRequest {
				${J}
			}
		}
	}
}`,l=await this.graphql(e,t,n,{...o,owner:r,repo:i,number:s},a),u=l?.repository?.issueOrPullRequest;if(null==u)return;return{provider:e,type:"PullRequest"===u.__typename?"pullrequest":"issue",id:String(u.number),nodeId:u.id,createdDate:new Date(u.createdAt),updatedDate:new Date(u.updatedAt),title:u.title,closed:u.closed,closedDate:null==u.closedAt?void 0:new Date(u.closedAt),url:u.url,state:(0,z.fromGitHubIssueOrPullRequestState)(u.state)}}catch(t){if(t instanceof I.LN)return;throw this.handleException(t,e,a)}}async getIssue(e,t,r,i,s,o){let a=(0,H.dQ)();try{let n=`query getIssue(
			$owner: String!
			$repo: String!
			$number: Int!
			$avatarSize: Int
		) {
			repository(name: $repo, owner: $owner) {
				issue(number: $number) {
					${Z}${o?.includeBody?`
						body
						`:""}
				}
			}
		}`,l=await this.graphql(e,t,n,{...o,owner:r,repo:i,number:s},a);if(l?.repository?.issue==null)return;return(0,z.fromGitHubIssue)(l.repository.issue,e)}catch(t){if(t instanceof I.LN)return;throw this.handleException(t,e,a)}}async getPullRequest(e,t,r,i,s,o){let a=(0,H.dQ)();try{let n=`query getPullRequest(
	$owner: String!
	$repo: String!
	$number: Int!
	$avatarSize: Int
) {
	repository(name: $repo, owner: $owner) {
		pullRequest(number: $number) {
			${X}
		}
	}
}`,l=await this.graphql(e,t,n,{...o,owner:r,repo:i,number:s},a);if(l?.repository?.pullRequest==null)return;return(0,z.fromGitHubPullRequestLite)(l.repository.pullRequest,e)}catch(t){if(t instanceof I.LN)return;throw this.handleException(t,e,a)}}async getPullRequestForBranch(e,t,r,i,s,o){let a=(0,H.dQ)();try{let n=`query getPullRequestForBranch(
	$owner: String!
	$repo: String!
	$branch: String!
	$limit: Int!
	$include: [PullRequestState!]
	$avatarSize: Int
) {
	repository(name: $repo, owner: $owner) {
		ref(qualifiedName: $branch) {
			associatedPullRequests(first: $limit, orderBy: {field: UPDATED_AT, direction: DESC}, states: $include) {
				nodes {
					${K}
				}
			}
		}
	}
}`,l=await this.graphql(e,t,n,{...o,owner:r,repo:i,branch:`refs/heads/${s}`,limit:10},a),u=l?.repository?.ref?.associatedPullRequests?.nodes?.filter(e=>null!=e&&(!e.repository.isFork||e.repository.owner.login===r));if(null==u||0===u.length)return;return u.length>1&&u.sort((e,t)=>(e.repository.owner.login===r?-1:1)-(t.repository.owner.login===r?-1:1)||("OPEN"===e.state?-1:1)-("OPEN"===t.state?-1:1)||new Date(t.updatedAt).getTime()-new Date(e.updatedAt).getTime()),(0,z.fromGitHubPullRequestLite)(u[0],e)}catch(t){if(t instanceof I.LN)return;throw this.handleException(t,e,a)}}async getPullRequestForCommit(e,t,r,i,s,o,a){let n=(0,H.dQ)();try{let l=`query getPullRequestForCommit(
	$owner: String!
	$repo: String!
	$ref: GitObjectID!
	$avatarSize: Int
) {
	repository(name: $repo, owner: $owner) {
		object(oid: $ref) {
			... on Commit {
				associatedPullRequests(first: 2, orderBy: {field: UPDATED_AT, direction: DESC}) {
					nodes {
						${K}
					}
				}
			}
		}
	}
}`,u=await this.graphql(e,t,l,{...o,owner:r,repo:i,ref:s},n,a),c=u?.repository?.object?.associatedPullRequests?.nodes?.filter(e=>null!=e&&(!e.repository.isFork||e.repository.owner.login===r));if(null==c||0===c.length)return;return c.length>1&&c.sort((e,t)=>(e.repository.owner.login===r?-1:1)-(t.repository.owner.login===r?-1:1)||("MERGED"===e.state?-1:1)-("MERGED"===t.state?-1:1)||new Date(t.updatedAt).getTime()-new Date(e.updatedAt).getTime()),(0,z.fromGitHubPullRequestLite)(c[0],e)}catch(t){if(t instanceof I.LN)return;throw this.handleException(t,e,n)}}async getRepositoryMetadata(e,t,r,i,s,o){let a=(0,H.dQ)();try{let n=`query getRepositoryMetadata(
	$owner: String!
	$repo: String!
) {
	repository(name: $repo, owner: $owner) {
		owner {
			login
		}
		name
		parent {
			owner {
				login
			}
			name
		}
	}
}`,l=await this.graphql(e,t,n,{...s,owner:r,repo:i},a,o),u=l?.repository??void 0;if(null==u)return;return{provider:e,owner:u.owner.login,name:u.name,isFork:null!=u.parent,parent:null!=u.parent?{owner:u.parent.owner.login,name:u.parent.name}:void 0}}catch(t){if(t instanceof I.LN)return;throw this.handleException(t,e,a)}}async getBlame(e,t,r,i,s){let o=(0,H.dQ)();try{let a=`query getBlameRanges(
	$owner: String!
	$repo: String!
	$ref: String!
	$path: String!
) {
	viewer { name }
	repository(owner: $owner, name: $repo) {
		object(expression: $ref) {
			...on Commit {
				blame(path: $path) {
					ranges {
						startingLine
						endingLine
						commit {
							oid
							parents(first: 3) { nodes { oid } }
							message
							additions
							changedFiles
							deletions
							author {
								avatarUrl
								date
								email
								name
							}
							committer {
								date
								email
								name
							}
						}
					}
				}
			}
		}
	}
}`,n=await this.graphql(void 0,e,a,{owner:t,repo:r,ref:i,path:s},o);if(null==n)return W;let l=n.repository?.object?.blame?.ranges;if(null==l||0===l.length)return{ranges:[],viewer:n.viewer?.name};return{ranges:l,viewer:n.viewer?.name}}catch(e){if(e instanceof I.LN)return W;throw this.handleException(e,void 0,o)}}async getBranches(e,t,r,i){let s=(0,H.dQ)();try{let o=`query getBranches(
	$owner: String!
	$repo: String!
	$branchQuery: String
	$cursor: String
	$limit: Int = 100
) {
	repository(owner: $owner, name: $repo) {
		refs(query: $branchQuery, refPrefix: "refs/heads/", first: $limit, after: $cursor) {
			pageInfo {
				endCursor
				hasNextPage
			}
			nodes {
				name
				target {
					oid
					...on Commit {
						authoredDate
						committedDate
					}
				}
			}
		}
	}
}`,a=await this.graphql(void 0,e,o,{owner:t,repo:r,branchQuery:i?.query,cursor:i?.cursor,limit:Math.min(100,i?.limit??100)},s);if(null==a)return Y;let n=a.repository?.refs;if(null==n)return Y;return{paging:{cursor:n.pageInfo.endCursor,more:n.pageInfo.hasNextPage},values:n.nodes}}catch(e){if(e instanceof I.LN)return Y;throw this.handleException(e,void 0,s)}}async getCommit(e,t,r,i){let s=(0,H.dQ)();try{let o=await this.request(void 0,e,"GET /repos/{owner}/{repo}/commits/{ref}",{owner:t,repo:r,ref:i},s),a=o?.data;if(null==a)return;let{commit:n}=a;return{oid:a.sha,parents:{nodes:a.parents.map(e=>({oid:e.sha}))},message:n.message,additions:a.stats?.additions,changedFiles:a.files?.length,deletions:a.stats?.deletions,author:{avatarUrl:a.author?.avatar_url??void 0,date:n.author?.date??new Date().toString(),email:n.author?.email??void 0,name:n.author?.name??""},committer:{date:n.committer?.date??new Date().toString(),email:n.committer?.email??void 0,name:n.committer?.name??""},files:a.files}}catch(e){if(e instanceof I.LN)return;throw this.handleException(e,void 0,s)}}async getCommitForFile(e,t,r,i,s){if((0,E.HH)(i))return this.getCommit(e,t,r,i);let o=await this.getCommits(e,t,r,i,{limit:1,path:s});if(0!==o.values.length)return{...await this.getCommit(e,t,r,o.values[0].oid)??o.values[0],viewer:o.viewer}}async getBranchesWithCommits(e,t,r,i,s,o){let a=(0,H.dQ)();try{let n=`query getBranchesWithCommits(
	$owner: String!
	$repo: String!
	$since: GitTimestamp!
	$until: GitTimestamp!
) {
	repository(owner: $owner, name: $repo) {
		refs(first: 20, refPrefix: "refs/heads/") {
			nodes {
				name
				target {
					... on Commit {
						history(first: ${"contains"===s?10:1}, since: $since until: $until) {
							nodes { oid }
						}
					}
				}
			}
		}
	}
}`,l=await this.graphql(void 0,e,n,{owner:t,repo:r,since:o?.toISOString(),until:o?.toISOString()},a),u=l?.repository?.refs?.nodes;if(null==u)return[];let c=[];for(let e of u)for(let t of e.target.history.nodes)if(i.includes(t.oid)){c.push(e.name);break}return c}catch(e){if(e instanceof I.LN)return[];throw this.handleException(e,void 0,a)}}async getCommitCount(e,t,r,i){let s=(0,H.dQ)();try{let o=`query getCommitCount(
	$owner: String!
	$repo: String!
	$ref: String!
) {
	repository(owner: $owner, name: $repo) {
		ref(qualifiedName: $ref) {
			target {
				... on Commit {
					history(first: 1) {
						totalCount
					}
				}
			}
		}
	}
}`,a=await this.graphql(void 0,e,o,{owner:t,repo:r,ref:i},s);return a?.repository?.ref?.target.history.totalCount}catch(e){if(e instanceof I.LN)return;throw this.handleException(e,void 0,s)}}async getBranchWithCommit(e,t,r,i,s,o,a){let n=(0,H.dQ)();try{let l=`query getBranchWithCommit(
	$owner: String!
	$repo: String!
	$ref: String!
	$since: GitTimestamp!
	$until: GitTimestamp!
) {
	repository(owner: $owner, name: $repo) {
		ref(qualifiedName: $ref) {
			target {
				... on Commit {
					history(first: ${"contains"===o?100:1}, since: $since until: $until) {
						nodes { oid }
					}
				}
			}
		}
	}
}`,u=await this.graphql(void 0,e,l,{owner:t,repo:r,ref:`refs/heads/${i}`,since:a?.toISOString(),until:a?.toISOString()},n),c=u?.repository?.ref.target.history.nodes;if(null==c)return[];let d=[];for(let e of c)if(s.includes(e.oid)){d.push(i);break}return d}catch(e){if(e instanceof I.LN)return[];throw this.handleException(e,void 0,n)}}async getCommits(e,t,r,i,s){let o=(0,H.dQ)();if(s?.limit===1&&s?.path==null)return this.getCommitsCoreSingle(e,t,r,i);if((0,E.p8)(i))return this.getCommitsCoreRange(e,t,r,i);try{let a;let n=`query getCommits(
	$owner: String!
	$repo: String!
	$ref: String!
	$path: String
	$author: CommitAuthor
	$after: String
	$before: String
	$limit: Int = 100
	$since: GitTimestamp
	$until: GitTimestamp
) {
	viewer { name }
	repository(name: $repo, owner: $owner) {
		object(expression: $ref) {
			... on Commit {
				history(first: $limit, author: $author, path: $path, after: $after, before: $before, since: $since, until: $until) {
					pageInfo {
						startCursor
						endCursor
						hasNextPage
						hasPreviousPage
					}
					nodes {
						... on Commit {
							oid
							message
							parents(first: 3) { nodes { oid } }
							additions
							changedFiles
							deletions
							author {
								avatarUrl
								date
								email
								name
							}
							committer {
								 date
								 email
								 name
							 }
						}
					}
				}
			}
		}
	}
}`;if(s?.authors!=null){if(1===s.authors.length){let[e]=s.authors;a={id:e.id,emails:e.email?[e.email]:void 0}}else{let e=s.authors.filter(e=>e.email).map(e=>e.email);a=e.length?{emails:e}:void 0}}let l=await this.graphql(void 0,e,n,{owner:t,repo:r,ref:i,after:s?.after,before:s?.before,path:s?.path,author:a,limit:Math.min(100,s?.limit??100),since:"string"==typeof s?.since?s?.since:s?.since?.toISOString(),until:"string"==typeof s?.until?s?.until:s?.until?.toISOString()},o),u=l?.repository?.object?.history;if(null==u)return Y;return{paging:null!=u.pageInfo.endCursor?{cursor:u.pageInfo.endCursor??void 0,more:u.pageInfo.hasNextPage}:void 0,values:u.nodes,viewer:l?.viewer.name}}catch(e){if(e instanceof I.LN)return Y;throw this.handleException(e,void 0,o)}}async getCommitsCoreRange(e,t,r,i){let s=(0,H.dQ)();try{let s=await this.getComparison(e,t,r,i);if(null==s)return Y;return{values:s.commits?.map(e=>({oid:e.sha,parents:{nodes:e.parents.map(e=>({oid:e.sha}))},message:e.commit.message,author:{avatarUrl:e.author?.avatar_url??void 0,date:e.commit.author?.date??e.commit.author?.date??new Date().toString(),email:e.author?.email??e.commit.author?.email??void 0,name:e.author?.name??e.commit.author?.name??""},committer:{date:e.commit.committer?.date??new Date().toString(),email:e.committer?.email??e.commit.committer?.email??void 0,name:e.committer?.name??e.commit.committer?.name??""}})).reverse()}}catch(e){if(e instanceof I.LN)return Y;throw this.handleException(e,void 0,s)}}async getCommitsCoreSingle(e,t,r,i){let s=(0,H.dQ)();try{let o=`query getCommit(
	$owner: String!
	$repo: String!
	$ref: String!
) {
	viewer { name }
	repository(name: $repo owner: $owner) {
		object(expression: $ref) {
			...on Commit {
				oid
				parents(first: 3) { nodes { oid } }
				message
				additions
				changedFiles
				deletions
				author {
					avatarUrl
					date
					email
					name
				}
				committer {
					date
					email
					name
				}
			}
		}
	}
}`,a=await this.graphql(void 0,e,o,{owner:t,repo:r,ref:i},s);if(null==a)return Y;let n=a.repository?.object;return null!=n?{values:[n],viewer:a.viewer.name}:Y}catch(e){if(e instanceof I.LN)return Y;throw this.handleException(e,void 0,s)}}async getCommitRefs(e,t,r,i,s){let o=(0,H.dQ)();try{let a=`query getCommitRefs(
	$owner: String!
	$repo: String!
	$ref: String!
	$after: String
	$before: String
	$first: Int
	$last: Int
	$path: String
	$since: GitTimestamp
	$until: GitTimestamp
) {
	repository(name: $repo, owner: $owner) {
		object(expression: $ref) {
			... on Commit {
				history(first: $first, last: $last, path: $path, since: $since, until: $until, after: $after, before: $before) {
					pageInfo { startCursor, endCursor, hasNextPage, hasPreviousPage }
					totalCount
					nodes { oid }
				}
			}
		}
	}
}`,n=await this.graphql(void 0,e,a,{owner:t,repo:r,ref:i,path:s?.path,first:s?.first,last:s?.last,after:s?.after,before:s?.before,since:s?.since,until:s?.until},o),l=n?.repository?.object?.history;if(null==l)return;return{pageInfo:l.pageInfo,totalCount:l.totalCount,values:l.nodes}}catch(e){if(e instanceof I.LN)return;throw this.handleException(e,void 0,o)}}async getTagsWithCommit(e,t,r,i,s){let o=(0,H.dQ)();try{let a=`query getTagsWithCommit(
	$owner: String!
	$repo: String!
	$since: GitTimestamp!
	$until: GitTimestamp!
) {
	repository(owner: $owner, name: $repo) {
		refs(first: 20, refPrefix: "refs/tags/") {
			nodes {
				name
				target {
					... on Commit {
						history(first: 3, since: $since until: $until) {
							nodes { oid }
						}
					}
				}
			}
		}
	}
}`,n=await this.graphql(void 0,e,a,{owner:t,repo:r,since:s.toISOString(),until:s.toISOString()},o),l=n?.repository?.refs?.nodes;if(null==l)return[];let u=[];for(let e of l)for(let t of e.target.history.nodes)if(t.oid===i){u.push(e.name);break}return u}catch(e){if(e instanceof I.LN)return[];throw this.handleException(e,void 0,o)}}async getNextCommitRefs(e,t,r,i,s,o){let a;let n=await this.getCommitDate(e,t,r,o);if(null==n)return[];let l=await this.getCommitRefs(e,t,r,i,{path:s,first:1,since:n});if(null==l)return[];let u=`${l.pageInfo.startCursor.split(" ",1)[0]} ${l.totalCount}`;if([,a]=u.split(" ",2),a=Math.min(parseInt(a,10),5),null==(l=await this.getCommitRefs(e,t,r,i,{path:s,last:a,before:u})))return[];let c=[];for(let{oid:e}of l.values){if(e===o)break;c.push(e)}return c.reverse()}async getCommitDate(e,t,r,i){let s=(0,H.dQ)();try{let o=`query getCommitDate(
	$owner: String!
	$repo: String!
	$sha: GitObjectID!
) {
	repository(name: $repo, owner: $owner) {
		object(oid: $sha) {
			... on Commit { committer { date } }
		}
	}
}`,a=await this.graphql(void 0,e,o,{owner:t,repo:r,sha:i},s);return a?.repository?.object?.committer.date}catch(e){if(e instanceof I.LN)return;throw this.handleException(e,void 0,s)}}async getContributors(e,t,r){let i=(0,H.dQ)();try{let s=await this.request(void 0,e,"GET /repos/{owner}/{repo}/contributors",{owner:t,repo:r,per_page:100},i),o=s?.data;if(null==o)return[];return s.data}catch(e){if(e instanceof I.LN)return[];throw this.handleException(e,void 0,i)}}async getDefaultBranchName(e,t,r){let i=(0,H.dQ)();try{let s=`query getDefaultBranch(
	$owner: String!
	$repo: String!
) {
	repository(owner: $owner, name: $repo) {
		defaultBranchRef {
			name
		}
	}
}`,o=await this.graphql(void 0,e,s,{owner:t,repo:r},i);if(null==o)return;return o.repository?.defaultBranchRef?.name??void 0}catch(e){if(e instanceof I.LN)return;throw this.handleException(e,void 0,i)}}async getCurrentUser(e,t,r){let i=(0,H.dQ)();try{let s=`query getCurrentUser(
	$owner: String!
	$repo: String!
) {
	viewer { name, email, login, id }
	repository(owner: $owner, name: $repo) { viewerPermission }
}`,o=await this.graphql(void 0,e,s,{owner:t,repo:r},i);if(null==o)return;return{name:o.viewer?.name,email:o.viewer?.email,username:o.viewer?.login,id:o.viewer?.id}}catch(e){if(e instanceof I.LN)return;throw this.handleException(e,void 0,i)}}async getComparison(e,t,r,i){let s=(0,H.dQ)();if(!(0,E.p8)(i,"qualified-triple-dot")){let e=(0,E.jY)(i);i=(0,E.Xn)(e?.left||"HEAD",e?.right||"HEAD","...")}try{let o=await this.request(void 0,e,"GET /repos/{owner}/{repo}/compare/{basehead}",{owner:t,repo:r,basehead:i},s),a=o?.data;if(null==a)return;return a}catch(e){if(e instanceof I.LN)return;throw this.handleException(e,void 0,s)}}async getRepositoryVisibility(e,t,r){let i=(0,H.dQ)();try{let s=`query getRepositoryVisibility(
	$owner: String!
	$repo: String!
) {
	repository(owner: $owner, name: $repo) {
		visibility
	}
}`,o=await this.graphql(void 0,e,s,{owner:t,repo:r},i);if(o?.repository?.visibility==null)return;return"PUBLIC"===o.repository.visibility?"public":"private"}catch(e){if(e instanceof I.LN)return;throw this.handleException(e,void 0,i)}}async getTags(e,t,r,i){let s=(0,H.dQ)();try{let o=`query getTags(
	$owner: String!
	$repo: String!
	$tagQuery: String
	$cursor: String
	$limit: Int = 100
) {
	repository(owner: $owner, name: $repo) {
		refs(query: $tagQuery, refPrefix: "refs/tags/", first: $limit, after: $cursor, orderBy: { field: TAG_COMMIT_DATE, direction: DESC }) {
			pageInfo {
				endCursor
				hasNextPage
			}
			nodes {
				name
				target {
					oid
					...on Tag {
						message
						tagger { date }
						target {
					...on Commit {
								oid
						authoredDate
						committedDate
						message
					}
						}
					}
				}
			}
		}
	}
}`,a=await this.graphql(void 0,e,o,{owner:t,repo:r,tagQuery:i?.query,cursor:i?.cursor,limit:Math.min(100,i?.limit??100)},s);if(null==a)return Y;let n=a.repository?.refs;if(null==n)return Y;return{paging:{cursor:n.pageInfo.endCursor,more:n.pageInfo.hasNextPage},values:n.nodes}}catch(e){if(e instanceof I.LN)return Y;throw this.handleException(e,void 0,s)}}async resolveReference(e,t,r,i,s){let o=(0,H.dQ)();try{if(!s){let s=`query resolveReference(
	$owner: String!
	$repo: String!
	$ref: String!
) {
	repository(owner: $owner, name: $repo) {
		object(expression: $ref) {
			oid
		}
	}
}`,a=await this.graphql(void 0,e,s,{owner:t,repo:r,ref:i},o);return a?.repository?.object?.oid??void 0}let a=`query resolveReference(
	$owner: String!
	$repo: String!
	$ref: String!
	$path: String!
) {
	repository(owner: $owner, name: $repo) {
		object(expression: $ref) {
			... on Commit {
				history(first: 1, path: $path) {
					nodes { oid }
				}
			}
		}
	}
}`,n=await this.graphql(void 0,e,a,{owner:t,repo:r,ref:i,path:s},o);return n?.repository?.object?.history.nodes?.[0]?.oid??void 0}catch(e){if(e instanceof I.LN)return;throw this.handleException(e,void 0,o)}}async searchCommits(e,t,r){let i,s,o;let a=(0,H.dQ)(),n=Math.min(100,r?.limit??100);r?.cursor!=null?([i,s,o]=r.cursor.split(" ",3),i=parseInt(i,10),s=parseInt(s,10),o=parseInt(o,10)):(i=1,s=n,o=0);try{let n=await this.request(void 0,e,"GET /search/commits",{q:t,sort:r?.sort,order:r?.order,per_page:s,page:i},a),l=n?.data;if(null==l||0===l.items.length)return;let u=l.items.map(e=>({oid:e.sha,parents:{nodes:e.parents.map(e=>({oid:e.sha}))},message:e.commit.message,author:{avatarUrl:e.author?.avatar_url??void 0,date:e.commit.author?.date??e.commit.author?.date??new Date().toString(),email:e.author?.email??e.commit.author?.email??void 0,name:e.author?.name??e.commit.author?.name??""},committer:{date:e.commit.committer?.date??e.committer?.date??new Date().toString(),email:e.committer?.email??e.commit.committer?.email??void 0,name:e.committer?.name??e.commit.committer?.name??""}})),c=o+l.items.length,d=l.incomplete_results||l.total_count>c;return{pageInfo:{startCursor:`${i} ${s} ${o}`,endCursor:d?`${i+1} ${s} ${c}`:void 0,hasPreviousPage:l.total_count>0&&i>1,hasNextPage:d},totalCount:l.total_count,values:u}}catch(e){if(e instanceof I.LN)return;throw this.handleException(e,void 0,a)}}async searchCommitShas(e,t,r){let i,s,o;let a=(0,H.dQ)(),n=Math.min(100,r?.limit??100);r?.cursor!=null?([i,s,o]=r.cursor.split(" ",3),i=parseInt(i,10),s=parseInt(s,10),o=parseInt(o,10)):(i=1,s=n,o=0);try{let n=await this.request(void 0,e,"GET /search/commits",{q:t,sort:r?.sort,order:r?.order,per_page:s,page:i},a),l=n?.data;if(null==l||0===l.items.length)return;let u=o+l.items.length,c=l.incomplete_results||l.total_count>u;return{pageInfo:{startCursor:`${i} ${s} ${o}`,endCursor:c?`${i+1} ${s} ${u}`:void 0,hasPreviousPage:l.total_count>0&&i>1,hasNextPage:c},totalCount:l.total_count,values:l.items.map(e=>({sha:e.sha,authorDate:new Date(e.commit.author.date).getTime(),committerDate:new Date(e.commit.committer?.date??e.commit.author.date).getTime()}))}}catch(e){if(e instanceof I.LN)return;throw this.handleException(e,void 0,a)}}_enterpriseVersions=new Map;async getEnterpriseVersion(e,t,r){let i=this._enterpriseVersions.get(t);if(null!=i)return i;if(null===i)return;let s=(0,H.dQ)();try{let o=await this.request(e,t,"GET /meta",r,s),a=o?.data?.installed_version;i=a?(0,M.sH)(a):null}catch{i=null}return this._enterpriseVersions.set(t,i),i??void 0}async graphql(e,t,r,i,s,o){try{let s;if(null!=o){if(o.isCancellationRequested)throw new I.AL;s=new AbortController,o.onCancellationRequested(()=>s.abort()),i={...i,request:{...i?.request,signal:s.signal}}}return await (0,U.Ff)(e?.getIgnoreSSLErrors()??!1,()=>this.getDefaults(t,S)(r,i))}catch(r){if(r instanceof $){switch(r.errors?.[0]?.type){case"NOT_FOUND":throw new I.LN(r);case"FORBIDDEN":throw new I.v3("github",I.R.Forbidden,r);case"RATE_LIMITED":{let e;let i=r.headers?.["x-ratelimit-reset"];throw null!=i&&Number.isNaN(e=parseInt(i,10))&&(e=void 0),new I.HG(r,t,e)}}x.Vy.isDebugging&&F.window.showErrorMessage(`GitHub request failed: ${r.errors?.[0]?.message??r.message}`)}else r instanceof RequestError||"AbortError"===r.name?this.handleRequestError(e,t,r,s):x.Vy.isDebugging&&F.window.showErrorMessage(`GitHub request failed: ${r.message}`);throw r}}async request(e,t,r,i,s,o){try{let s;if(null!=o){if(o.isCancellationRequested)throw new I.AL;s=new AbortController,o.onCancellationRequested(()=>s.abort()),i={...i,request:{...i?.request,signal:s.signal}}}return await (0,U.Ff)(e?.getIgnoreSSLErrors()??!1,()=>this.getDefaults(t,R)(r,i))}catch(r){throw r instanceof RequestError||"AbortError"===r.name?this.handleRequestError(e,t,r,s):x.Vy.isDebugging&&F.window.showErrorMessage(`GitHub request failed: ${r.message}`),r}}_defaults=new Map;getDefaults(e,t){let r=this._defaults.get(t);null==r&&(r=new Map,this._defaults.set(t,r));let i=r.get(e);return null==i&&(i=t.defaults({headers:{authorization:`token ${e}`},request:{agent:this.proxyAgent,fetch:D.HZ?(e,t)=>{if(null!=t.headers){let{"user-agent":e,...r}=t.headers;e&&(t.headers=r)}return(0,U.hd)(e,t)}:U.hd,hook:"debug"===x.Vy.logLevel||x.Vy.isDebugging?async(e,t)=>{let r=(0,B.u)(`[GITHUB] ${t.method} ${t.url}`,{log:!1});try{return await e(t)}finally{let e;try{if("string"==typeof t.query){let r=/(^[^({\n]+)/.exec(t.query);e=` ${r?.[1].trim()??t.query}`}}catch{}r?.stop({message:e})}}:void 0}}),r.set(e,i)),i}handleRequestError(e,t,r,i){if("AbortError"===r.name)throw new I.AL(r);switch(r.status){case 404:case 410:case 422:throw new I.LN(r);case 401:throw new I.v3("github",I.R.Unauthorized,r);case 403:if(r.message.includes("rate limit")){let e;let i=r.response?.headers?.["x-ratelimit-reset"];throw null!=i&&Number.isNaN(e=parseInt(i,10))&&(e=void 0),new I.HG(r,t,e)}throw new I.v3("github",I.R.Forbidden,r);case 500:x.Vy.error(r,i),null!=r.response&&(e?.trackRequestException(),(0,T.wW)(`${e?.name??"GitHub"} failed to respond and might be experiencing issues.${null==e||"github"===e.id?" Please visit the [GitHub status page](https://githubstatus.com) for more information.":""}`));return;case 502:if(x.Vy.error(r,i),r.message.includes("timeout")){e?.trackRequestException(),(0,T.lW)(e?.name??"GitHub");return}break;case 503:x.Vy.error(r,i),e?.trackRequestException(),(0,T.wW)(`${e?.name??"GitHub"} failed to respond and might be experiencing issues.${null==e||"github"===e.id?" Please visit the [GitHub status page](https://githubstatus.com) for more information.":""}`);return;default:if(r.status>=400&&r.status<500)throw new I.tk(r)}x.Vy.error(r,i),x.Vy.isDebugging&&F.window.showErrorMessage(`GitHub request failed: ${r.response?.errors?.[0]?.message??r.message}`)}handleException(e,t,r,i){return x.Vy.error(e,r),e instanceof I.v3&&!i&&this.showAuthenticationErrorMessage(e,t),e}async showAuthenticationErrorMessage(e,t){if(e.reason===I.R.Unauthorized||e.reason===I.R.Forbidden){let r="Reauthenticate";await F.window.showErrorMessage(`${e.message}. Would you like to try reauthenticating${e.reason===I.R.Forbidden?" to provide additional access":""}?`,r)===r&&(await t?.reauthenticate(),this.resetCaches(),this._onDidReauthenticate.fire())}else F.window.showErrorMessage(e.message)}async createEnterpriseAvatarUrl(e,t,r,i,s){s=s??16;let o=await this.getEnterpriseVersion(e,t,{baseUrl:r});if((0,M.ib)(o,">= 3.0.0")){let o;let a=(0,k.P)(i);null!=a&&F.Uri.parse(r).authority===a.authority&&(null!=a.userId?o=`${r}/enterprise/avatars/u/${encodeURIComponent(a.userId)}?s=${s}`:null!=a.login&&(o=`${r}/enterprise/avatars/${encodeURIComponent(a.login)}?s=${s}`)),null==o&&(o=`${r}/enterprise/avatars/u/e?email=${encodeURIComponent(i)}&s=${s}`);let n=await (0,U.Ff)(e?.getIgnoreSSLErrors()??!1,()=>(0,U.hd)(o,{method:"GET",headers:{Authorization:`Bearer ${t}`}}));if(n.ok){let e=(0,L.K3)(new Uint8Array(await n.arrayBuffer())),t=n.headers.get("content-type");return`data:${t};base64,${e}`}}return`https://avatars.githubusercontent.com/u/e?email=${encodeURIComponent(i)}&s=${s}`}async searchMyPullRequests(e,t,r,i){let s=(0,H.dQ)(),o=Math.min(100,_.H.get("launchpad.experimental.queryLimit")??100);try{let a=function(t){let r=[];return t.author.login===h&&r.push("authored"),t.assignees.nodes.some(e=>e.login===h)&&r.push("assigned"),t.reviewRequests.nodes.some(e=>e.requestedReviewer?.login===h)&&r.push("review-requested"),0===r.length&&r.push("mentioned"),{pullRequest:(0,z.fromGitHubPullRequest)(t,e),reasons:r}},n=`query searchMyPullRequests(
	$search: String!
	$avatarSize: Int
) {
	search(first: ${o}, query: $search, type: ISSUE) {
		issueCount
		nodes {
			...on PullRequest {
				${X}
			}
		}
	}
	viewer {
		login
	}
}`,l=r?.search?.trim()??"";r?.user&&(l+=` user:${r.user}`),r?.repos?.length&&(l+=` repo:${r.repos.join(" repo:")}`);let u=_.H.get("launchpad.ignoredRepositories")??[];u.length&&(l+=` -repo:${u.join(" -repo:")}`);let c=_.H.get("launchpad.includedOrganizations")??[];if(c.length)l+=` org:${c.join(" org:")}`;else{let e=_.H.get("launchpad.ignoredOrganizations")??[];e.length&&(l+=` -org:${e.join(" -org:")}`)}let d=await this.graphql(e,t,n,{search:`is:open is:pr involves:@me archived:false ${l}`.trim(),baseUrl:r?.baseUrl,avatarSize:r?.avatarSize},s,i);if(null==d)return[];let h=d.viewer.login;return d.search.nodes.map(e=>a(e))}catch(t){throw this.handleException(t,e,s,r?.silent)}}async searchMyIssues(e,t,r,i){let s=(0,H.dQ)(),o=`${Z}${r?.includeBody?`
			body
			`:""}`,a=`query searchMyIssues(
				$authored: String!
				$assigned: String!
				$mentioned: String!
				$avatarSize: Int
			) {
				authored: search(first: 100, query: $authored, type: ISSUE) {
					nodes {
						... on Issue {
							${o}
						}
					}
				}
				assigned: search(first: 100, query: $assigned, type: ISSUE) {
					nodes {
						... on Issue {
							${o}
						}
					}
				}
				mentioned: search(first: 100, query: $mentioned, type: ISSUE) {
					nodes {
						... on Issue {
							${o}
						}
					}
				}
			}`,n=r?.search?.trim()??"";if(r?.user&&(n+=` user:${r.user}`),r?.repos!=null&&r.repos.length>0){let e="  repo:";n+=`${e}${r.repos.join(e)}`}let l="type:issue is:open archived:false";try{var u,c;let o=function(t,r){return{issue:(0,z.fromGitHubIssue)(t,e),reasons:r?[r]:[]}},d=await this.graphql(e,t,a,{authored:`${n} ${l} author:@me`.trim(),assigned:`${n} ${l} assignee:@me`.trim(),mentioned:`${n} ${l} mentions:@me`.trim(),baseUrl:r?.baseUrl,avatarSize:r?.avatarSize},s,i);if(null==d)return[];return u=[...d.assigned.nodes.map(e=>o(e,"assigned")),...d.mentioned.nodes.map(e=>o(e,"mentioned")),...d.authored.nodes.map(e=>o(e,"authored"))],c=e=>e.issue.url,[...(0,O.pD)(u,c,(e,t)=>(0!==t.reasons.length&&e.reasons.push(...t.reasons),e))]}catch(t){throw this.handleException(t,e,s)}}async searchPullRequests(e,t,r,i){let s=(0,H.dQ)();try{let o=`query searchPullRequests(
	$searchQuery: String!
	$avatarSize: Int
) {
	search(first: 10, query: $searchQuery, type: ISSUE) {
		nodes {
			...on PullRequest {
				${X}
			}
		}
	}
}`,a=r?.search?.trim()??"";if(r?.user&&(a+=` user:${r.user}`),r?.repos!=null&&r.repos.length>0){let e=" repo:";a+=`${e}${r.repos.join(e)}`}let n=await this.graphql(e,t,o,{searchQuery:`is:pr is:open archived:false ${a.trim()}`,baseUrl:r?.baseUrl,avatarSize:r?.avatarSize},s,i);if(null==n)return[];return n.search.nodes.map(t=>(0,z.fromGitHubPullRequest)(t,e))}catch(t){throw this.handleException(t,e,s)}}async mergePullRequest(e,t,r,i,s,o){let a;let n=(0,H.dQ)();switch(s?.mergeMethod){case G.e0.Merge:a="MERGE";break;case G.e0.Rebase:a="REBASE";break;case G.e0.Squash:a="SQUASH"}try{let l=`mutation mergePullRequest(
	$id: ID!
	$expectedSourceSha: GitObjectID!
	$mergeMethod: PullRequestMergeMethod
) {
	mergePullRequest(input: { pullRequestId: $id, expectedHeadOid: $expectedSourceSha, mergeMethod: $mergeMethod }) {
		pullRequest {
			id
		}
	}
}`,u=await this.graphql(e,t,l,{id:r,expectedSourceSha:i,mergeMethod:a,baseUrl:s?.baseUrl},n,o);return u?.pullRequest?.id===r}catch(t){throw this.handleException(t,e,n)}}};function ee(e){return e?.baseUrl==null||"https://api.github.com"===e.baseUrl}V([(0,j.Yz)({args:{0:e=>e.name,1:"<token>"}})],GitHubApi.prototype,"getAccountForCommit",1),V([(0,j.Yz)({args:{0:e=>e.name,1:"<token>"}})],GitHubApi.prototype,"getAccountForEmail",1),V([(0,j.Yz)({args:{0:e=>e.name,1:"<token>"}})],GitHubApi.prototype,"getDefaultBranch",1),V([(0,j.Yz)({args:{0:e=>e.name,1:"<token>"}})],GitHubApi.prototype,"getIssueOrPullRequest",1),V([(0,j.Yz)({args:{0:e=>e.name,1:"<token>"}})],GitHubApi.prototype,"getIssue",1),V([(0,j.Yz)({args:{0:e=>e.name,1:"<token>"}})],GitHubApi.prototype,"getPullRequest",1),V([(0,j.Yz)({args:{0:e=>e.name,1:"<token>"}})],GitHubApi.prototype,"getPullRequestForBranch",1),V([(0,j.Yz)({args:{0:e=>e.name,1:"<token>"}})],GitHubApi.prototype,"getPullRequestForCommit",1),V([(0,j.Yz)({args:{0:e=>e.name,1:"<token>"}})],GitHubApi.prototype,"getRepositoryMetadata",1),V([(0,j.Yz)({args:{0:"<token>"}})],GitHubApi.prototype,"getBlame",1),V([(0,j.Yz)({args:{0:"<token>"}})],GitHubApi.prototype,"getBranches",1),V([(0,j.Yz)({args:{0:"<token>"}})],GitHubApi.prototype,"getCommit",1),V([(0,j.Yz)({args:{0:"<token>"}})],GitHubApi.prototype,"getCommitForFile",1),V([(0,j.Yz)({args:{0:"<token>"}})],GitHubApi.prototype,"getBranchesWithCommits",1),V([(0,j.Yz)({args:{0:"<token>"}})],GitHubApi.prototype,"getCommitCount",1),V([(0,j.Yz)({args:{0:"<token>"}})],GitHubApi.prototype,"getBranchWithCommit",1),V([(0,j.Yz)({args:{0:"<token>"}})],GitHubApi.prototype,"getCommits",1),V([(0,j.Yz)({args:{0:"<token>"}})],GitHubApi.prototype,"getCommitRefs",1),V([(0,j.Yz)({args:{0:"<token>"}})],GitHubApi.prototype,"getTagsWithCommit",1),V([(0,j.Yz)({args:{0:"<token>"}})],GitHubApi.prototype,"getNextCommitRefs",1),V([(0,j.Yz)({args:{0:"<token>"}})],GitHubApi.prototype,"getContributors",1),V([(0,j.Yz)({args:{0:"<token>"}})],GitHubApi.prototype,"getDefaultBranchName",1),V([(0,j.Yz)({args:{0:"<token>"}})],GitHubApi.prototype,"getCurrentUser",1),V([(0,j.Yz)({args:{0:"<token>"}})],GitHubApi.prototype,"getComparison",1),V([(0,j.Yz)({args:{0:"<token>"}})],GitHubApi.prototype,"getRepositoryVisibility",1),V([(0,j.Yz)({args:{0:"<token>"}})],GitHubApi.prototype,"getTags",1),V([(0,j.Yz)({args:{0:"<token>"}})],GitHubApi.prototype,"resolveReference",1),V([(0,j.Yz)({args:{0:"<token>"}})],GitHubApi.prototype,"searchCommits",1),V([(0,j.Yz)({args:{0:"<token>"}})],GitHubApi.prototype,"searchCommitShas",1),V([(0,j.Yz)({args:{0:e=>e?.name,1:"<token>"}})],GitHubApi.prototype,"getEnterpriseVersion",1),V([(0,j.Yz)({args:{0:e=>e.name,1:"<token>"}})],GitHubApi.prototype,"searchMyPullRequests",1),V([(0,j.Yz)({args:{0:e=>e.name,1:"<token>"}})],GitHubApi.prototype,"searchMyIssues",1),V([(0,j.Yz)({args:{0:e=>e.name,1:"<token>"}})],GitHubApi.prototype,"searchPullRequests",1),V([(0,j.Yz)({args:{0:e=>e.name,1:"<token>"}})],GitHubApi.prototype,"mergePullRequest",1)},9631:(e,t,r)=>{let i;r.r(t),r.d(t,{GitHubGitProvider:()=>GitHubGitProvider,stripOrigin:()=>eT});var s,o,a=r(1398),n=r(9018),l=r(5811),u=r(1646),c=r(4039),d=r(6347),h=r(4263),g=r(5823),p=r(3492),m=r(315),f=r(7940),v=r(9286),y=r(5302),w=r(4931),b=r(9189),P=r(7166),R=r(8049),$=r(4143),C=r(7686),A=r(4018),q=r(9941),S=r(4007),F=r(5270),U=r(4064),D=r(6450),I=r(5891),G=r(471),k=r(6181),E=r(7042);async function T(e){try{let e=a.extensions.getExtension("ms-vscode.remote-repositories")??a.extensions.getExtension("GitHub.remotehub");if(null==e)throw U.Vy.log("GitHub Repositories extension is not installed or enabled"),new c.dU("GitHub Repositories","GitHub.remotehub");return e.isActive?e.exports:await e.activate()}catch(t){if(U.Vy.error(t,"Unable to get required api from the GitHub Repositories extension"),c.dU,e)return;throw t}}var _=((s=_||{})[s.Branch=0]="Branch",s[s.RemoteBranch=1]="RemoteBranch",s[s.Tag=2]="Tag",s[s.Commit=3]="Commit",s),j=((o=j||{})[o.Branch=0]="Branch",o[o.Tag=1]="Tag",o[o.Commit=2]="Commit",o[o.PullRequest=3]="PullRequest",o[o.Tree=4]="Tree",o),O=r(3744),x=r(1802),H=r(1762),B=Object.defineProperty,L=Object.getOwnPropertyDescriptor,M=(e,t,r,i)=>{for(var s,o=i>1?void 0:i?L(t,r):t,a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i?s(t,r,o):s(o))||o);return i&&o&&B(t,r,o),o};let z=Object.freeze({values:[]});let BranchesGitSubProvider=class BranchesGitSubProvider{constructor(e,t,r){this.container=e,this.cache=t,this.provider=r}async getBranch(e,t){if(null!=t){let{values:[r]}=await this.getBranches(e,{filter:e=>e.name===t});return r}let r=this.cache.branch?.get(e);return null==r&&(r=(async function(){let{values:[t]}=await this.getBranches(e,{filter:e=>e.current});if(null!=t)return t;try{let{metadata:t}=await this.provider.ensureRepositoryContext(e),r=await t.getRevision();switch(r.type){case _.Tag:case _.Commit:return new x.Z(this.container,e,r.name,!1,!0,void 0,r.revision,void 0,void 0,void 0,!0)}return}catch(e){U.Vy.error(e,(0,D.dQ)());return}}).call(this),this.cache.branch?.set(e,r)),r}async getBranches(e,t){if(null==e)return z;let r=(0,D.dQ)(),i=t?.paging?.cursor?void 0:this.cache.branches?.get(e);null==i&&(i=(async function(){try{let r;let{metadata:i,github:s,session:o}=await this.provider.ensureRepositoryContext(e),a=[],n=await i.getRevision();switch(n.type){case _.Branch:r=n.name;break;case _.RemoteBranch:{let e=n.name.indexOf(":");r=-1===e?n.name:n.name.substring(e+1)}}let l=t?.paging?.cursor,u=null==l;for(;;){let t=await s.getBranches(o.accessToken,i.repo.owner,i.repo.name,{cursor:l});for(let i of t.values)!function(t,r,i){let s=new Date("author-date"===$.H.get("advanced.commitOrdering")?r.target.authoredDate:r.target.committedDate),o=r.target.oid;a.push(new x.Z(t,e,r.name,!1,i,s,o,{name:`origin/${r.name}`,missing:!1}),new x.Z(t,e,`origin/${r.name}`,!0,!1,s,o))}(this.container,i,i.name===r);if(!t.paging?.more||!u)return{...t,values:a};l=t.paging.cursor}}catch(t){return U.Vy.error(t,r),this.cache.branches?.delete(e),z}}).call(this),t?.paging?.cursor==null&&this.cache.branches?.set(e,i));let s=await i;return t?.filter!=null&&(s={...s,values:s.values.filter(t.filter)}),t?.sort!=null&&(0,H.Xn)(s.values,"boolean"==typeof t.sort?void 0:t.sort),s}async getBranchContributionsOverview(e,t){let r=(0,D.dQ)();try{let r,i;let s=await this.getDefaultBranchName(e);if(null==s)return;let o=await this.getMergeBase(e,t,s);if(null==o)return;let a=await this.provider.contributors.getContributors(e,(0,R.Xn)(o,t,".."),{stats:!0});(0,H.tB)(a,{orderBy:"score:desc"});let n=0,l=0,u=0,c=0;for(let e of a){n+=e.commits,l+=e.stats?.files??0,u+=e.stats?.additions??0,c+=e.stats?.deletions??0;let t=e.firstCommitDate?.getTime(),s=e.latestCommitDate?.getTime();(null!=t||null!=s)&&(r=null!=r?Math.min(r,t??1/0,s??1/0):t??s,i=null!=i?Math.max(i,t??-1/0,s??-1/0):s??t)}return{repoPath:e,branch:t,baseOrTargetBranch:s,mergeBase:o,commits:n,files:l,additions:u,deletions:c,latestCommitDate:null!=i?new Date(i):void 0,firstCommitDate:null!=r?new Date(r):void 0,contributors:a}}catch(e){U.Vy.error(e,r);return}}async getBranchesWithCommits(e,t,r,i){if(null==e||i?.commitDate==null)return[];let s=(0,D.dQ)();try{let{metadata:s,github:o,session:a}=await this.provider.ensureRepositoryContext(e);return r?await o.getBranchWithCommit(a.accessToken,s.repo.owner,s.repo.name,r,t.map(eT),i?.mode??"contains",i?.commitDate):await o.getBranchesWithCommits(a.accessToken,s.repo.owner,s.repo.name,t.map(eT),i?.mode??"contains",i?.commitDate)}catch(e){return U.Vy.error(e,s),[]}}async getDefaultBranchName(e,t){if(null==e)return;let r=(0,D.dQ)();try{let{metadata:t,github:r,session:i}=await this.provider.ensureRepositoryContext(e);return await r.getDefaultBranchName(i.accessToken,t.repo.owner,t.repo.name)}catch(e){U.Vy.error(e,r);return}}async getMergeBase(e,t,r,i){if(null==e)return;let s=(0,D.dQ)(),{metadata:o,github:a,session:n}=await this.provider.ensureRepositoryContext(e);try{let e=await a.getComparison(n.accessToken,o.repo.owner,o.repo.name,(0,R.Xn)(eT(t),eT(r),"..."));return e?.merge_base_commit?.sha}catch(e){U.Vy.error(e,s);return}}};M([(0,S.Rm)()],BranchesGitSubProvider.prototype,"getBranch",1),M([(0,S.Rm)({args:{1:!1}})],BranchesGitSubProvider.prototype,"getBranches",1),M([(0,S.Rm)()],BranchesGitSubProvider.prototype,"getBranchContributionsOverview",1),M([(0,S.Rm)()],BranchesGitSubProvider.prototype,"getBranchesWithCommits",1),M([(0,S.Rm)()],BranchesGitSubProvider.prototype,"getDefaultBranchName",1),M([(0,S.Rm)()],BranchesGitSubProvider.prototype,"getMergeBase",1);var N=r(1977),Q=r(4654);let V=/"/g;async function Y(e,t,r,i){let s=[];for(let[o,a]of r.entries())switch(o){case"message:":s.push(...(0,F.Tj)(a,e=>e.replace(/ /g,"+")));break;case"author:":{let r;for(let o of(a.has("@me")&&(r=await e.getCurrentUser(i)),a))if(o&&(o=o.replace(V,t.matchRegex?"\\b":""))){if("@me"===o){if(r?.username==null)continue;o=`@${r.username}`}(o=o.replace(/ /g,"+")).startsWith("@")?s.push(`author:${o.slice(1)}`):o.includes("@")?s.push(`author-email:${o}`):s.push(`author-name:${o}`)}}}return s}var W=Object.defineProperty,J=Object.getOwnPropertyDescriptor,K=(e,t,r,i)=>{for(var s,o=i>1?void 0:i?J(t,r):t,a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i?s(t,r,o):s(o))||o);return i&&o&&W(t,r,o),o};let X=Promise.resolve(void 0);let CommitsGitSubProvider=class CommitsGitSubProvider{constructor(e,t,r){this.container=e,this.cache=t,this.provider=r}async getCommit(e,t){if(null==e)return;let r=(0,D.dQ)();try{if((0,R._k)(t,!0))return(0,Q.O)(this.container,e,t,await this.provider.getCurrentUser(e));let{metadata:r,github:i,session:s}=await this.provider.ensureRepositoryContext(e),o=await i.getCommit(s.accessToken,r.repo.owner,r.repo.name,eT(t));if(null==o)return;let{viewer:a=s.account.label}=o,n=null!=a&&o.author.name===a?"You":o.author.name,l=null!=a&&o.committer.name===a?"You":o.committer.name;return new m.Yg(this.container,e,o.oid,new m.M7(n,o.author.email,new Date(o.author.date),o.author.avatarUrl),new m.M7(l,o.committer.email,new Date(o.committer.date)),o.message.split("\n",1)[0],o.parents.nodes.map(e=>e.oid),o.message,o.files?.map(t=>new f.l(this.container,e,t.filename??"",O.fromCommitFileStatus(t.status)??v.NO.Modified,t.previous_filename,void 0,{additions:t.additions??0,deletions:t.deletions??0,changes:t.changes??0}))??[],{files:o.changedFiles??0,additions:o.additions??0,deletions:o.deletions??0},[])}catch(e){U.Vy.error(e,r);return}}async getCommitCount(e,t){if(null==e)return;let r=(0,D.dQ)();try{let{metadata:r,github:i,session:s}=await this.provider.ensureRepositoryContext(e);return await i.getCommitCount(s?.accessToken,r.repo.owner,r.repo.name,eT(t))}catch(e){U.Vy.error(e,r);return}}async getCommitForFile(e,t,r,i){if(null==e)return;let s=(0,D.dQ)();try{let{metadata:i,github:s,remotehub:o,session:a}=await this.provider.ensureRepositoryContext(e),n=this.provider.getRelativePath(t,o.getProviderRootUri(t));r=r&&"HEAD"!==r?r:(await i.getRevision()).revision;let l=await s.getCommitForFile(a.accessToken,i.repo.owner,i.repo.name,eT(r),n);if(null==l)return;let{viewer:u=a.account.label}=l,c=null!=u&&l.author.name===u?"You":l.author.name,d=null!=u&&l.committer.name===u?"You":l.committer.name,h=l.files?.map(t=>new f.l(this.container,e,t.filename??"",O.fromCommitFileStatus(t.status)??v.NO.Modified,t.previous_filename,void 0,{additions:t.additions??0,deletions:t.deletions??0,changes:t.changes??0})),g=h?.find(e=>e.path===n);return new m.Yg(this.container,e,l.oid,new m.M7(c,l.author.email,new Date(l.author.date),l.author.avatarUrl),new m.M7(d,l.committer.email,new Date(l.committer.date)),l.message.split("\n",1)[0],l.parents.nodes.map(e=>e.oid),l.message,{file:g,files:h},{files:l.changedFiles??0,additions:l.additions??0,deletions:l.deletions??0},[])}catch(e){U.Vy.error(e,s);return}}async getCommitFileStatus(e,t,r){if(r===w.nB||(0,R._k)(r))return;let i=await this.getCommitForFile(e,t,r);if(null!=i)return i.findFile(t)}async getLeftRightCommitCount(e,t,r){if(null==e)return;let i=(0,D.dQ)(),{metadata:s,github:o,session:a}=await this.provider.ensureRepositoryContext(e);try{let e=await o.getComparison(a.accessToken,s.repo.owner,s.repo.name,eT(t));if(null==e)return;return{left:e.behind_by,right:e.ahead_by}}catch(e){U.Vy.error(e,i);return}}async getLog(e,t,r){if(null==e)return;let i=(0,D.dQ)(),s=this.provider.getPagingLimit(r?.limit);try{let{metadata:i,github:o,session:a}=await this.provider.ensureRepositoryContext(e);t=t&&"HEAD"!==t?t:(await i.getRevision()).revision;let n=await o.getCommits(a.accessToken,i.repo.owner,i.repo.name,eT(t),{all:r?.all,authors:r?.authors,after:r?.cursor,limit:s,since:r?.since?new Date(r.since):void 0}),l=new Map,{viewer:u=a.account.label}=n;for(let t of n.values){let r=null!=u&&t.author.name===u?"You":t.author.name,i=null!=u&&t.committer.name===u?"You":t.committer.name,s=l.get(t.oid);null==s&&(s=new m.Yg(this.container,e,t.oid,new m.M7(r,t.author.email,new Date(t.author.date),t.author.avatarUrl),new m.M7(i,t.committer.email,new Date(t.committer.date)),t.message.split("\n",1)[0],t.parents.nodes.map(e=>e.oid),t.message,t.files?.map(t=>new f.l(this.container,e,t.filename??"",O.fromCommitFileStatus(t.status)??v.NO.Modified,t.previous_filename,void 0,{additions:t.additions??0,deletions:t.deletions??0,changes:t.changes??0})),{files:t.changedFiles??0,additions:t.additions??0,deletions:t.deletions??0},[]),l.set(t.oid,s))}let c={repoPath:e,commits:l,sha:t,range:void 0,count:l.size,limit:s,hasMore:n.paging?.more??!1,endingCursor:n.paging?.cursor,query:i=>this.getLog(e,t,{...r,limit:i})};return c.hasMore&&(c.more=this.getLogMoreFn(c,t,r)),c}catch(e){U.Vy.error(e,i);return}}async getLogShasOnly(e,t,r){let i=await this.getLog(e,t,r);if(null!=i)return new Set([...i.commits.values()].map(e=>e.ref))}getLogMoreFn(e,t,r){return async i=>{let s=null!=i&&"object"==typeof i?i.until:void 0,o="number"==typeof i?i:void 0;if(s&&(0,F.zN)(e.commits.values(),e=>e.ref===s))return e;o=this.provider.getPagingLimit(o);let a=await this.getLog(e.repoPath,t,{...r,limit:o,cursor:e.endingCursor});if(null==a)return{...e,hasMore:!1,more:void 0};let n=new Map([...e.commits,...a.commits]),l={repoPath:e.repoPath,commits:n,sha:e.sha,range:void 0,count:n.size,limit:null==s?(e.limit??0)+o:void 0,hasMore:null!=s||a.hasMore,startingCursor:F.HV(e.commits)?.[0],endingCursor:a.endingCursor,pagedCommits:()=>{for(let t of e.commits.keys())a.commits.delete(t);return a.commits},query:e.query};return l.hasMore&&(l.more=this.getLogMoreFn(l,t,r)),l}}async getLogForFile(e,t,r,i){if(null==e)return;let s=(0,D.dQ)(),o=this.provider.getRelativePath(t,e);if(null!=e&&e===o)throw Error(`File name cannot match the repository path; path=${o}`);(i={reverse:!1,...i}).renames=!1,i.all=!1;let a="log";null!=r&&(a+=`:${r}`),i.limit=this.provider.getPagingLimit(i?.limit),i.limit&&(a+=`:n${i.limit}`),i.ordering&&(a+=`:ordering=${i.ordering}`),i.renames&&(a+=":follow"),i.reverse&&(a+=":reverse"),i.since&&(a+=`:since=${i.since}`),i.skip&&(a+=`:skip${i.skip}`);let n=null==i.cursor&&null==i.range,l=await this.container.documentTracker.getOrAdd(g.nk.fromFile(o,e,r));if(n){if(null!=l.state){let o=l.state.getLog(a);if(null!=o)return U.Vy.debug(s,`Cache hit: '${a}'`),o.item;if(null!=r||null!=i.limit){let o=l.state.getLog(`log${i.renames?":follow":""}${i.reverse?":reverse":""}`);if(null!=o){if(null==r)return U.Vy.debug(s,`Cache hit: ~'${a}'`),o.item;U.Vy.debug(s,`Cache ?: '${a}'`);let n=await o.item;if(null!=n&&!n.hasMore&&n.commits.has(r)){U.Vy.debug(s,`Cache hit: '${a}'`);let o=!0,l=0,u=new Map((0,F.x1)(n.commits.entries(),([e,t])=>{if(o){if(e!==r)return;o=!1}if(l++,i?.limit==null||!(l>i.limit))return[e,t]})),c={...i};return{...n,limit:i.limit,count:u.size,commits:u,query:i=>this.getLogForFile(e,t,r,{...c,limit:i})}}}}}U.Vy.debug(s,`Cache miss: '${a}'`),l.state??=new k.VV}let u=this.getLogForFileCore(e,o,r,l,a,s,i);return n&&null!=l.state&&(U.Vy.debug(s,`Cache add: '${a}'`),l.state.setLog(a,{item:u})),u}async getLogForFileCore(e,t,r,i,s,o,a){if(null==e)return;let n=this.provider.getPagingLimit(a?.limit);try{let i=await this.provider.ensureRepositoryContext(e);if(null==i)return;let{metadata:s,github:o,remotehub:l,session:u}=i,c=this.provider.getAbsoluteUri(t,e),d=this.provider.getRelativePath(c,l.getProviderRootUri(c));r=r&&"HEAD"!==r?r:(await s.getRevision()).revision;let h=await o.getCommits(u.accessToken,s.repo.owner,s.repo.name,eT(r),{all:a?.all,after:a?.cursor,path:d,limit:n,since:a?.since?new Date(a.since):void 0}),g=new Map,{viewer:p=u.account.label}=h;for(let t of h.values){let r=null!=p&&t.author.name===p?"You":t.author.name,i=null!=p&&t.committer.name===p?"You":t.committer.name,s=g.get(t.oid);if(null==s){let o=t.files?.map(t=>new f.l(this.container,e,t.filename??"",O.fromCommitFileStatus(t.status)??v.NO.Modified,t.previous_filename,void 0,{additions:t.additions??0,deletions:t.deletions??0,changes:t.changes??0})),a=(0,I.Np)(d)?void 0:o?.find(e=>e.path===d)??new f.l(this.container,e,d,v.NO.Modified,void 0,void 0,1===t.changedFiles?{additions:t.additions??0,deletions:t.deletions??0,changes:0}:void 0);s=new m.Yg(this.container,e,t.oid,new m.M7(r,t.author.email,new Date(t.author.date),t.author.avatarUrl),new m.M7(i,t.committer.email,new Date(t.committer.date)),t.message.split("\n",1)[0],t.parents.nodes.map(e=>e.oid),t.message,{file:a,files:o},{files:t.changedFiles??0,additions:t.additions??0,deletions:t.deletions??0},[]),g.set(t.oid,s)}}let y={repoPath:e,commits:g,sha:r,range:void 0,count:g.size,limit:n,hasMore:h.paging?.more??!1,endingCursor:h.paging?.cursor,query:i=>this.getLogForFile(e,t,r,{...a,limit:i})};return y.hasMore&&(y.more=this.getLogForFileMoreFn(y,t,r,a)),y}catch(e){if(null!=i.state&&a?.range==null&&!a?.reverse){let t=e?.toString()??"";return U.Vy.debug(o,`Cache replace (with empty promise): '${s}'`),i.state.setLog(s,{item:X,errorMessage:t}),X}return}}getLogForFileMoreFn(e,t,r,i){return async s=>{let o=null!=s&&"object"==typeof s?s.until:void 0,a="number"==typeof s?s:void 0;if(o&&(0,F.zN)(e.commits.values(),e=>e.ref===o))return e;a=this.provider.getPagingLimit(a);let n=await this.getLogForFile(e.repoPath,t,r,{...i,limit:null==o?a:0,cursor:e.endingCursor});if(null==n)return{...e,hasMore:!1,more:void 0};let l=new Map([...e.commits,...n.commits]),u={repoPath:e.repoPath,commits:l,sha:e.sha,range:e.range,count:l.size,limit:null==o?(e.limit??0)+a:void 0,hasMore:null!=o||n.hasMore,endingCursor:n.endingCursor,query:e.query};return u.hasMore&&(u.more=this.getLogForFileMoreFn(u,t,r,i)),u}}getOldestUnpushedShaForFile(e,t){return Promise.resolve(void 0)}hasCommitBeenPushed(e,t){return Promise.resolve(!0)}async isAncestorOf(e,t,r){if(null==e)return!1;let i=(0,D.dQ)(),{metadata:s,github:o,session:a}=await this.provider.ensureRepositoryContext(e);try{let e=await o.getComparison(a.accessToken,s.repo.owner,s.repo.name,(0,R.Xn)(eT(t),eT(r),"..."));switch(e?.status){case"ahead":case"diverged":default:return!1;case"identical":case"behind":return!0}}catch(e){return U.Vy.error(e,i),!1}}async searchCommits(e,t,r){if(null==e)return;let i=(0,D.dQ)(),s=(0,N.OM)(t),o=s.get("commit:");if(o?.size){let t=await this.getCommit(e,(0,F.$1)(o));if(null==t)return;return{repoPath:e,commits:new Map([[t.sha,t]]),sha:t.sha,range:void 0,count:1,limit:1,hasMore:!1}}let a=await Y(this.provider,t,s,e);if(0===a.length)return;let n=this.provider.getPagingLimit(r?.limit);try{let{metadata:i,github:s,session:o}=await this.provider.ensureRepositoryContext(e),l=`repo:${i.repo.owner}/${i.repo.name}+${a.join("+").trim()}`,u=await s.searchCommits(o.accessToken,l,{cursor:r?.cursor,limit:n,sort:r?.ordering==="date"?"committer-date":r?.ordering==="author-date"?"author-date":void 0});if(null==u)return;let c=new Map,d=o.account.label;for(let t of u.values){let r=null!=d&&t.author.name===d?"You":t.author.name,i=null!=d&&t.committer.name===d?"You":t.committer.name,s=c.get(t.oid);null==s&&(s=new m.Yg(this.container,e,t.oid,new m.M7(r,t.author.email,new Date(t.author.date),t.author.avatarUrl),new m.M7(i,t.committer.email,new Date(t.committer.date)),t.message.split("\n",1)[0],t.parents.nodes.map(e=>e.oid),t.message,t.files?.map(t=>new f.l(this.container,e,t.filename??"",O.fromCommitFileStatus(t.status)??v.NO.Modified,t.previous_filename,void 0,{additions:t.additions??0,deletions:t.deletions??0,changes:t.changes??0})),{files:t.changedFiles??0,additions:t.additions??0,deletions:t.deletions??0},[]),c.set(t.oid,s))}let h={repoPath:e,commits:c,sha:void 0,range:void 0,count:c.size,limit:n,hasMore:u.pageInfo?.hasNextPage??!1,endingCursor:u.pageInfo?.endCursor??void 0,query:t=>this.getLog(e,void 0,{...r,limit:t})};if(h.hasMore){let e=function(i){return async s=>{s=this.provider.getPagingLimit(s);let o=await this.searchCommits(i.repoPath,t,{...r,limit:s,cursor:i.endingCursor});if(null==o)return{...i,hasMore:!1,more:void 0};let a=new Map([...i.commits,...o.commits]),n={repoPath:i.repoPath,commits:a,sha:i.sha,range:void 0,count:a.size,limit:(i.limit??0)+s,hasMore:o.hasMore,endingCursor:o.endingCursor,query:i.query};return n.hasMore&&(n.more=e.call(this,n)),n}};h.more=e.call(this,h)}return h}catch(e){U.Vy.error(e,i)}}};K([(0,S.Rm)()],CommitsGitSubProvider.prototype,"getCommit",1),K([(0,S.Rm)()],CommitsGitSubProvider.prototype,"getCommitCount",1),K([(0,S.Rm)()],CommitsGitSubProvider.prototype,"getCommitForFile",1),K([(0,S.Rm)()],CommitsGitSubProvider.prototype,"getCommitFileStatus",1),K([(0,S.Rm)()],CommitsGitSubProvider.prototype,"getLeftRightCommitCount",1),K([(0,S.Rm)()],CommitsGitSubProvider.prototype,"getLog",1),K([(0,S.Rm)()],CommitsGitSubProvider.prototype,"getLogShasOnly",1),K([(0,S.Rm)()],CommitsGitSubProvider.prototype,"getLogForFile",1),K([(0,S.Rm)()],CommitsGitSubProvider.prototype,"getOldestUnpushedShaForFile",1),K([(0,S.Rm)()],CommitsGitSubProvider.prototype,"hasCommitBeenPushed",1),K([(0,S.Rm)()],CommitsGitSubProvider.prototype,"isAncestorOf",1),K([(0,S.Rm)({args:{1:e=>`[${e.matchAll?"A":""}${e.matchCase?"C":""}${e.matchRegex?"R":""}]: ${e.query.length>500?`${e.query.substring(0,500)}...`:e.query}`}})],CommitsGitSubProvider.prototype,"searchCommits",1);var Z=r(9457),ee=r(523),et=Object.defineProperty,er=Object.getOwnPropertyDescriptor,ei=(e,t,r,i)=>{for(var s,o=i>1?void 0:i?er(t,r):t,a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i?s(t,r,o):s(o))||o);return i&&o&&et(t,r,o),o};let ContributorsGitSubProvider=class ContributorsGitSubProvider{constructor(e,t,r){this.container=e,this.cache=t,this.provider=r}async getContributors(e,t,r){if(null==e)return[];let i=(0,D.dQ)();try{let{metadata:t,github:r,session:i}=await this.provider.ensureRepositoryContext(e),s=await r.getContributors(i.accessToken,t.repo.owner,t.repo.name),o=await this.provider.getCurrentUser(e),a=[];for(let t of s)"User"===t.type&&a.push(new Z.s(e,t.name??t.login??"",t.email,(0,ee.h)(o,t.name,t.email,t.login),t.contributions,void 0,void 0,void 0,t.login,t.avatar_url,t.node_id));return a}catch(e){return U.Vy.error(e,i),[]}}async getContributorsStats(e,t){if(null==e)return;let r=(0,D.dQ)();try{let{metadata:t,github:r,session:i}=await this.provider.ensureRepositoryContext(e),s=(await r.getContributors(i.accessToken,t.repo.owner,t.repo.name)).map(e=>e.contributions).sort((e,t)=>t-e);return{count:s.length,contributions:s}}catch(e){U.Vy.error(e,r);return}}};ei([(0,S.Rm)()],ContributorsGitSubProvider.prototype,"getContributors",1),ei([(0,S.Rm)()],ContributorsGitSubProvider.prototype,"getContributorsStats",1);var es=r(1151),eo=r(3386),ea=r(9964),en=r(7240),el=r(1885),eu=r(5320),ec=r(473),ed=Object.defineProperty,eh=Object.getOwnPropertyDescriptor,eg=(e,t,r,i)=>{for(var s,o=i>1?void 0:i?eh(t,r):t,a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i?s(t,r,o):s(o))||o);return i&&o&&ed(t,r,o),o};let ep=/"/g;let GraphGitSubProvider=class GraphGitSubProvider{constructor(e,t,r){this.container=e,this.cache=t,this.provider=r}async getGraph(e,t,r,i){let s=i?.limit??$.H.get("graph.defaultItemLimit")??5e3,o=$.H.get("graph.commitOrdering",void 0,"date"),a=$.H.get("graph.avatars",void 0,!0),[n,l,u,c,d,h]=await Promise.allSettled([this.provider.commits.getLog(e,t,{all:!0,ordering:o,limit:s}),this.provider.branches.getBranch(e),this.provider.branches.getBranches(e,{filter:e=>e.remote}),this.provider.remotes.getRemotes(e),this.provider.tags.getTags(e),this.provider.getCurrentUser(e)]),g=new Map,p=(0,G.Ro)(l),m=new Map,f=new Map;null!=p&&(m.set(p.name,p),null!=p.sha&&f.set(p.sha,[p.name]));let v=G.Ro(u)?.values;if(null!=v)for(let e of v){if(m.set(e.name,e),null==e.sha)continue;let t=f.get(e.sha);null==t?f.set(e.sha,[e.name]):t.push(e.name)}let y=new Set,w=(0,G.Ro)(c)[0],b=null!=w?new Map([[w.name,w]]):new Map,P=new Map,R=new Map,C=G.Ro(d)?.values;if(null!=C)for(let e of C){if(null==e.sha)continue;let t=R.get(e.sha);null==t?R.set(e.sha,[e.name]):t.push(e.name)}return this.getGraphCore(e,r,(0,G.Ro)(n),p,m,f,w,b,P,R,(0,G.Ro)(h),g,y,void 0,void 0,void 0,{...i,useAvatars:a})}getGraphCore(e,t,r,i,s,o,a,n,l,u,c,d,h,g,p,m,f){let v,y,w,P,R,$,C,A,q;let S={...f?.include,stats:!0},U=new Map;if(null==r)return{repoPath:e,avatars:d,ids:h,includes:S,branches:s,remotes:n,downstreams:U,stashes:g,worktrees:p,worktreesByBranch:m,rows:[]};let D=(r.pagedCommits?.()??r.commits)?.values();if(null==D)return{repoPath:e,avatars:d,ids:h,includes:S,branches:s,remotes:n,downstreams:U,stashes:g,worktrees:p,worktreesByBranch:m,rows:[]};let I=[],G=!1,k=!1,E=i.upstream?.name;for(let r of D){if(h.add(r.sha),G=r.sha===i.sha){if(w={webviewItem:`gitlens:branch${G?"+current":""}${i?.upstream!=null?"+tracking":""}`,webviewItemValue:{type:"branch",ref:(0,el.kA)(i.name,e,{id:i.id,refType:"branch",name:i.name,remote:!1,upstream:i.upstream})}},R=[{id:i.id,name:i.name,isCurrentHead:!0,context:(0,ec.C9)(w),upstream:null!=i.upstream?{name:i.upstream.name,id:(0,en.Yk)(e,!0,i.upstream.name)}:void 0}],null!=i.upstream){if(A=(0,en.Yk)(e,!0,i.name),v=((f?.useAvatars?a.provider?.avatarUri:void 0)??ea.Wf(this.container,a,t))?.toString(!0),w={webviewItem:"gitlens:branch+remote",webviewItemValue:{type:"branch",ref:(0,el.kA)(i.name,e,{id:A,refType:"branch",name:i.name,remote:!0,upstream:{name:a.name,missing:!1}})}},$=[{id:A,name:i.name,owner:a.name,url:a.url,avatarUrl:v,context:(0,ec.C9)(w),current:!0,hostingServiceType:a.provider?.gkProviderId}],null!=E){let e=U.get(E);null==e&&(e=[],U.set(E,e)),e.push(i.name)}}else $=[]}else{R=[],$=[];let i=o.get(r.sha);if(null!=i)for(let r of i)A=(0,en.Yk)(e,!0,r),y=(0,en.km)(r),v=((f?.useAvatars?a.provider?.avatarUri:void 0)??ea.Wf(this.container,a,t))?.toString(!0),w={webviewItem:"gitlens:branch+remote",webviewItemValue:{type:"branch",ref:(0,el.kA)(r,e,{id:A,refType:"branch",name:r,remote:!0,upstream:{name:a.name,missing:!1}})}},$.push({id:A,name:y,owner:a.name,url:a.url,avatarUrl:v,context:(0,ec.C9)(w),hostingServiceType:a.provider?.gkProviderId})}C=[];let s=u.get(r.sha);if(null!=s)for(let t of s)q=(0,eu.g)(e,t),w={webviewItem:"gitlens:tag",webviewItemValue:{type:"tag",ref:(0,el.kA)(t,e,{id:q,refType:"tag",name:t})}},C.push({id:q,name:t,annotated:!0,context:(0,ec.C9)(w)});if(r.author.email&&!d.has(r.author.email)){let e=r.getCachedAvatarUri();null!=e&&d.set(r.author.email,e.toString(!0))}k="You"===r.author.name,P={row:(0,ec.C9)({webviewItem:`gitlens:commit${G?"+HEAD":""}+current`,webviewItemValue:{type:"commit",ref:(0,el.kA)(r.sha,e,{refType:"revision",message:r.message})}}),avatar:(0,ec.C9)({webviewItem:`gitlens:contributor${k?"+current":""}`,webviewItemValue:{type:"contributor",repoPath:e,name:k&&c?.name!=null?c.name:r.author.name,email:r.author.email,current:k}})},I.push({sha:r.sha,parents:r.parents,author:r.author.name,email:r.author.email??"",date:r.committer.date.getTime(),message:(0,es.E)(r.message&&String(r.message).length?r.message:r.summary),type:r.parents.length>1?"merge-node":"commit-node",heads:R,remotes:$,tags:C,contexts:P}),null!=r.stats&&l.set(r.sha,{files:(0,b.Zx)(r.stats.files),additions:r.stats.additions,deletions:r.stats.deletions})}return f?.ref==="HEAD"?f.ref=F.$1(r.commits.values())?.sha:f?.ref!=null&&(f.ref=void 0),{repoPath:e,avatars:d,ids:h,includes:S,branches:s,remotes:n,downstreams:U,stashes:g,worktrees:p,worktreesByBranch:m,rows:I,id:f?.ref,paging:{limit:r.limit,startingCursor:r.startingCursor,hasMore:r.hasMore},more:async v=>{let y=await r.more?.(v);return this.getGraphCore(e,t,y,i,s,o,a,n,l,u,c,d,h,g,p,m,f)}}}async searchGraph(e,t,r){t={matchAll:!1,matchCase:!1,matchRegex:!0,...t};let i=(0,N.b4)(t);try{let o=new Map,a=(0,N.OM)(t),n=a.get("commit:");if(null!=n){let s=await Promise.allSettled((0,F.Tj)(n,t=>this.provider.commits.getCommit(e,t.replace(ep,"")))),a=0;for(let e of s){let t=(0,G.Ro)(e);null!=t&&o.set(t.sha,{i:a++,date:Number(r?.ordering==="author-date"?t.author.date:t.committer.date)})}return{repoPath:e,query:t,comparisonKey:i,results:o}}let l=await Y(this.provider,t,a,e);if(0===l.length)return{repoPath:e,query:t,comparisonKey:i,results:o};let{metadata:u,github:c,session:d}=await this.provider.ensureRepositoryContext(e),h=`repo:${u.repo.owner}/${u.repo.name}+${l.join("+").trim()}`;async function s(a,n){if(r?.cancellation?.isCancellationRequested)return{repoPath:e,query:t,comparisonKey:i,results:o};a=this.provider.getPagingLimit(a??$.H.get("advanced.maxSearchItems"));let l=await c.searchCommitShas(d.accessToken,h,{cursor:n,limit:a,sort:r?.ordering==="date"?"committer-date":r?.ordering==="author-date"?"author-date":void 0});if(null==l||r?.cancellation?.isCancellationRequested)return{repoPath:e,query:t,comparisonKey:i,results:o};for(let e of l.values)o.set(e.sha,{i:o.size,date:Number(r?.ordering==="author-date"?e.authorDate:e.committerDate)});return n=l.pageInfo?.endCursor??void 0,{repoPath:e,query:t,comparisonKey:i,results:o,paging:l.pageInfo?.hasNextPage?{limit:a,hasMore:!0}:void 0,more:async e=>s.call(this,e,n)}}return await s.call(this,r?.limit)}catch(e){if(e instanceof eo.Do)throw e;throw new eo.Do(e)}}};eg([(0,S.Rm)()],GraphGitSubProvider.prototype,"getGraph",1),eg([(0,S.Rm)({args:{1:e=>`[${e.matchAll?"A":""}${e.matchCase?"C":""}${e.matchRegex?"R":""}]: ${e.query.length>500?`${e.query.substring(0,500)}...`:e.query}`,2:e=>`limit=${e?.limit}, ordering=${e?.ordering}`}})],GraphGitSubProvider.prototype,"searchGraph",1);var em=r(7672),ef=r(6646),ev=r(5040),ey=Object.defineProperty,ew=Object.getOwnPropertyDescriptor;let RemotesGitSubProvider=class RemotesGitSubProvider extends ev.G{async getRemotes(e,t){if(null==e)return[];let r=(0,ef.P)($.H.get("remotes",null),void 0),[,i,s]=a.Uri.parse(e,!0).path.split("/",3),o=`https://github.com/${i}/${s}.git`,n="github.com",l=`${i}/${s}`;return[new em.X(this.container,e,"origin","https",n,l,(await (0,ef.m)(this.container,r))(o,n,l),[{type:"fetch",url:o},{type:"push",url:o}])]}};((e,t,r,i)=>{for(var s,o=ew(t,r),a=e.length-1;a>=0;a--)(s=e[a])&&(o=s(t,r,o)||o);return i&&o&&ey(t,r,o)})([(0,S.Rm)({args:{1:!1}})],RemotesGitSubProvider.prototype,"getRemotes",1);var eb=r(9988),eP=Object.defineProperty,eR=Object.getOwnPropertyDescriptor;let StatusGitSubProvider=class StatusGitSubProvider{constructor(e,t){this.container=e,this.provider=t}async getStatus(e){if(null==e)return;let t=await this.provider.ensureRepositoryContext(e);if(null==t)return;let r=await t.metadata.getRevision();if(null!=r)return new eb.l(this.container,e,r.name,r.revision,[],{ahead:0,behind:0},r.type===_.Branch||r.type===_.RemoteBranch?{name:`origin/${r.name}`,missing:!1}:void 0)}};((e,t,r,i)=>{for(var s,o=eR(t,r),a=e.length-1;a>=0;a--)(s=e[a])&&(o=s(t,r,o)||o);return i&&o&&eP(t,r,o)})([(0,q.G)(),(0,S.Rm)()],StatusGitSubProvider.prototype,"getStatus",1);var e$=r(8944),eC=Object.defineProperty,eA=Object.getOwnPropertyDescriptor,eq=(e,t,r,i)=>{for(var s,o=i>1?void 0:i?eA(t,r):t,a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i?s(t,r,o):s(o))||o);return i&&o&&eC(t,r,o),o};let eS=Object.freeze({values:[]});let TagsGitSubProvider=class TagsGitSubProvider{constructor(e,t,r){this.container=e,this.cache=t,this.provider=r}async getTag(e,t){let{values:[r]}=await this.getTags(e,{filter:e=>e.name===t});return r}async getTags(e,t){if(null==e)return eS;let r=(0,D.dQ)(),i=t?.paging?.cursor?void 0:this.cache.tags?.get(e);null==i&&(i=(async function(){try{let r,i;let{metadata:s,github:o,session:a}=await this.provider.ensureRepositoryContext(e),n=[],l=t?.paging?.cursor,u=null==l;for(;;){let t=await o.getTags(a.accessToken,s.repo.owner,s.repo.name,{cursor:l});for(let s of t.values)r=s.target.authoredDate??s.target.target?.authoredDate??s.target.tagger?.date,i=s.target.committedDate??s.target.target?.committedDate??s.target.tagger?.date,n.push(new e$.r(this.container,e,s.name,s.target.target?.oid??s.target.oid,s.target.message??s.target.target?.message??"",null!=r?new Date(r):void 0,null!=i?new Date(i):void 0));if(!t.paging?.more||!u)return{...t,values:n};l=t.paging.cursor}}catch(t){return U.Vy.error(t,r),this.cache.tags?.delete(e),eS}}).call(this),t?.paging?.cursor==null&&this.cache.tags?.set(e,i));let s=await i;return t?.filter!=null&&(s={...s,values:s.values.filter(t.filter)}),t?.sort!=null&&(0,H.uO)(s.values,"boolean"==typeof t.sort?void 0:t.sort),s}async getTagsWithCommit(e,t,r){if(null==e||r?.commitDate==null)return[];let i=(0,D.dQ)();try{let{metadata:i,github:s,session:o}=await this.provider.ensureRepositoryContext(e);return await s.getTagsWithCommit(o.accessToken,i.repo.owner,i.repo.name,eT(t),r?.commitDate)}catch(e){return U.Vy.error(e,i),[]}}};eq([(0,S.Rm)()],TagsGitSubProvider.prototype,"getTag",1),eq([(0,S.Rm)({args:{1:!1}})],TagsGitSubProvider.prototype,"getTags",1),eq([(0,S.Rm)()],TagsGitSubProvider.prototype,"getTagsWithCommit",1);var eF=Object.defineProperty,eU=Object.getOwnPropertyDescriptor,eD=(e,t,r,i)=>{for(var s,o=i>1?void 0:i?eU(t,r):t,a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i?s(t,r,o):s(o))||o);return i&&o&&eF(t,r,o),o};let eI=Promise.resolve(void 0),eG=["repo","read:user","user:email"],ek=/^[^/](?!.*\/\.)(?!.*\.\.)(?!.*\/\/)(?!.*@\{)[^\x00-\x1F\x7F ~^:?*[\\]+[^./]$/;let GitHubGitProvider=class GitHubGitProvider{constructor(e){this.container=e,this._cache=new h.V(this.container),this._disposables.push(a.authentication.onDidChangeSessions(this.onAuthenticationSessionsChanged,this))}descriptor={id:"github",name:"GitHub",virtual:!0};authenticationDescriptor={domain:"github.com",scopes:eG};authenticationProviderId=u.Q7.GitHub;supportedSchemes=new Set([l.xB.Virtual,l.xB.GitHub,l.xB.PRs]);_onDidChange=new a.EventEmitter;get onDidChange(){return this._onDidChange.event}_onWillChangeRepository=new a.EventEmitter;get onWillChangeRepository(){return this._onWillChangeRepository.event}_onDidChangeRepository=new a.EventEmitter;get onDidChangeRepository(){return this._onDidChangeRepository.event}_onDidCloseRepository=new a.EventEmitter;get onDidCloseRepository(){return this._onDidCloseRepository.event}_onDidOpenRepository=new a.EventEmitter;get onDidOpenRepository(){return this._onDidOpenRepository.event}_cache;_disposables=[];dispose(){this._disposables.forEach(e=>void e.dispose())}onAuthenticationSessionsChanged(e){e.provider.id===this.authenticationProviderId&&(this._sessionPromise=void 0,this.ensureSession(!1,!0))}onRepositoryChanged(e,t){this._cache.clearCaches(e.path),this._onWillChangeRepository.fire(t)}async discoverRepositories(e,t){if(!this.supportedSchemes.has(e.scheme))return[];try{let{remotehub:r}=await this.ensureRepositoryContext(e.toString(),!0),i=r.getVirtualWorkspaceUri(e);if(null==i)return[];return this.openRepository(void 0,i,!0,void 0,t?.silent)}catch(t){return t.message.startsWith("No provider registered with")&&(U.Vy.error(t,"No GitHub provider registered with Remote Repositories (yet); queuing pending discovery"),this._pendingDiscovery.add(e),this.ensurePendingRepositoryDiscovery()),[]}}_pendingDiscovery=new Set;_pendingTimer;ensurePendingRepositoryDiscovery(){null==this._pendingTimer&&0!==this._pendingDiscovery.size&&(this._pendingTimer=setTimeout(async()=>{try{let e=await T();for(let t of this._pendingDiscovery){if(null==e.getProvider(t)){this._pendingTimer=void 0,this.ensurePendingRepositoryDiscovery();return}this._pendingDiscovery.delete(t)}this._pendingTimer=void 0,setTimeout(()=>this._onDidChange.fire(),1),0!==this._pendingDiscovery.size&&this.ensurePendingRepositoryDiscovery()}catch{this._pendingTimer=void 0,this.ensurePendingRepositoryDiscovery()}},250))}updateContext(){(0,C.o)("gitlens:hasVirtualFolders",this.container.git.hasOpenRepositories(this.descriptor.id))}openRepository(e,t,r,i,s){return[new y.LN(this.container,{onDidRepositoryChange:this._onDidChangeRepository,onRepositoryChanged:this.onRepositoryChanged.bind(this)},this.descriptor,e??a.workspace.getWorkspaceFolder(t),t,r,i??!a.window.state.focused,s)]}async supports(e){switch(e){case d.O5.Stashes:case d.O5.Worktrees:case d.O5.StashOnlyStaged:return!1;default:return!0}}async visibility(e){let t=await this.remotes.getRemotes(e,{sort:!0});if(0===t.length)return["local",void 0];for await(let e of(0,G.w)(t.map(e=>this.getRemoteVisibility(e))))if("fulfilled"===e.status&&"public"===e.value[0])return["public",(0,P.U6)(e.value[1])];return["private",(0,P.U6)(t)]}async getRemoteVisibility(e){if(e.provider?.id==="github"){let{github:t,metadata:r,session:i}=await this.ensureRepositoryContext(e.repoPath);return[await t.getRepositoryVisibility(i.accessToken,r.repo.owner,r.repo.name)??"private",e]}return["private",e]}async getOpenScmRepositories(){return[]}async getScmRepository(e){}async getOrOpenScmRepository(e){}canHandlePathOrUri(e,t){if(this.supportedSchemes.has(e))return"string"==typeof t?t:t.toString()}getAbsoluteUri(e,t){if("string"==typeof t){if((0,I.bm)(t))t=a.Uri.parse(t,!0);else throw a.window.showErrorMessage(`Unable to get absolute uri between ${"string"==typeof e?e:e.toString(!0)} and ${t}; Base path '${t}' must be a uri`),Error(`Base path '${t}' must be a uri`)}if("string"==typeof e&&!(0,I.bm)(e)){let r=(0,I.Fd)(e);if(!(0,I.oP)(r))return a.Uri.joinPath(t,r)}let r=this.getRelativePath(e,t);return a.Uri.joinPath(t,r)}async getBestRevisionUri(e,t,r){return r?this.createProviderUri(e,r,t):this.createVirtualUri(e,r,t)}getRelativePath(e,t){let r;if("string"==typeof t){if((0,I.bm)(t))t=a.Uri.parse(t,!0);else throw a.window.showErrorMessage(`Unable to get relative path between ${"string"==typeof e?e:e.toString(!0)} and ${t}; Base path '${t}' must be a uri`),Error(`Base path '${t}' must be a uri`)}if("string"==typeof e){if(!(0,I.bm)(e))return e=(0,I.Fd)(e),(r=(0,I.oP)(e)&&e.startsWith(t.path)?e.slice(t.path.length):e).charCodeAt(0)===l.s7.Slash&&(r=r.slice(1)),r;e=a.Uri.parse(e,!0)}return(0,I.Fd)((0,A.V8)(t.path.slice(1),e.path.slice(1)))}getRevisionUri(e,t,r){let i=this.createProviderUri(e,r,t);return r===w.nB?i.with({query:"~"}):i}async getWorkingUri(e,t){return this.createVirtualUri(e,void 0,t.path)}async excludeIgnoredUris(e,t){return t}async findRepositoryUri(e,t){let r=(0,D.dQ)();try{let t=await this.ensureRemoteHubApi();return await eE(e,t,e=>t.getProviderRootUri(e).with({scheme:l.xB.Virtual}))}catch(e){c.dU,U.Vy.error(e,r);return}}async getBlame(e,t){let r=(0,D.dQ)();if(t?.isDirty)return;let i="blame";null!=e.sha&&(i+=`:${e.sha}`);let s=await this.container.documentTracker.getOrAdd(e);if(null!=s.state){let e=s.state.getBlame(i);if(null!=e)return U.Vy.debug(r,`Cache hit: '${i}'`),e.item}U.Vy.debug(r,`Cache miss: '${i}'`),null==s.state&&(s.state=new k.VV);let o=this.getBlameCore(e,s,i,r);return null!=s.state&&(U.Vy.debug(r,`Cache add: '${i}'`),s.state.setBlame(i,{item:o})),o}async getBlameCore(e,t,r,i){try{let t=await this.ensureRepositoryContext(e.repoPath);if(null==t)return;let{metadata:r,github:i,remotehub:s,session:o}=t,n=s.getVirtualUri(s.getProviderRootUri(e)),u=this.getRelativePath(e,n);if(e.scheme===l.xB.Virtual){let[t,r]=await Promise.allSettled([a.workspace.fs.stat(e),a.workspace.fs.stat(e.with({scheme:l.xB.GitHub}))]);if("fulfilled"!==t.status||"fulfilled"!==r.status||t.value.mtime!==r.value.mtime)return}let c=e.sha&&"HEAD"!==e.sha?e.sha:(await r.getRevision()).revision,d=await i.getBlame(o.accessToken,r.repo.owner,r.repo.name,c,u),h=new Map,g=new Map,p=[];for(let t of d.ranges){let r=t.commit,{viewer:i=o.account.label}=d,s=null!=i&&r.author.name===i?"You":r.author.name,a=null!=i&&r.committer.name===i?"You":r.committer.name,l=h.get(s);null==l&&(l={name:s,lineCount:0},h.set(s,l)),l.lineCount+=t.endingLine-t.startingLine+1;let c=g.get(r.oid);null==c&&(c=new m.Yg(this.container,e.repoPath,r.oid,new m.M7(s,r.author.email,new Date(r.author.date),r.author.avatarUrl),new m.M7(a,r.committer.email,new Date(r.author.date)),r.message.split("\n",1)[0],r.parents.nodes[0]?.oid?[r.parents.nodes[0]?.oid]:[],r.message,new f.l(this.container,n.toString(),u,v.NO.Modified),{files:r.changedFiles??0,additions:r.additions??0,deletions:r.deletions??0},[]),g.set(r.oid,c));for(let e=t.startingLine;e<=t.endingLine;e++){let t={sha:r.oid,originalLine:e,line:e};c.lines.push(t),p[e-1]=t}}let y=new Map([...h.entries()].sort((e,t)=>t[1].lineCount-e[1].lineCount));return{repoPath:e.repoPath,authors:y,commits:g,lines:p}}catch(e){if(null!=t.state&&!String(e).includes("No provider registered with")){let s=e?.toString()??"";return U.Vy.debug(i,`Cache replace (with empty promise): '${r}'`),t.state.setBlame(r,{item:eI,errorMessage:s}),t.setBlameFailure(e),eI}return}}async getBlameContents(e,t){}async getBlameForLine(e,t,r,i){let s=(0,D.dQ)();if(!r?.isDirty){if(!i?.forceSingleLine){let r=await this.getBlame(e);if(null==r)return;let i=r.lines[t];if(null==i){if(r.lines.length!==t)return;i=r.lines[t-1]}let s=r.commits.get(i.sha);if(null==s)return;return{author:{...r.authors.get(s.author.name),lineCount:s.lines.length},commit:s,line:i}}try{let r=await this.ensureRepositoryContext(e.repoPath);if(null==r)return;let{metadata:i,github:s,remotehub:o,session:a}=r,n=o.getVirtualUri(o.getProviderRootUri(e)),l=this.getRelativePath(e,n),u=e.sha&&"HEAD"!==e.sha?e.sha:(await i.getRevision()).revision,c=await s.getBlame(a.accessToken,i.repo.owner,i.repo.name,u,l),d=t+1,h=c.ranges.find(e=>e.startingLine===d);if(null==h)return;let g=h.commit,{viewer:p=a.account.label}=c,y=null!=p&&g.author.name===p?"You":g.author.name,w=null!=p&&g.committer.name===p?"You":g.committer.name,b=new m.Yg(this.container,e.repoPath,g.oid,new m.M7(y,g.author.email,new Date(g.author.date),g.author.avatarUrl),new m.M7(w,g.committer.email,new Date(g.author.date)),g.message.split("\n",1)[0],g.parents.nodes[0]?.oid?[g.parents.nodes[0]?.oid]:[],g.message,new f.l(this.container,n.toString(),l,v.NO.Modified),{files:g.changedFiles??0,additions:g.additions??0,deletions:g.deletions??0},[]);for(let e=h.startingLine;e<=h.endingLine;e++){let t={sha:g.oid,originalLine:e,line:e};b.lines.push(t)}return{author:{name:y,lineCount:h.endingLine-h.startingLine+1},commit:b,line:{sha:g.oid,originalLine:h.startingLine,line:h.startingLine}}}catch(e){U.Vy.error(e,s);return}}}async getBlameForLineContents(e,t,r,i){}async getBlameForRange(e,t){let r=await this.getBlame(e);if(null!=r)return this.getBlameRange(r,e,t)}async getBlameForRangeContents(e,t,r){let i=await this.getBlameContents(e,r);if(null!=i)return this.getBlameRange(i,e,t)}getBlameRange(e,t,r){if(0===e.lines.length||0===r.start.line&&r.end.line===e.lines.length-1)return e;let i=e.lines.slice(r.start.line,r.end.line+1),s=new Set(i.map(e=>e.sha)),o=r.start.line+1,a=r.end.line+1,n=new Map,l=new Map;for(let t of e.commits.values()){if(!s.has(t.sha))continue;let e=t.with({lines:t.lines.filter(e=>e.line>=o&&e.line<=a)});l.set(t.sha,e);let r=n.get(e.author.name);null==r&&(r={name:e.author.name,lineCount:0},n.set(r.name,r)),r.lineCount+=e.lines.length}let u=new Map([...n.entries()].sort((e,t)=>t[1].lineCount-e[1].lineCount));return{repoPath:t.repoPath,authors:u,commits:l,lines:i}}async getChangedFilesCount(e,t){if(!t)return;let r=await this.commits.getCommit(e,t);if(r?.stats==null)return;let{stats:i}=r,s=(0,b.Zx)(i.files);return{additions:i.additions,deletions:i.deletions,files:s}}async getCurrentUser(e){if(!e)return;let t=(0,D.dQ)(),r=this._cache.repoInfo.get(e),i=r?.user;if(null!=i)return i;if(null!==i)try{let{metadata:t,github:s,session:o}=await this.ensureRepositoryContext(e);return i=await s.getCurrentUser(o.accessToken,t.repo.owner,t.repo.name),this._cache.repoInfo.set(e,{...r,user:i??null}),i}catch(i){U.Vy.error(i,t),this._cache.repoInfo.set(e,{...r,user:null});return}}async getDiffForFile(e,t,r){}async getDiffForFileContents(e,t,r){}async getDiffForLine(e,t,r,i){}async getDiffStatus(e,t,r,i){let s,o;if(null==e)return;let a=(0,D.dQ)(),{metadata:n,github:l,session:u}=await this.ensureRepositoryContext(e);if((0,R.p8)(t)){if(s=t,!(0,R.p8)(t,"qualified")){let e=(0,R.jY)(t);s=(0,R.Xn)(e?.left||"HEAD",e?.right||"HEAD",e?.notation??"...")}}else s=(0,R.Xn)(t||"HEAD",r||"HEAD","...");if((0,R.p8)(s,"qualified-double-dot")){let e=(0,R.jY)(s);s=(0,R.Xn)(e.left,e.right,"..."),o=(0,R.Xn)(e.right,e.left,"...")}try{let t=await l.getComparison(u.accessToken,n.repo.owner,n.repo.name,eT(s)),r=t?.files,i=r;if(o){t=await l.getComparison(u.accessToken,n.repo.owner,n.repo.name,eT(o));let e=t?.files;i=[...new Set((0,F.KC)(r,e))]}return i?.map(t=>new f.l(this.container,e,t.filename??"",O.fromCommitFileStatus(t.status)??v.NO.Modified,t.previous_filename,void 0,o?void 0:{additions:t.additions??0,deletions:t.deletions??0,changes:t.changes??0}))}catch(e){U.Vy.error(e,a);return}}async getLastFetchedTimestamp(e){}async getNextComparisonUris(e,t,r,i=0){if(!r)return;let s=(0,D.dQ)();try{let s=await this.ensureRepositoryContext(e);if(null==s)return;let{metadata:o,github:a,remotehub:n,session:l}=s,u=this.getRelativePath(t,n.getProviderRootUri(t)),c=(await o.getRevision()).revision;"HEAD"===r&&(r=c);let d=await a.getNextCommitRefs(l.accessToken,o.repo.owner,o.repo.name,c,u,eT(r));return{current:0===i?g.nk.fromFile(u,e,r):new g.nk(await this.getBestRevisionUri(e,u,d[i-1])),next:new g.nk(await this.getBestRevisionUri(e,u,d[i]))}}catch(e){throw U.Vy.error(e,s),e}}async getPreviousComparisonUris(e,t,r,i=0){if(r===w.nB)return;let s=(0,D.dQ)();r===w.SU&&(r=void 0);try{let s=await this.ensureRepositoryContext(e);if(null==s)return;let{metadata:o,github:a,remotehub:n,session:l}=s,u=this.getRelativePath(t,n.getProviderRootUri(t)),c=null!=r?1:0,d=await a.getCommitRefs(l.accessToken,o.repo.owner,o.repo.name,eT(r&&"HEAD"!==r?r:(await o.getRevision()).revision),{path:u,first:c+i+1});if(null==d)return;let h=0===i?g.nk.fromFile(u,e,r):new g.nk(await this.getBestRevisionUri(e,u,d.values[c+i-1]?.oid??w.nB));if(null==h||h.sha===w.nB)return;return{current:h,previous:new g.nk(await this.getBestRevisionUri(e,u,d.values[c+i]?.oid??w.nB))}}catch(e){throw U.Vy.error(e,s),e}}async getPreviousComparisonUrisForLine(e,t,r,i,s=0){if(i===w.nB)return;let o=(0,D.dQ)();try{let o;let a=await this.ensureRepositoryContext(e);if(null==a)return;let{remotehub:n}=a,l=this.getRelativePath(t,n.getProviderRootUri(t)),u=g.nk.fromFile(l,e,i),c=r,d=r,h=r;for(let t=0;t<Math.max(0,s)+2;t++){let t=await this.getBlameForLine(o??u,h,void 0,{forceSingleLine:!0});if(null==t)break;i=t.commit.sha,l=t.commit.file?.path??t.commit.file?.originalPath??l,h=t.line.originalLine-1;let r=g.nk.fromFile(l,e,i);null==o||(u=o,c=d),o=r,d=h}if(null==u)return;return{current:u,previous:o,line:(c??r)+1}}catch(e){throw U.Vy.error(e,o),e}}async getIncomingActivity(e,t){}async getRevisionContent(e,t,r){let i=r?this.createProviderUri(e,r,t):this.createVirtualUri(e,r,t);return a.workspace.fs.readFile(i)}async getTreeEntryForRevision(e,t,r){if(null==e||!t)return;if("HEAD"===r){let t=await this.ensureRepositoryContext(e);if(null==t)return;let i=await t.metadata.getRevision();r=i?.revision}let i=r?this.createProviderUri(e,r,t):this.createVirtualUri(e,r,t),s=await a.workspace.fs.stat(i);if(null!=s)return{ref:r,oid:"",path:this.getRelativePath(i,e),size:s.size,type:(s.type&a.FileType.Directory)===a.FileType.Directory?"tree":"blob"}}async getTreeForRevision(e,t){if(null==e)return[];if("HEAD"===t){let r=await this.ensureRepositoryContext(e);if(null==r)return[];let i=await r.metadata.getRevision();t=i?.revision}let r=t?this.createProviderUri(e,t):this.createVirtualUri(e,t),i=await a.workspace.fs.readDirectory(r);if(null==i)return[];let s=[];for(let[e,o]of i){let i=this.getAbsoluteUri(e,r);s.push({ref:t,oid:"",path:this.getRelativePath(e,i),size:0,type:(o&a.FileType.Directory)===a.FileType.Directory?"tree":"blob"})}return[]}async hasBranchOrTag(e,t){let[{values:r},{values:i}]=await Promise.all([this.branches.getBranches(e,{filter:t?.filter?.branches,sort:!1}),this.tags.getTags(e,{filter:t?.filter?.tags,sort:!1})]);return 0!==r.length||0!==i.length}isTrackable(e){return this.supportedSchemes.has(e.scheme)}async isTracked(e){if(!this.isTrackable(e)||null==this.container.git.getRepository(e))return!1;let t=e.with({scheme:l.xB.GitHub});return null!=await a.workspace.fs.stat(t)}async resolveReference(e,t,r,i){let s;if(!t||t===w.nB||null==r&&(0,R.HH)(t)||null!=r&&(0,R._k)(t))return t;if(null!=r)s=this.getRelativePath(r,e);else if(!(0,R.a$)(t)||t.endsWith("^3"))return t;let o=await this.ensureRepositoryContext(e);if(null==o)return t;let{metadata:a,github:n,session:l}=o,u=await n.resolveReference(l.accessToken,a.repo.owner,a.repo.name,eT(t),s);return null!=u?u:s?w.nB:t}async validateBranchOrTagName(e,t){return ek.test(e)}async validateReference(e,t){return!0}_branches;get branches(){return this._branches??=new BranchesGitSubProvider(this.container,this._cache,this)}_commits;get commits(){return this._commits??=new CommitsGitSubProvider(this.container,this._cache,this)}_contributors;get contributors(){return this._contributors??=new ContributorsGitSubProvider(this.container,this._cache,this)}_graph;get graph(){return this._graph??=new GraphGitSubProvider(this.container,this._cache,this)}_remotes;get remotes(){return this._remotes??=new RemotesGitSubProvider(this.container,this._cache,this)}_status;get status(){return this._status??=new StatusGitSubProvider(this.container,this)}_tags;get tags(){return this._tags??=new TagsGitSubProvider(this.container,this._cache,this)}async ensureRepositoryContext(e,t){let r,i,s=a.Uri.parse(e,!0);if(!/^github\+?/.test(s.authority))throw new c.gK(e,c.ax.NotAGitHubRepository);if(!t){let t=this.container.git.getRepository(s);if(null==t)throw new c.gK(e,c.ax.NotAGitHubRepository);s=t.uri}let o=this._remotehub;if(null==o)try{o=await this.ensureRemoteHubApi()}catch(t){throw c.dU,new c.gK(e,c.ax.RemoteHubApiNotFound,t)}let n=await eE(s,o,e=>o?.getMetadata(e));if(n?.provider.id!=="github")throw new c.gK(e,c.ax.NotAGitHubRepository);let l=(0,p.JG)(s.authority);if(l.metadata?.ref?.type===j.PullRequest){let e=await n.getRevision();if(e.type===_.RemoteBranch){let[t]=e.name.split(":");t!==n.repo.owner&&(n.repo.owner=t)}}try{[r,i]=await Promise.all([this.ensureGitHub(),this.ensureSession()])}catch(t){if(t instanceof c.v3)throw new c.gK(e,t.reason===c.R.UserDidNotConsent?c.ax.GitHubAuthenticationDenied:c.ax.GitHubAuthenticationNotFound,t);throw new c.gK(e)}if(null==r)throw new c.gK(e);return{github:r,metadata:n,remotehub:o,session:i}}_github;async ensureGitHub(){if(null==this._github){let e=await this.container.github;null!=e&&this._disposables.push(e.onDidReauthenticate(()=>void this.ensureSession(!0))),this._github=e}return this._github}_remotehub;_remotehubPromise;async ensureRemoteHubApi(e){if(null==this._remotehubPromise&&(this._remotehubPromise=T(),this._remotehubPromise.then(e=>this._remotehub=e,()=>this._remotehub=void 0)),!e)return this._remotehubPromise;try{return await this._remotehubPromise}catch{return}}_sessionPromise;async ensureSession(e=!1,t=!1){if(e||null==this._sessionPromise){async function r(){let i=this.container.storage.get(`provider:authentication:skip:${this.descriptor.id}`,!1);try{let r;if(e?(i=!1,this.container.storage.delete(`provider:authentication:skip:${this.descriptor.id}`),r=await (0,E.c)(this.container,u.Q7.GitHub,this.authenticationDescriptor,{forceNewSession:!0})):r=i||t?await (0,E.c)(this.container,u.Q7.GitHub,this.authenticationDescriptor):await (0,E.c)(this.container,u.Q7.GitHub,this.authenticationDescriptor,{createIfNeeded:!0}),null!=r)return r;throw Error("User did not consent")}catch(s){if(s instanceof Error&&s.message.includes("User did not consent")){if(!t&&(await this.container.storage.store(`provider:authentication:skip:${this.descriptor.id}`,!0),!i))return e||queueMicrotask(async()=>{let e="Re-enable";await a.window.showInformationMessage("GitLens has been disabled. Authentication is required for GitLens to work with remote GitHub repositories.",e)===e&&this.ensureSession(!0)}),e=!1,r.call(this);throw new c.v3("github",c.R.UserDidNotConsent)}throw U.Vy.error(s),new c.v3("github",void 0,s)}}this._sessionPromise=r.call(this)}return this._sessionPromise}createVirtualUri(e,t,r){var i;let s;if("string"==typeof t)t&&(s=(0,R.HH)(t)?{v:1,ref:{id:t,type:2}}:{v:1,ref:{id:t,type:4}});else switch(t?.refType){case"revision":case"stash":s={v:1,ref:{id:t.ref,type:2}};break;case"branch":case"tag":s={v:1,ref:{id:t.name,type:4}}}if("string"==typeof e&&(e=a.Uri.parse(e,!0)),r){let t=e.path;t.endsWith("/")&&(t=t.slice(0,-1)),r=this.getRelativePath(r,e),r=`${t}/${r.startsWith("/")?r.slice(0,-1):r}`}return e.with({scheme:l.xB.Virtual,authority:(i=s,`github${null!=i?`+${(0,n.l)(JSON.stringify(i))}`:""}`),path:r??e.path})}createProviderUri(e,t,r){let i=this.createVirtualUri(e,t,r);return null==this._remotehub?i.scheme!==l.xB.Virtual?i:i.with({scheme:l.xB.GitHub}):this._remotehub.getProviderUri(i)}getPagingLimit(e){return 0===(e=Math.min(100,e??$.H.get("advanced.maxListItems")??100))&&(e=100),e}async resolveReferenceCore(e,t,r){if(null==r||"HEAD"===r)return(await t.getRevision()).revision;if((0,R.HH)(r))return r;if((0,R.p8)(r))return;let[i,s]=await Promise.allSettled([this.branches.getBranches(e,{filter:e=>e.name===r}),this.tags.getTags(e,{filter:e=>e.name===r})]);return r=G.Ro(i)?.values[0]?.sha??G.Ro(s)?.values[0]?.sha}};async function eE(e,t,r){let s=!1;for(;;)try{return await r(e)}catch(r){if(!s&&(/No provider registered/i.test(r.message)||null==t.getProvider(e))){i??=t.loadWorkspaceContents(e);try{await i,s=!0;continue}catch{}}throw r}}function eT(e){return e?.replace(/(?:^|(?<=..))origin\//,"")}eD([(0,S.Rm)()],GitHubGitProvider.prototype,"getBestRevisionUri",1),eD([(0,S.Rm)()],GitHubGitProvider.prototype,"getWorkingUri",1),eD([(0,S.Rm)({args:{1:e=>e.length}})],GitHubGitProvider.prototype,"excludeIgnoredUris",1),eD([(0,q.G)(),(0,S.Yz)()],GitHubGitProvider.prototype,"findRepositoryUri",1),eD([(0,q.G)((e,t)=>`${e.toString()}|${t?.isDirty}`),(0,S.Rm)({args:{1:e=>e?.isDirty}})],GitHubGitProvider.prototype,"getBlame",1),eD([(0,S.Rm)({args:{1:"<contents>"}})],GitHubGitProvider.prototype,"getBlameContents",1),eD([(0,q.G)((e,t,r,i)=>`${e.toString()}|${t}|${r?.isDirty}|${i?.forceSingleLine}`),(0,S.Rm)({args:{2:e=>e?.isDirty}})],GitHubGitProvider.prototype,"getBlameForLine",1),eD([(0,S.Rm)({args:{2:"<contents>"}})],GitHubGitProvider.prototype,"getBlameForLineContents",1),eD([(0,S.Rm)()],GitHubGitProvider.prototype,"getBlameForRange",1),eD([(0,S.Rm)({args:{2:"<contents>"}})],GitHubGitProvider.prototype,"getBlameForRangeContents",1),eD([(0,S.Rm)({args:{0:"<blame>"}})],GitHubGitProvider.prototype,"getBlameRange",1),eD([(0,S.Rm)()],GitHubGitProvider.prototype,"getChangedFilesCount",1),eD([(0,q.G)(),(0,S.Rm)()],GitHubGitProvider.prototype,"getCurrentUser",1),eD([(0,S.Rm)()],GitHubGitProvider.prototype,"getDiffForFile",1),eD([(0,S.Rm)({args:{1:e=>"<contents>"}})],GitHubGitProvider.prototype,"getDiffForFileContents",1),eD([(0,S.Rm)()],GitHubGitProvider.prototype,"getDiffForLine",1),eD([(0,S.Rm)()],GitHubGitProvider.prototype,"getDiffStatus",1),eD([(0,S.Rm)()],GitHubGitProvider.prototype,"getNextComparisonUris",1),eD([(0,S.Rm)()],GitHubGitProvider.prototype,"getPreviousComparisonUris",1),eD([(0,S.Rm)()],GitHubGitProvider.prototype,"getPreviousComparisonUrisForLine",1),eD([(0,S.Rm)()],GitHubGitProvider.prototype,"getIncomingActivity",1),eD([(0,S.Rm)()],GitHubGitProvider.prototype,"getRevisionContent",1),eD([(0,S.Rm)()],GitHubGitProvider.prototype,"getTreeEntryForRevision",1),eD([(0,S.Rm)()],GitHubGitProvider.prototype,"getTreeForRevision",1),eD([(0,S.Rm)()],GitHubGitProvider.prototype,"hasBranchOrTag",1),eD([(0,S.Rm)()],GitHubGitProvider.prototype,"resolveReference",1),eD([(0,S.Rm)()],GitHubGitProvider.prototype,"validateBranchOrTagName",1),eD([(0,S.Rm)()],GitHubGitProvider.prototype,"validateReference",1),eD([(0,q.G)()],GitHubGitProvider.prototype,"ensureRepositoryContext",1),eD([(0,q.G)()],GitHubGitProvider.prototype,"ensureGitHub",1)},3744:(e,t,r)=>{r.r(t),r.d(t,{fromCommitFileStatus:()=>y,fromGitHubIssue:()=>f,fromGitHubIssueOrPullRequestState:()=>n,fromGitHubPullRequest:()=>m,fromGitHubPullRequestLite:()=>a,fromGitHubPullRequestMergeableState:()=>h,fromGitHubPullRequestReviewDecision:()=>u,fromGitHubPullRequestReviewState:()=>c,fromGitHubPullRequestStatusCheckRollupState:()=>p,toGitHubPullRequestMergeableState:()=>g,toGitHubPullRequestReviewDecision:()=>d,toGitHubPullRequestState:()=>l});var i=r(9286),s=r(3339),o=r(3444);function a(e,t){return new o.B9(t,{id:e.author.login,name:e.author.login,avatarUrl:e.author.avatarUrl,url:e.author.url},String(e.number),e.id,e.title,e.permalink,{owner:e.repository.owner.login,repo:e.repository.name,accessLevel:v(e.repository.viewerPermission)},n(e.state),new Date(e.createdAt),new Date(e.updatedAt),null==e.closedAt?void 0:new Date(e.closedAt),null==e.mergedAt?void 0:new Date(e.mergedAt),void 0,void 0,{head:{exists:null!=e.headRepository,owner:e.headRepository?.owner.login,repo:e.headRepository?.name,sha:e.headRefOid,branch:e.headRefName,url:e.headRepository?.url},base:{exists:null!=e.repository,owner:e.repository?.owner.login,repo:e.repository?.name,sha:e.baseRefOid,branch:e.baseRefName,url:e.repository?.url},isCrossRepository:e.isCrossRepository},e.isDraft)}function n(e){return"MERGED"===e?"merged":"CLOSED"===e?"closed":"opened"}function l(e){return"merged"===e?"MERGED":"closed"===e?"CLOSED":"OPEN"}function u(e){switch(e){case"APPROVED":return o.dq.Approved;case"CHANGES_REQUESTED":return o.dq.ChangesRequested;case"REVIEW_REQUIRED":return o.dq.ReviewRequired}}function c(e){switch(e){case"APPROVED":return o.c7.Approved;case"CHANGES_REQUESTED":return o.c7.ChangesRequested;case"COMMENTED":return o.c7.Commented;case"DISMISSED":return o.c7.Dismissed;case"PENDING":return o.c7.Pending}}function d(e){switch(e){case o.dq.Approved:return"APPROVED";case o.dq.ChangesRequested:return"CHANGES_REQUESTED";case o.dq.ReviewRequired:return"REVIEW_REQUIRED"}}function h(e){switch(e){case"MERGEABLE":return o.Q6.Mergeable;case"CONFLICTING":return o.Q6.Conflicting;case"UNKNOWN":return o.Q6.Unknown}}function g(e){switch(e){case o.Q6.Mergeable:return"MERGEABLE";case o.Q6.Conflicting:return"CONFLICTING";case o.Q6.FailingChecks:case o.Q6.BlockedByPolicy:case o.Q6.Unknown:return"UNKNOWN"}}function p(e){switch(e){case"SUCCESS":case"EXPECTED":return o.gI.Success;case"FAILURE":case"ERROR":return o.gI.Failed;case"PENDING":return o.gI.Pending;default:return}}function m(e,t){return new o.B9(t,{id:e.author.login,name:e.author.login,avatarUrl:e.author.avatarUrl,url:e.author.url},String(e.number),e.id,e.title,e.permalink,{owner:e.repository.owner.login,repo:e.repository.name,accessLevel:v(e.repository.viewerPermission)},n(e.state),new Date(e.createdAt),new Date(e.updatedAt),null==e.closedAt?void 0:new Date(e.closedAt),null==e.mergedAt?void 0:new Date(e.mergedAt),h(e.mergeable),e.viewerCanUpdate,{head:{exists:null!=e.headRepository,owner:e.headRepository?.owner.login,repo:e.headRepository?.name,sha:e.headRefOid,branch:e.headRefName,url:e.headRepository?.url},base:{exists:null!=e.repository,owner:e.repository?.owner.login,repo:e.repository?.name,sha:e.baseRefOid,branch:e.baseRefName,url:e.repository?.url},isCrossRepository:e.isCrossRepository},e.isDraft,e.additions,e.deletions,e.totalCommentsCount,0,u(e.reviewDecision),e.reviewRequests.nodes.map(e=>null!=e.requestedReviewer?{isCodeOwner:e.asCodeOwner,reviewer:{id:e.requestedReviewer.login,name:e.requestedReviewer.login,avatarUrl:e.requestedReviewer.avatarUrl,url:e.requestedReviewer.url},state:o.c7.ReviewRequested}:void 0).filter(e=>!!e),e.latestReviews.nodes.map(e=>({reviewer:{id:e.author.login,name:e.author.login,avatarUrl:e.author.avatarUrl,url:e.author.url},state:c(e.state)})),e.assignees.nodes.map(e=>({id:e.login,name:e.login,avatarUrl:e.avatarUrl,url:e.url})),p(e.commits.nodes?.[0]?.commit.statusCheckRollup?.state))}function f(e,t){return new s.m2({id:t.id,name:t.name,domain:t.domain,icon:t.icon},String(e.number),e.id,e.title,e.url,new Date(e.createdAt),new Date(e.updatedAt),e.closed,n(e.state),{id:e.author.login,name:e.author.login,avatarUrl:e.author.avatarUrl,url:e.author.url},e.assignees.nodes.map(e=>({id:e.login,name:e.login,avatarUrl:e.avatarUrl,url:e.url})),{owner:e.repository.owner.login,repo:e.repository.name,accessLevel:v(e.repository.viewerPermission),url:e.repository.url},null==e.closedAt?void 0:new Date(e.closedAt),e.labels?.nodes==null?void 0:e.labels.nodes.map(e=>({color:e.color,name:e.name})),e.comments?.totalCount,e.reactions?.totalCount,e.body)}function v(e){switch(e){case"ADMIN":return s.LI.Admin;case"MAINTAIN":return s.LI.Maintain;case"WRITE":return s.LI.Write;case"TRIAGE":return s.LI.Triage;case"READ":return s.LI.Read;default:return s.LI.None}}function y(e){switch(e){case"added":return i.NO.Added;case"changed":case"modified":return i.NO.Modified;case"removed":return i.NO.Deleted;case"renamed":return i.NO.Renamed;case"copied":return i.NO.Copied}}},5071:(e,t,r)=>{r.r(t),r.d(t,{GitLabIntegration:()=>GitLabIntegration,GitLabSelfHostedIntegration:()=>GitLabSelfHostedIntegration});var i=r(1398),s=r(1646),o=r(4007),a=r(5270),n=r(9064),l=r(9709),u=r(7654),c=r(6760),d=r(3758),h=Object.defineProperty,g=Object.getOwnPropertyDescriptor;let p=d.Mt[s.Q7.GitLab],m=Object.freeze({id:p.id,scopes:p.scopes}),f=d.Mt[s.PY.GitLabSelfHosted],v=Object.freeze({id:f.id,scopes:f.scopes}),y=d.Mt[s.PY.CloudGitLabSelfHosted],w=Object.freeze({id:y.id,scopes:y.scopes});let GitLabIntegrationBase=class GitLabIntegrationBase extends l.T5{async getProviderAccountForCommit({accessToken:e},t,r,i){return(await this.container.gitlab)?.getAccountForCommit(this,e,t.owner,t.name,r,{...i,baseUrl:this.apiBaseUrl})}async getProviderAccountForEmail({accessToken:e},t,r,i){return(await this.container.gitlab)?.getAccountForEmail(this,e,t.owner,t.name,r,{...i,baseUrl:this.apiBaseUrl})}async getProviderDefaultBranch({accessToken:e},t){return(await this.container.gitlab)?.getDefaultBranch(this,e,t.owner,t.name,{baseUrl:this.apiBaseUrl})}async getProviderIssueOrPullRequest({accessToken:e},t,r){return(await this.container.gitlab)?.getIssueOrPullRequest(this,e,t.owner,t.name,Number(r),{baseUrl:this.apiBaseUrl})}async getProviderIssue({accessToken:e},t,r){let i=await this.container.gitlab,o=await this.getProvidersApi(),a=this.id===s.PY.GitLabSelfHosted||this.id===s.PY.CloudGitLabSelfHosted;if(!i||!t||!r||!await i.getProjectId(this,e,t.owner,t.name,this.apiBaseUrl,void 0))return;let n=await o.getIssue(this.id,{namespace:t.owner,name:t.name,number:r},{accessToken:e,isPAT:a,baseUrl:a?`https://${this.domain}`:void 0}),l=null!=n?d.oH(n,this)?.issue:void 0;return null!=l?{...l,type:"issue"}:void 0}async getProviderPullRequestForBranch({accessToken:e},t,i,s){let{include:o,...a}=s??{},n=(await Promise.resolve().then(r.bind(r,6760))).toGitLabMergeRequestState;return(await this.container.gitlab)?.getPullRequestForBranch(this,e,t.owner,t.name,i,{...a,include:o?.map(e=>n(e)),baseUrl:this.apiBaseUrl})}async getProviderPullRequestForCommit({accessToken:e},t,r){return(await this.container.gitlab)?.getPullRequestForCommit(this,e,t.owner,t.name,r,{baseUrl:this.apiBaseUrl})}async getProviderPullRequest({accessToken:e},t,r){return(await this.container.gitlab)?.getPullRequest(this,e,t.owner,t.name,parseInt(r,10),{baseUrl:this.apiBaseUrl})}async getProviderRepositoryMetadata({accessToken:e},t,r){return(await this.container.gitlab)?.getRepositoryMetadata(this,e,t.owner,t.name,{baseUrl:this.apiBaseUrl},r)}async searchProviderMyPullRequests({accessToken:e},t){var r,i;let o;let n=await this.getProvidersApi(),l=this.id===s.PY.GitLabSelfHosted||this.id===s.PY.CloudGitLabSelfHosted,u=(await this.getCurrentAccount())?.username;if(!u)return Promise.resolve([]);let h=await n.getPullRequestsForUser(this.id,u,{accessToken:e,isPAT:l,baseUrl:l?`https://${this.domain}`:void 0});if(null==h)return Promise.resolve([]);if(null!=t){let e=new Map;for(let r of t)e.set(`${r.owner}/${r.name}`,r);o=h.values.filter(t=>null!=e.get(`${t.repository.owner.login}/${t.repository.name}`))}else o=h.values;let g=(e,t)=>({pullRequest:(0,c.fromGitLabMergeRequestProvidersApi)(e,this),reasons:t?[t]:[]});return r=[...o.flatMap(e=>{let t=[];return e.assignees?.some(e=>e.username===u)&&t.push(g(e,"assigned")),e.reviews?.some(e=>e.reviewer?.username===u||e.state===d.lE.ReviewRequested)&&t.push(g(e,"review-requested")),e.author?.username===u&&t.push(g(e,"authored")),t})],i=e=>e.pullRequest.url,[...(0,a.pD)(r,i,(e,t)=>(0!==t.reasons.length&&e.reasons.push(...t.reasons),e))]}async searchProviderMyIssues({accessToken:e},t){let r=await this.container.gitlab,i=await this.getProvidersApi(),o=this.id===s.PY.GitLabSelfHosted||this.id===s.PY.CloudGitLabSelfHosted;if(!r||!t)return;let a=(await Promise.allSettled(t.map(t=>r.getProjectId(this,e,t.owner,t.name,this.apiBaseUrl,void 0))??[])).map(e=>"fulfilled"===e.status?e.value:void 0).filter(e=>null!=e);return(await i.getIssuesForRepos(this.id,a,{accessToken:e,isPAT:o,baseUrl:o?`https://${this.domain}`:void 0})).values.map(e=>(0,d.oH)(e,this)).filter(e=>null!=e)}async searchProviderPullRequests({accessToken:e},t,r,i){let s=await this.container.gitlab;if(s)return s.searchPullRequests(this,e,{search:t,repos:r?.map(e=>`${e.owner}/${e.name}`),baseUrl:this.apiBaseUrl},i)}async mergeProviderPullRequest({accessToken:e},t,r){if(!this.isPullRequest(t))return!1;let i=await this.getProvidersApi(),o=this.id===s.PY.GitLabSelfHosted||this.id===s.PY.CloudGitLabSelfHosted;try{return await i.mergePullRequest(this.id,t,{...r,isPAT:o,baseUrl:o?`https://${this.domain}`:void 0,accessToken:e})}catch(e){return this.showMergeErrorMessage(e),!1}}async showMergeErrorMessage(e){let t="Reauthenticate";await i.window.showErrorMessage(`${e.message}. Would you like to try reauthenticating to provide additional access? Your token needs to have the 'api' scope to perform merge.`,t)===t&&await this.reauthenticate()}isPullRequest(e){return null!=e.refs}async getProviderCurrentAccount({accessToken:e}){let t=await this.getProvidersApi(),r=this.id===s.PY.GitLabSelfHosted||this.id===s.PY.CloudGitLabSelfHosted,i=await t.getCurrentUser(this.id,{accessToken:e,isPAT:r,baseUrl:r?`https://${this.domain}`:void 0});if(null!=i)return{provider:{id:this.id,name:this.name,domain:this.domain,icon:this.icon},id:i.id,name:i.name||void 0,email:i.email||void 0,avatarUrl:i.avatarUrl||void 0,username:i.username||void 0}}getProviderPullRequestIdentityFromMaybeUrl(e){return(0,u.f)(e)}};let GitLabIntegration=class GitLabIntegration extends GitLabIntegrationBase{authProvider=m;id=s.Q7.GitLab;key=this.id;name="GitLab";get domain(){return p.domain}get apiBaseUrl(){return"https://gitlab.com/api"}access(){return Promise.resolve(!0)}};let GitLabSelfHostedIntegration=class GitLabSelfHostedIntegration extends GitLabIntegrationBase{constructor(e,t,r,i,o){super(e,t,r),this._domain=i,this.id=o,this.key=`${this.id}:${this.domain}`,this.authProvider=this.id===s.PY.GitLabSelfHosted?v:w}authProvider=v;key;name="GitLab Self-Hosted";get domain(){return this._domain}get apiBaseUrl(){return`https://${this._domain}/api`}async connect(e){return!!await (0,n.KH)(this.container,`Rich integration with ${this.name} is a Pro feature.`,{source:"integrations",detail:{action:"connect",integration:this.id}})&&super.connect(e)}};((e,t,r,i)=>{for(var s,o=g(t,r),a=e.length-1;a>=0;a--)(s=e[a])&&(o=s(t,r,o)||o);return i&&o&&h(t,r,o)})([(0,o.Rm)()],GitLabSelfHostedIntegration.prototype,"connect",1)},1465:(e,t,r)=>{r.r(t),r.d(t,{GitLabApi:()=>GitLabApi});var i=r(1398),s=r(7223),o=r(2856),a=r(4039),n=r(3444),l=r(6468),u=r(4143),c=r(4007),d=r(4064),h=r(6450),g=r(1165),p=r(7603),m=r(6760),f=Object.defineProperty,v=Object.getOwnPropertyDescriptor,y=(e,t,r,i)=>{for(var s,o=i>1?void 0:i?v(t,r):t,a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i?s(t,r,o):s(o))||o);return i&&o&&f(t,r,o),o};let w="gid://gitlab/User/";function b(e){return"string"==typeof e&&e?.startsWith(w)?e.substring(w.length):String(e)}let GitLabApi=class GitLabApi{_disposable;_projectIds=new Map;constructor(e){this._disposable=u.H.onDidChangeAny(e=>{(u.H.changedCore(e,["http.proxy","http.proxyStrictSSL"])||u.H.changed(e,["proxy","remotes"]))&&this.resetCaches()})}dispose(){this._disposable.dispose()}resetCaches(){this._projectIds.clear(),this._proxyAgents.clear()}_proxyAgents=new Map;getProxyAgent(e){if(o.HZ)return;let t=this._proxyAgents.get(e.id);if(void 0===t){let r=e.getIgnoreSSLErrors();t=(0,s.cQ)(!0!==r&&"force"!==r&&void 0),this._proxyAgents.set(e.id,t??null)}return t??void 0}async getAccountForCommit(e,t,r,s,o,n,l){let u=(0,h.dQ)(),c=await this.getProjectId(e,t,r,s,n?.baseUrl,l);if(c)try{let r;let s=await this.request(e,t,n?.baseUrl,`v4/projects/${c}/repository/commits/${o}?stats=false`,{method:"GET"},l,u);for(let i of(await this.findUser(e,t,s.author_name,n)))if(i.name===s.author_name||i.publicEmail&&i.publicEmail===s.author_email){if(r=i,"active"===i.state)break}else((0,p.Q_)(i.name,s.author_name)||i.publicEmail&&(0,p.Q_)(i.publicEmail,s.author_email))&&(r=i);if(null==r)return;return r.avatarUrl&&!/^([a-zA-Z][\w+.-]+):/.test(r.avatarUrl)&&(r.avatarUrl=i.Uri.joinPath(i.Uri.parse(r.webUrl),"..",r.avatarUrl).toString()),{provider:e,id:String(r.id),name:r.name||void 0,email:s.author_email||void 0,avatarUrl:r.avatarUrl||void 0,username:r.username||void 0}}catch(t){if(t instanceof a.LN)return;throw this.handleException(t,e,u)}}async getAccountForEmail(e,t,r,i,s,o){let n=(0,h.dQ)();try{let[r]=await this.findUser(e,t,s,o);if(null==r)return;return{provider:e,id:String(r.id),name:r.name||void 0,email:r.publicEmail||void 0,avatarUrl:r.avatarUrl||void 0,username:r.username||void 0}}catch(t){if(t instanceof a.LN)return;throw this.handleException(t,e,n)}}async getDefaultBranch(e,t,r,i,s,o){let n=(0,h.dQ)();try{let a=`query getDefaultBranch(
	$fullPath: ID!
) {
	project(fullPath: $fullPath) {
		repository {
			rootRef
		}
}`,l=await this.graphql(e,t,s?.baseUrl,a,{fullPath:`${r}/${i}`},o,n),u=l?.data?.project?.repository?.rootRef??void 0;if(null==u)return;return{provider:e,name:u}}catch(t){if(t instanceof a.LN)return;throw this.handleException(t,e,n)}}async getIssueOrPullRequest(e,t,r,i,s,o,n){let l=(0,h.dQ)();try{let a=`query getIssueOrMergeRequest(
	$fullPath: ID!
	$iid: String!
) {
	project(fullPath: $fullPath) {
		mergeRequest(iid: $iid) {
			author {
				id
				name
				avatarUrl
				webUrl
			}
			iid
			title
			description
			state
			createdAt
			updatedAt
			mergedAt
			webUrl
		}
		issue(iid: $iid) {
			author {
				id
				name
				avatarUrl
				webUrl
			}
			iid
			title
			description
			state
			createdAt
			updatedAt
			closedAt
			webUrl
		}
	}
}`,u=await this.graphql(e,t,o?.baseUrl,a,{fullPath:`${r}/${i}`,iid:String(s)},n,l);if(u?.data?.project?.issue!=null){let t=u.data.project.issue;return{provider:e,type:"issue",id:t.iid,nodeId:void 0,createdDate:new Date(t.createdAt),updatedDate:new Date(t.updatedAt),title:t.title,closed:"closed"===t.state,closedDate:null==t.closedAt?void 0:new Date(t.closedAt),url:t.webUrl,state:"locked"===t.state?"closed":t.state}}if(u?.data?.project?.mergeRequest!=null){let t=u.data.project.mergeRequest;return{provider:e,type:"pullrequest",id:t.iid,nodeId:void 0,createdDate:new Date(t.createdAt),updatedDate:new Date(t.updatedAt),title:t.title,closed:"closed"===t.state,closedDate:"closed"===t.state?new Date(t.updatedAt):void 0,url:t.webUrl,state:"locked"===t.state?"closed":t.state}}return}catch(t){if(t instanceof a.LN)return;throw this.handleException(t,e,l)}}async getPullRequestForBranch(e,t,r,i,s,o,l){let u=(0,h.dQ)();try{let a;let c=`
			nodes {
				iid
				author {
					id
					name
					avatarUrl
					webUrl
				}
				title
				description
				state
				createdAt
				updatedAt
				mergedAt
				webUrl
			}`,d=`query getMergeRequestForBranch(
	$fullPath: ID!
	$branches: [String!]
) {
	project(fullPath: $fullPath) {
		${o?.include==null?`mergeRequests(sourceBranches: $branches sort: UPDATED_DESC first: 1) {
			${c}
		}`:""}
		${o?.include?.includes("opened")?`opened: mergeRequests(sourceBranches: $branches state: opened sort: UPDATED_DESC first: 1) {
			${c}
		}`:""}
		${o?.include?.includes("merged")?`merged: mergeRequests(sourceBranches: $branches state: merged sort: UPDATED_DESC first: 1) {
			${c}
		}`:""}
		${o?.include?.includes("closed")?`closed: mergeRequests(sourceBranches: $branches state: closed sort: UPDATED_DESC first: 1) {
			${c}
		}`:""}
	}
}`,h=await this.graphql(e,t,o?.baseUrl,d,{fullPath:`${r}/${i}`,branches:[s],state:o?.include},l,u);if(o?.include==null)a=h?.data?.project?.mergeRequests?.nodes?.[0];else for(let e of o.include){let t;"opened"===e?t=h?.data?.project?.opened?.nodes?.[0]:"merged"===e?t=h?.data?.project?.merged?.nodes?.[0]:"closed"===e&&(t=h?.data?.project?.closed?.nodes?.[0]),null!=t&&(null==a||new Date(t.updatedAt)>new Date(a.updatedAt))&&(a=t)}if(null==a)return;return new n.B9(e,{id:b(a.author?.id)??"",name:a.author?.name??"Unknown",avatarUrl:a.author?.avatarUrl??"",url:a.author?.webUrl??""},String(a.iid),void 0,a.title,a.webUrl,{owner:r,repo:i},(0,m.fromGitLabMergeRequestState)(a.state),new Date(a.createdAt),new Date(a.updatedAt),"closed"!==a.state?void 0:new Date(a.updatedAt),null==a.mergedAt?void 0:new Date(a.mergedAt))}catch(t){if(t instanceof a.LN)return;throw this.handleException(t,e,u)}}async getPullRequestForCommit(e,t,r,i,s,o,n){let l=(0,h.dQ)(),u=await this.getProjectId(e,t,r,i,o?.baseUrl,n);if(u)try{let a=await this.request(e,t,o?.baseUrl,`v4/projects/${u}/repository/commits/${s}/merge_requests`,{method:"GET"},n,l);if(null==a||0===a.length)return;return a.length>1&&a.sort((e,t)=>("opened"===e.state?-1:1)-("opened"===t.state?-1:1)||new Date(t.updated_at).getTime()-new Date(e.updated_at).getTime()),(0,m.fromGitLabMergeRequestREST)(a[0],e,{owner:r,repo:i})}catch(t){if(t instanceof a.LN)return;throw this.handleException(t,e,l)}}async getPullRequest(e,t,r,i,s,o,n){let l=(0,h.dQ)();try{let a=`query getMergeRequest(
	$fullPath: ID!
	$iid: String!
) {
	project(fullPath: $fullPath) {
		mergeRequest(iid: $iid) {
			id,
			iid
			state,
			author {
				id
				name
				avatarUrl
				webUrl
			}
			diffRefs {
				baseSha
				headSha
			}
			title
			description
			webUrl
			createdAt
			updatedAt
			mergedAt
			targetBranch
			sourceBranch
			project {
				id
				fullPath
				webUrl
			}
			sourceProject {
				id
				fullPath
				webUrl
			}
		}
	}
}`,u=await this.graphql(e,t,o?.baseUrl,a,{fullPath:`${r}/${i}`,iid:String(s)},n,l);if(u?.data?.project?.mergeRequest==null)return;let c=u.data.project.mergeRequest;return(0,m.fromGitLabMergeRequest)(c,e)}catch(t){if(t instanceof a.LN)return;throw this.handleException(t,e,l)}}async getRepositoryMetadata(e,t,r,i,s,o){let n=(0,h.dQ)(),l=await this.getProjectId(e,t,r,i,s?.baseUrl,o);if(l)try{let r=await this.request(e,t,s?.baseUrl,`v4/projects/${l}`,{method:"GET"},o,n);if(null==r)return;return{provider:e,owner:r.namespace.full_path,name:r.path,isFork:null!=r.forked_from_project,parent:null!=r.forked_from_project?{owner:r.forked_from_project.namespace.full_path,name:r.forked_from_project.path}:void 0}}catch(t){if(t instanceof a.LN)return;throw this.handleException(t,e,n)}}async searchPullRequests(e,t,r,i){let s=(0,h.dQ)(),o=r?.search;if(!o)return[];try{let a=await this.request(e,t,r?.baseUrl,`v4/search/?scope=merge_requests&search=${o}&per_page=20`,{method:"GET"},i,s);if(0===a.length)return[];let n=a.map((e,t)=>`$id_${t}: MergeRequestID!`).join("\n"),l=a.map((e,t)=>`mergeRequest_${t}: mergeRequest(id: $id_${t}) { ...mergeRequestFields }`).join("\n"),u=`fragment mergeRequestFields on MergeRequest {
				diffRefs {
					baseSha
					headSha
				}
				project {
					id
					fullPath
					webUrl
				}
				sourceProject {
					id
					fullPath
					webUrl
				}
			}`,c=`query getMergeRequests (${n}) {${l}} ${u}`,d=a.reduce((e,t,r)=>(e[`id_${r}`]=`gid://gitlab/MergeRequest/${t.id}`,e),{}),h=await this.graphql(e,t,r?.baseUrl,c,d,i,s);if(h?.data!=null)return a.reduce((t,r,i)=>{let s=h.data[`mergeRequest_${i}`];if(null==s)return t;let o={...s,iid:String(r.iid),id:String(r.id),state:r.state,author:{id:b(r.author?.id)??"",name:r.author?.name??"Unknown",avatarUrl:r.author?.avatar_url??"",webUrl:r.author?.web_url??""},title:r.title,description:r.description,webUrl:r.web_url,createdAt:r.created_at,updatedAt:r.updated_at,mergedAt:r.merged_at,sourceBranch:r.source_branch,targetBranch:r.target_branch};return t.push((0,m.fromGitLabMergeRequest)(o,e)),t},[]);return[]}catch(t){if(t instanceof a.LN)return[];throw this.handleException(t,e,s)}}async findUser(e,t,r,i,s){let o=(0,h.dQ)();try{let a=`query findUser(
$search: String!
) {
	users(search: $search) {
		nodes {
			id
			name
			username,
			publicEmail,
			state
			avatarUrl
			webUrl
		}
	}
}`,n=await this.graphql(e,t,i?.baseUrl,a,{search:r},s,o),l=n?.data?.users?.nodes;if(null==l||0===l.length)return[];let u=[];for(let e of l){let t=/gid:\/\/gitlab\/User\/([0-9]+)\b/.exec(e.id);null!=t&&u.push({id:parseInt(t[1],10),name:e.name,username:e.username,publicEmail:e.publicEmail||void 0,state:e.state,avatarUrl:e.avatarUrl,webUrl:e.webUrl})}return u}catch(t){if(t instanceof a.LN)return[];return this.handleException(t,e,o),[]}}getProjectId(e,t,r,i,s,o){let a=`${t}|${r}/${i}`,n=this._projectIds.get(a);return null==n&&(n=this.getProjectIdCore(e,t,r,i,s,o),this._projectIds.set(a,n)),n}async getProjectIdCore(e,t,r,i,s,o){let n=(0,h.dQ)();try{let a=`query getProjectId(
	$fullPath: ID!
) {
	project(fullPath: $fullPath) {
		id
	}
}`,l=await this.graphql(e,t,s,a,{fullPath:`${r}/${i}`},o,n),u=l?.data?.project?.id;if(null==u)return;let c=/gid:\/\/gitlab\/Project\/([0-9]+)\b/.exec(u);if(null==c)return;let d=c[1];return(0,h.TT)(n,` \u2022 projectId=${d}`),d}catch(t){if(t instanceof a.LN)return;this.handleException(t,e,n);return}}async graphql(e,t,r,o,n,l,u){let c;try{let i=(0,g.u)(`[GITLAB] POST ${r}`,{log:!1}),u=this.getProxyAgent(e);try{let i;if(null!=l){if(l.isCancellationRequested)throw new a.AL;i=new AbortController,l.onCancellationRequested(()=>i.abort())}if((c=await (0,s.Ff)(e.getIgnoreSSLErrors(),()=>(0,s.hd)(`${r??"https://gitlab.com/api"}/graphql`,{method:"POST",headers:{Authorization:`Bearer ${t}`,"Content-Type":"application/json"},agent:u,signal:i?.signal,body:JSON.stringify({query:o,variables:n})}))).ok){let e=await c.json();if("errors"in e)throw new a.QI("GitLab",c,e.errors);return e}throw new a.QI("GitLab",c)}finally{let e=/(^[^({\n]+)/.exec(o),t=` ${e?.[1].trim()??o}`;i?.stop({message:t})}}catch(r){throw r instanceof a.QI||"AbortError"===r.name?this.handleRequestError(e,t,r,u):d.Vy.isDebugging&&i.window.showErrorMessage(`GitLab request failed: ${r.message}`),r}}async request(e,t,r,o,n,l,u){let c;let h=`${r??"https://gitlab.com/api"}/${o}`;try{let r=(0,g.u)(`[GITLAB] ${n?.method??"GET"} ${h}`,{log:!1}),i=this.getProxyAgent(e);try{let r;if(null!=l){if(l.isCancellationRequested)throw new a.AL;r=new AbortController,l.onCancellationRequested(()=>r.abort())}if((c=await (0,s.Ff)(e.getIgnoreSSLErrors(),()=>(0,s.hd)(h,{headers:{Authorization:`Bearer ${t}`,"Content-Type":"application/json"},agent:i,signal:r?.signal,...n}))).ok)return await c.json();throw new a.QI("GitLab",c)}finally{r?.stop()}}catch(r){throw r instanceof a.QI||"AbortError"===r.name?this.handleRequestError(e,t,r,u):d.Vy.isDebugging&&i.window.showErrorMessage(`GitLab request failed: ${r.message}`),r}}handleRequestError(e,t,r,s){if("AbortError"===r.name||!(r instanceof a.QI))throw new a.AL(r);switch(r.status){case 404:case 410:case 422:throw new a.LN(r);case 401:throw new a.v3("gitlab",a.R.Unauthorized,r);case 403:if(r.message.includes("rate limit exceeded")){let e;let i=r.response?.headers?.get("x-ratelimit-reset");throw null!=i&&Number.isNaN(e=parseInt(i,10))&&(e=void 0),new a.HG(r,t,e)}throw new a.v3("gitlab",a.R.Forbidden,r);case 500:d.Vy.error(r,s),null!=r.response&&(e?.trackRequestException(),(0,l.wW)(`${e?.name??"GitLab"} failed to respond and might be experiencing issues.${null==e||"gitlab"===e.id?" Please visit the [GitLab status page](https://status.gitlab.com) for more information.":""}`));return;case 502:if(d.Vy.error(r,s),r.message.includes("timeout")){e?.trackRequestException(),(0,l.lW)(e?.name??"GitLab");return}break;default:if(r.status>=400&&r.status<500)throw new a.tk(r)}d.Vy.error(r,s),d.Vy.isDebugging&&i.window.showErrorMessage(`GitLab request failed: ${r.response?.errors?.[0]?.message??r.message}`)}handleException(e,t,r){return d.Vy.error(e,r),e instanceof a.v3&&this.showAuthenticationErrorMessage(e,t),e}async showAuthenticationErrorMessage(e,t){if(e.reason===a.R.Unauthorized||e.reason===a.R.Forbidden){let r="Reauthenticate";await i.window.showErrorMessage(`${e.message}. Would you like to try reauthenticating${e.reason===a.R.Forbidden?" to provide additional access":""}?`,r)===r&&(await t.reauthenticate(),this.resetCaches())}else i.window.showErrorMessage(e.message)}};y([(0,c.Yz)({args:{0:e=>e.name,1:"<token>"}})],GitLabApi.prototype,"getAccountForCommit",1),y([(0,c.Yz)({args:{0:e=>e.name,1:"<token>"}})],GitLabApi.prototype,"getAccountForEmail",1),y([(0,c.Yz)({args:{0:e=>e.name,1:"<token>"}})],GitLabApi.prototype,"getDefaultBranch",1),y([(0,c.Yz)({args:{0:e=>e.name,1:"<token>"}})],GitLabApi.prototype,"getIssueOrPullRequest",1),y([(0,c.Yz)({args:{0:e=>e.name,1:"<token>"}})],GitLabApi.prototype,"getPullRequestForBranch",1),y([(0,c.Yz)({args:{0:e=>e.name,1:"<token>"}})],GitLabApi.prototype,"getPullRequestForCommit",1),y([(0,c.Yz)({args:{0:e=>e.name,1:"<token>"}})],GitLabApi.prototype,"getPullRequest",1),y([(0,c.Yz)({args:{0:e=>e.name,1:"<token>"}})],GitLabApi.prototype,"getRepositoryMetadata",1),y([(0,c.Yz)({args:{0:e=>e.name,1:"<token>"}})],GitLabApi.prototype,"searchPullRequests",1)},6760:(e,t,r)=>{r.r(t),r.d(t,{fromGitLabMergeRequest:()=>u,fromGitLabMergeRequestProvidersApi:()=>l,fromGitLabMergeRequestREST:()=>n,fromGitLabMergeRequestState:()=>o,toGitLabMergeRequestState:()=>a});var i=r(3444),s=r(3758);function o(e){return"locked"===e?"closed":e}function a(e){return e}function n(e,t,r){return new i.B9(t,{id:e.author?.id??"",name:e.author?.name??"Unknown",avatarUrl:e.author?.avatar_url??"",url:e.author?.web_url??""},String(e.iid),void 0,e.title,e.web_url,r,o(e.state),new Date(e.created_at),new Date(e.updated_at),null==e.closed_at?void 0:new Date(e.closed_at),null==e.merged_at?void 0:new Date(e.merged_at))}function l(e,t){let r={...e,id:String(e.number),permissions:e.permissions??{canMerge:!0,canMergeAndBypassProtections:!1}};return(0,s.QF)(r,t)}function u(e,t){let r;try{r=new URL(e.author?.avatarUrl??"").toString()}catch{try{let t=new URL(e.author?.webUrl??"");t.pathname="",t.search="",t.hash="",r=e.author?.avatarUrl?t.toString()+e.author?.avatarUrl:void 0}catch{r=void 0}}let[s,a]=e.project.fullPath.split("/");return new i.B9(t,{id:e.author?.id??"",name:e.author?.name??"Unknown",avatarUrl:r,url:e.author?.webUrl??""},e.iid,e.id,e.title,e.webUrl||"",{owner:s,repo:a,url:e.project.webUrl},o(e.state),new Date(e.createdAt),new Date(e.updatedAt),"closed"!==e.state?void 0:new Date(e.updatedAt),null==e.mergedAt?void 0:new Date(e.mergedAt),i.Q6.Unknown,void 0,function(e){if(null!=e.sourceProject)return{base:{owner:c(e.sourceProject.fullPath),branch:e.sourceBranch,exists:!0,url:e.sourceProject.webUrl,repo:e.sourceProject.fullPath,sha:e.diffRefs?.baseSha||""},head:{owner:c(e.project.fullPath),branch:e.targetBranch,exists:!0,url:e.project.webUrl,repo:e.project.fullPath,sha:e.diffRefs?.headSha||""},isCrossRepository:e.sourceProject.id!==e.project.id}}(e))}function c(e){return e.split("/").slice(0,-1).join("/")}},7516:(e,t,r)=>{r.r(t),r.d(t,{JiraIntegration:()=>JiraIntegration});var i=r(1646),s=r(5270),o=r(4064),a=r(9709),n=r(3758);let l=n.Mt[i.tp.Jira],u=Object.freeze({id:l.id,scopes:l.scopes});let JiraIntegration=class JiraIntegration extends a.On{authProvider=u;id=i.tp.Jira;key=this.id;name="Jira";get domain(){return l.domain}get apiBaseUrl(){return"https://api.atlassian.com"}_autolinks;async autolinks(){if(!(this.maybeConnected??await this.isConnected())||null==this._session||null==this._organizations||null==this._projects)return[];let e=this._autolinks?.get(this._session.accessToken);if(null!=e)return e;let t=[],r=this._organizations.get(this._session.accessToken);if(null!=r)for(let e of r){let r=this._projects.get(`${this._session.accessToken}:${e.id}`);if(null!=r)for(let i of r){let r=`${i.key}-`;t.push({prefix:r,url:`${e.url}/browse/${r}<num>`,alphanumeric:!1,ignoreCase:!1,title:`Open Issue ${r}<num> on ${e.name}`,type:"issue",description:`${e.name} Issue ${r}<num>`,descriptor:{...e}})}}return this._autolinks??=new Map,this._autolinks.set(this._session.accessToken,t),t}async getProviderAccountForResource({accessToken:e},t){let r=await this.getProvidersApi(),i=await r.getCurrentUserForResource(this.id,t.id,{accessToken:e});if(null!=i)return(0,n.tf)(i,this)}_organizations;async getProviderResourcesForUser({accessToken:e},t=!1){if(this._organizations??=new Map,null==this._organizations.get(e)||t){let t=await this.getProvidersApi(),r=await t.getJiraResourcesForCurrentUser({accessToken:e});this._organizations.set(e,null!=r?r.map(e=>({...e,key:e.id})):void 0)}return this._organizations.get(e)}_projects;async getProviderProjectsForResources({accessToken:e},t,r=!1){this._projects??=new Map;let i=[];if(r)i=t;else for(let r of t){let t=`${e}:${r.id}`;null==this._projects.get(t)&&i.push(r)}if(i.length>0){let t=await this.getProvidersApi(),r=await t.getJiraProjectsForResources(i.map(e=>e.id),{accessToken:e});for(let t of i){let i=r?.filter(e=>e.resourceId===t.id);null!=i&&this._projects.set(`${e}:${t.id}`,i.map(e=>({...e})))}}return t.reduce((t,r)=>{let i=this._projects.get(`${e}:${r.id}`);return null!=i&&t.push(...i),t},[])}async getProviderIssuesForProject({accessToken:e},t,r){let i;let o=await this.getProvidersApi(),a=async(r,i)=>{let s=await o.getIssuesForProject(this.id,t.name,t.resourceId,{authorLogin:i===n.mN.Author?r:void 0,assigneeLogins:i===n.mN.Assignee?[r]:void 0,mentionLogin:i===n.mN.Mention?r:void 0,accessToken:e});return s?.map(e=>n.oH(e,this,i)).filter(e=>void 0!==e)};if(r?.user!=null&&r.filters.length>0){let e=Promise.allSettled(r.filters.map(e=>a(r.user,e)));i=[...(0,s.Bq)((0,s.x1)(await e,e=>"fulfilled"===e.status&&null!=e.value?e.value:void 0))];let t=new Map;for(let e of i)if(t.has(e.issue.id)){let r=t.get(e.issue.id);r.reasons=[...r.reasons,...e.reasons]}else t.set(e.issue.id,e);return[...t.values()]}return i=await o.getIssuesForProject(this.id,t.name,t.resourceId,{accessToken:e}),i?.map(e=>n.oH(e,this)).filter(e=>void 0!==e)}async searchProviderMyIssues(e,t,r){let i=t??await this.getProviderResourcesForUser(e);if(!i)return;let s=await this.getProvidersApi(),a=[];for(let t of i)try{let r;let i=(await this.getProviderAccountForResource(e,t))?.username,o=!1,l=0;do{let u=await s.getIssuesForResourceForCurrentUser(this.id,t.id,{accessToken:e.accessToken,cursor:r});l+=1,o=u.paging?.more??!1,r=u.paging?.cursor;let c=u.values.map(e=>(0,n.oH)(e,this,void 0,i)).filter(e=>null!=e);c.length>0&&a.push(...c)}while(l<10&&o)}catch(e){o.Vy.error(e,"searchProviderMyIssues")}return a}async getProviderIssueOrPullRequest(e,t,r){let i=await this.getProvidersApi(),s=(await this.getProviderAccountForResource(e,t))?.username,o=await i.getIssue(this.id,{resourceId:t.id,number:r},{accessToken:e.accessToken});return null!=o?n.oH(o,this,void 0,s)?.issue:void 0}async getProviderIssue(e,t,r){let i=await this.getProvidersApi(),s=(await this.getProviderAccountForResource(e,t))?.username,o=await i.getIssue(this.id,{resourceId:t.id,number:r},{accessToken:e.accessToken}),a=null!=o?n.oH(o,this,void 0,s)?.issue:void 0;return null!=a?{...a,type:"issue"}:void 0}async providerOnConnect(){if(this._autolinks=void 0,null==this._session)return;let e=this.container.storage.get(`jira:${this._session.accessToken}:organizations`),t=this.container.storage.get(`jira:${this._session.accessToken}:projects`),r=e?.data?.map(e=>({...e})),i=t?.data?.map(e=>({...e}));for(let s of(null==e&&(r=await this.getProviderResourcesForUser(this._session,!0),await this.container.storage.deleteWithPrefix("jira"),await this.container.storage.store(`jira:${this._session.accessToken}:organizations`,{v:1,timestamp:Date.now(),data:r})),this._organizations??=new Map,this._organizations.set(this._session.accessToken,r),null==t&&r?.length&&(i=await this.getProviderProjectsForResources(this._session,r),await this.container.storage.store(`jira:${this._session.accessToken}:projects`,{v:1,timestamp:Date.now(),data:i})),this._projects??=new Map,i??[])){let e=`${this._session.accessToken}:${s.resourceId}`,t=this._projects.get(e);null==t?this._projects.set(e,[s]):t.some(e=>e.id===s.id)||t.push(s)}}providerOnDisconnect(){this._organizations=void 0,this._projects=void 0,this._autolinks=void 0}}},8554:(e,t,r)=>{r.r(t),r.d(t,{ProvidersApi:()=>ProvidersApi});var i=r(4137),s=r.n(i),o=r(1398),a=r(7223),n=r(2856),l=r(1646),u=r(4039),c=r(7603),d=r(3758);let ProvidersApi=class ProvidersApi{constructor(e,t){this.container=e,this.authenticationService=t;let r=(0,a.cQ)(),i=`${e.debugging?"GitLens-Debug":e.prerelease?"GitLens-Pre":"GitLens"}/${e.version} (${o.env.appName}/${o.version}; ${(0,n.uo)()})`,u=async({url:e,...t})=>h(await (0,a.hd)(e,{agent:r,...t,headers:{"User-Agent":i,...t.headers}})),c=s()({request:u});this.providers={[l.Q7.GitHub]:{...d.Mt[l.Q7.GitHub],provider:c.github,getCurrentUserFn:c.github.getCurrentUser.bind(c.github),getPullRequestsForReposFn:c.github.getPullRequestsForRepos.bind(c.github),getPullRequestsForUserFn:c.github.getPullRequestsAssociatedWithUser.bind(c.github),getIssuesForReposFn:c.github.getIssuesForRepos.bind(c.github)},[l.PY.CloudGitHubEnterprise]:{...d.Mt[l.PY.GitHubEnterprise],provider:c.github,getCurrentUserFn:c.github.getCurrentUser.bind(c.github),getPullRequestsForReposFn:c.github.getPullRequestsForRepos.bind(c.github),getPullRequestsForUserFn:c.github.getPullRequestsAssociatedWithUser.bind(c.github),getIssuesForReposFn:c.github.getIssuesForRepos.bind(c.github)},[l.PY.GitHubEnterprise]:{...d.Mt[l.PY.GitHubEnterprise],provider:c.github,getCurrentUserFn:c.github.getCurrentUser.bind(c.github),getPullRequestsForReposFn:c.github.getPullRequestsForRepos.bind(c.github),getPullRequestsForUserFn:c.github.getPullRequestsAssociatedWithUser.bind(c.github),getIssuesForReposFn:c.github.getIssuesForRepos.bind(c.github)},[l.Q7.GitLab]:{...d.Mt[l.Q7.GitLab],provider:c.gitlab,getCurrentUserFn:c.gitlab.getCurrentUser.bind(c.gitlab),getPullRequestsForReposFn:c.gitlab.getPullRequestsForRepos.bind(c.gitlab),getPullRequestsForRepoFn:c.gitlab.getPullRequestsForRepo.bind(c.gitlab),getPullRequestsForUserFn:c.gitlab.getPullRequestsAssociatedWithUser.bind(c.gitlab),getIssueFn:c.gitlab.getIssue.bind(c.gitlab),getIssuesForReposFn:c.gitlab.getIssuesForRepos.bind(c.gitlab),getIssuesForRepoFn:c.gitlab.getIssuesForRepo.bind(c.gitlab),mergePullRequestFn:c.gitlab.mergePullRequest.bind(c.gitlab)},[l.PY.CloudGitLabSelfHosted]:{...d.Mt[l.Q7.GitLab],provider:c.gitlab,getCurrentUserFn:c.gitlab.getCurrentUser.bind(c.gitlab),getPullRequestsForReposFn:c.gitlab.getPullRequestsForRepos.bind(c.gitlab),getPullRequestsForRepoFn:c.gitlab.getPullRequestsForRepo.bind(c.gitlab),getPullRequestsForUserFn:c.gitlab.getPullRequestsAssociatedWithUser.bind(c.gitlab),getIssueFn:c.gitlab.getIssue.bind(c.gitlab),getIssuesForReposFn:c.gitlab.getIssuesForRepos.bind(c.gitlab),getIssuesForRepoFn:c.gitlab.getIssuesForRepo.bind(c.gitlab),mergePullRequestFn:c.gitlab.mergePullRequest.bind(c.gitlab)},[l.PY.GitLabSelfHosted]:{...d.Mt[l.PY.GitLabSelfHosted],provider:c.gitlab,getCurrentUserFn:c.gitlab.getCurrentUser.bind(c.gitlab),getPullRequestsForReposFn:c.gitlab.getPullRequestsForRepos.bind(c.gitlab),getPullRequestsForRepoFn:c.gitlab.getPullRequestsForRepo.bind(c.gitlab),getPullRequestsForUserFn:c.gitlab.getPullRequestsAssociatedWithUser.bind(c.gitlab),getIssuesForReposFn:c.gitlab.getIssuesForRepos.bind(c.gitlab),getIssuesForRepoFn:c.gitlab.getIssuesForRepo.bind(c.gitlab)},[l.Q7.Bitbucket]:{...d.Mt[l.Q7.Bitbucket],provider:c.bitbucket,getCurrentUserFn:c.bitbucket.getCurrentUser.bind(c.bitbucket),getPullRequestsForReposFn:c.bitbucket.getPullRequestsForRepos.bind(c.bitbucket),getPullRequestsForRepoFn:c.bitbucket.getPullRequestsForRepo.bind(c.bitbucket)},[l.Q7.AzureDevOps]:{...d.Mt[l.Q7.AzureDevOps],provider:c.azureDevOps,getCurrentUserFn:c.azureDevOps.getCurrentUser.bind(c.azureDevOps),getCurrentUserForInstanceFn:c.azureDevOps.getCurrentUserForInstance.bind(c.azureDevOps),getAzureResourcesForUserFn:c.azureDevOps.getOrgsForUser.bind(c.azureDevOps),getAzureProjectsForResourceFn:c.azureDevOps.getAzureProjects.bind(c.azureDevOps),getPullRequestsForReposFn:c.azureDevOps.getPullRequestsForRepos.bind(c.azureDevOps),getPullRequestsForRepoFn:c.azureDevOps.getPullRequestsForRepo.bind(c.azureDevOps),getPullRequestsForAzureProjectsFn:c.azureDevOps.getPullRequestsForProjects.bind(c.azureDevOps),getIssuesForAzureProjectFn:c.azureDevOps.getIssuesForAzureProject.bind(c.azureDevOps),getReposForAzureProjectFn:c.azureDevOps.getReposForAzureProject.bind(c.azureDevOps),mergePullRequestFn:c.azureDevOps.mergePullRequest.bind(c.azureDevOps)},[l.tp.Jira]:{...d.Mt[l.tp.Jira],provider:c.jira,getCurrentUserForResourceFn:c.jira.getCurrentUserForResource.bind(c.jira),getJiraResourcesForCurrentUserFn:c.jira.getJiraResourcesForCurrentUser.bind(c.jira),getJiraProjectsForResourcesFn:c.jira.getJiraProjectsForResources.bind(c.jira),getIssueFn:c.jira.getIssue.bind(c.jira),getIssuesForProjectFn:c.jira.getIssuesForProject.bind(c.jira),getIssuesForResourceForCurrentUserFn:c.jira.getIssuesForResourceForCurrentUser.bind(c.jira)},[l.tp.Trello]:{...d.Mt[l.tp.Trello],provider:c.trello}}}providers;getScopesForProvider(e){return this.providers[e]?.scopes}getProviderDomain(e){return this.providers[e]?.domain}getProviderPullRequestsPagingMode(e){return this.providers[e]?.pullRequestsPagingMode}getProviderIssuesPagingMode(e){return this.providers[e]?.issuesPagingMode}providerSupportsPullRequestFilters(e,t){return this.providers[e]?.supportedPullRequestFilters!=null&&t.every(t=>this.providers[e]?.supportedPullRequestFilters?.includes(t))}providerSupportsIssueFilters(e,t){return this.providers[e]?.supportedIssueFilters!=null&&t.every(t=>this.providers[e]?.supportedIssueFilters?.includes(t))}isRepoIdsInput(e){return null!=e&&Array.isArray(e)&&e.every(e=>"string"==typeof e||"number"==typeof e)}async getProviderToken(e,t){let r={domain:e.domain,scopes:e.scopes};try{let i=await this.authenticationService.get(e.id);return(await i.getSession(r,{createIfNeeded:t?.createSessionIfNeeded}))?.accessToken}catch{return}}getAzurePATForOAuthToken(e){return(0,c.K3)(`PAT:${e}`)}async ensureProviderTokenAndFunction(e,t,r){let i=this.providers[e];if(null==i)throw Error(`Provider with id ${e} not registered`);let s=r??await this.getProviderToken(i);if(null==s)throw Error(`Not connected to provider ${e}`);if(null==i[t])throw Error(`Provider with id ${e} does not support function: ${t}`);return{provider:i,token:s}}handleProviderError(e,t,r){if(null==this.providers[e])throw Error(`Provider with id ${e} not registered`);if(e===l.tp.Jira&&r?.response?.status!=null){if(401===r.response.status)throw new u.v3(e,u.R.Forbidden,r);if(429===r.response.status){let e;let i=r.response.headers?.["x-ratelimit-reset"];throw null!=i&&Number.isNaN(e=parseInt(i,10))&&(e=void 0),new u.HG(r,t,e)}if(r.response.status>=400&&r.response.status<500)throw new u.tk(r)}throw r}async getPagedResult(e,t,r,i,s="{}",o=!1,a){let n;try{n=JSON.parse(s)}catch{n={}}let l=n.value,u=n.type,c={};"page"===u?c={page:l}:"cursor"===u&&(c={cursor:l});let d={...t,...c};try{let e=await r?.(d,{token:i,isPAT:o,baseUrl:a});if(null==e)return{values:[]};let t=e.pageInfo?.hasNextPage??!1,s="{}";return e.pageInfo?.endCursor!=null?s=JSON.stringify({value:e.pageInfo?.endCursor,type:"cursor"}):e.pageInfo?.nextPage!=null&&(s=JSON.stringify({value:e.pageInfo?.nextPage,type:"page"})),{values:e.data,paging:{cursor:s,more:t}}}catch(t){return this.handleProviderError(e.id,i,t)}}async getCurrentUser(e,t){let{provider:r,token:i}=await this.ensureProviderTokenAndFunction(e,"getCurrentUserFn",t?.accessToken);try{return(await r.getCurrentUserFn?.({},{token:i,isPAT:t?.isPAT,baseUrl:t?.baseUrl}))?.data}catch(t){return this.handleProviderError(e,i,t)}}async getCurrentUserForInstance(e,t,r){let{provider:i,token:s}=await this.ensureProviderTokenAndFunction(e,"getCurrentUserForInstanceFn",r?.accessToken);return(await i.getCurrentUserForInstanceFn?.({namespace:t},{token:s,isPAT:r?.isPAT,baseUrl:r?.baseUrl}))?.data}async getCurrentUserForResource(e,t,r){let{provider:i,token:s}=await this.ensureProviderTokenAndFunction(e,"getCurrentUserForResourceFn",r?.accessToken);try{return(await i.getCurrentUserForResourceFn?.({resourceId:t},{token:s,isPAT:r?.isPAT,baseUrl:r?.baseUrl}))?.data}catch(t){return this.handleProviderError(e,s,t)}}async getJiraResourcesForCurrentUser(e){let{provider:t,token:r}=await this.ensureProviderTokenAndFunction(l.tp.Jira,"getJiraResourcesForCurrentUserFn",e?.accessToken);try{return(await t.getJiraResourcesForCurrentUserFn?.({token:r}))?.data}catch(e){return this.handleProviderError(l.tp.Jira,r,e)}}async getAzureResourcesForUser(e,t){let{provider:r,token:i}=await this.ensureProviderTokenAndFunction(l.Q7.AzureDevOps,"getAzureResourcesForUserFn",t?.accessToken);try{return(await r.getAzureResourcesForUserFn?.({userId:e},{token:i}))?.data}catch(e){return this.handleProviderError(l.Q7.AzureDevOps,i,e)}}async getJiraProjectsForResources(e,t){let{provider:r,token:i}=await this.ensureProviderTokenAndFunction(l.tp.Jira,"getJiraProjectsForResourcesFn",t?.accessToken);try{return(await r.getJiraProjectsForResourcesFn?.({resourceIds:e},{token:i}))?.data}catch(e){return this.handleProviderError(l.tp.Jira,i,e)}}async getAzureProjectsForResource(e,t){let{provider:r,token:i}=await this.ensureProviderTokenAndFunction(l.Q7.AzureDevOps,"getAzureProjectsForResourceFn",t?.accessToken),s=t?.isPAT?i:this.getAzurePATForOAuthToken(i);try{return await this.getPagedResult(r,{namespace:e,...t},r.getAzureProjectsForResourceFn,s,t?.cursor,!0)}catch(e){return this.handleProviderError(l.Q7.AzureDevOps,i,e)}}async getReposForAzureProject(e,t,r){let{provider:i,token:s}=await this.ensureProviderTokenAndFunction(l.Q7.AzureDevOps,"getReposForAzureProjectFn",r?.accessToken);return this.getPagedResult(i,{namespace:e,project:t,...r},i.getReposForAzureProjectFn,s,r?.cursor)}async getPullRequestsForRepos(e,t,r){let{provider:i,token:s}=await this.ensureProviderTokenAndFunction(e,"getPullRequestsForReposFn",r?.accessToken);return this.getPagedResult(i,{...this.isRepoIdsInput(t)?{repoIds:t}:{repos:t},...r},i.getPullRequestsForReposFn,s,r?.cursor,r?.isPAT,r?.baseUrl)}async getPullRequestsForRepo(e,t,r){let{provider:i,token:s}=await this.ensureProviderTokenAndFunction(e,"getPullRequestsForRepoFn",r?.accessToken);return this.getPagedResult(i,{repo:t,...r},i.getPullRequestsForRepoFn,s,r?.cursor,r?.isPAT,r?.baseUrl)}async getPullRequestsForUser(e,t,r){let{provider:i,token:s}=await this.ensureProviderTokenAndFunction(e,"getPullRequestsForUserFn",r?.accessToken);return this.getPagedResult(i,{...e===l.Q7.Bitbucket?{userId:t}:{username:t},...r},i.getPullRequestsForUserFn,s,r?.cursor,r?.isPAT,r?.baseUrl)}async getPullRequestsForAzureProjects(e,t){let{provider:r,token:i}=await this.ensureProviderTokenAndFunction(l.Q7.AzureDevOps,"getPullRequestsForAzureProjectsFn",t?.accessToken),s=t?.isPAT?i:this.getAzurePATForOAuthToken(i);try{return(await r.getPullRequestsForAzureProjectsFn?.({projects:e,...t},{token:s,isPAT:!0}))?.data}catch(e){return this.handleProviderError(l.Q7.AzureDevOps,i,e)}}async mergePullRequest(e,t,r){let{provider:i,token:s}=await this.ensureProviderTokenAndFunction(e,"mergePullRequestFn",r?.accessToken),o=t.refs?.head;if(null==o||i.id===l.Q7.AzureDevOps&&null==t.project)return!1;try{return await i.mergePullRequestFn?.({pullRequest:{headRef:{oid:o.sha},id:t.id,number:Number.parseInt(t.id,10),repository:{id:t.repository.repo,name:t.repository.repo,project:t.project?.name??"",owner:{login:t.repository.owner}}},...r},{token:s,isPAT:r?.isPAT,baseUrl:r?.baseUrl}),!0}catch(t){return this.handleProviderError(e,s,t)}}async getIssuesForRepos(e,t,r){let{provider:i,token:s}=await this.ensureProviderTokenAndFunction(e,"getIssuesForReposFn",r?.accessToken);return this.getPagedResult(i,{...this.isRepoIdsInput(t)?{repoIds:t}:{repos:t},...r},i.getIssuesForReposFn,s,r?.cursor,r?.isPAT,r?.baseUrl)}async getIssuesForRepo(e,t,r){let{provider:i,token:s}=await this.ensureProviderTokenAndFunction(e,"getIssuesForRepoFn",r?.accessToken);return this.getPagedResult(i,{repo:t,...r},i.getIssuesForRepoFn,s,r?.cursor,r?.isPAT,r?.baseUrl)}async getIssuesForAzureProject(e,t,r){let{provider:i,token:s}=await this.ensureProviderTokenAndFunction(l.Q7.AzureDevOps,"getIssuesForAzureProjectFn",r?.accessToken);return this.getPagedResult(i,{namespace:e,project:t,...r},i.getIssuesForAzureProjectFn,s,r?.cursor)}async getIssuesForProject(e,t,r,i){let{provider:s,token:o}=await this.ensureProviderTokenAndFunction(e,"getIssuesForProjectFn",i?.accessToken);try{let e=await s.getIssuesForProjectFn?.({projectKey:t,resourceId:r,...i},{token:o});return e?.data}catch(t){return this.handleProviderError(e,o,t)}}async getIssuesForResourceForCurrentUser(e,t,r){let{provider:i,token:s}=await this.ensureProviderTokenAndFunction(e,"getIssuesForResourceForCurrentUserFn",r?.accessToken);return this.getPagedResult(i,{resourceId:t},i.getIssuesForResourceForCurrentUserFn,s,r?.cursor,r?.isPAT,r?.baseUrl)}async getIssue(e,t,r){let{provider:i,token:s}=await this.ensureProviderTokenAndFunction(e,"getIssueFn",r?.accessToken);try{let e=await i.getIssueFn?.(t,{token:s,isPAT:r?.isPAT,baseUrl:r?.baseUrl});return e?.data}catch(t){return this.handleProviderError(e,s,t)}}};async function h(e){let t=e.headers.get("content-type")||"",r=null;if(t.startsWith("application/json")){let t=await e.text();r=t.trim().length>0?JSON.parse(t):null}else if(t.startsWith("text/")||""===t)r=await e.text();else if(t.startsWith("application/vnd.github.raw+json"))r=await e.arrayBuffer();else throw Error(`Unsupported content-type: ${t}`);let i={body:r,headers:Object.fromEntries(e.headers.entries()),status:e.status,statusText:e.statusText};if(!e.ok){let t=Error(e.statusText);throw Object.assign(t,{response:i}),t}return i}},7115:e=>{let t=function(){};t.prototype=Object.create(null);let r=/; *([!#$%&'*+.^\w`|~-]+)=("(?:[\v\u0020\u0021\u0023-\u005b\u005d-\u007e\u0080-\u00ff]|\\[\v\u0020-\u00ff])*"|[!#$%&'*+.^\w`|~-]+) */gu,i=/\\([\v\u0020-\u00ff])/gu,s=/^[!#$%&'*+.^\w|~-]+\/[!#$%&'*+.^\w|~-]+$/u,o={type:"",parameters:new t};Object.freeze(o.parameters),Object.freeze(o),e.exports.xL=function(e){let a,n,l;if("string"!=typeof e)return o;let u=e.indexOf(";"),c=-1!==u?e.slice(0,u).trim():e.trim();if(!1===s.test(c))return o;let d={type:c.toLowerCase(),parameters:new t};if(-1===u)return d;for(r.lastIndex=u;n=r.exec(e);){if(n.index!==u)return o;u+=n[0].length,a=n[1].toLowerCase(),'"'===(l=n[2])[0]&&(l=l.slice(1,l.length-1),i.test(l)&&(l=l.replace(i,"$1"))),d.parameters[a]=l}return u!==e.length?o:d}}};